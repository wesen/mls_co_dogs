(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    726089,      13211]
NotebookOptionsPosition[    722362,      13136]
NotebookOutlinePosition[    722709,      13151]
CellTagsIndexPosition[    722666,      13148]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"vgg", "=", 
  RowBox[{
  "NetModel", "[", "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728656112753993*^9, 3.728656118120839*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"3bdbf0b9-c1a2-4443-9249-55590bf7b60d"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "conv1_1" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {224, 224}, 
               "$OutputSize" -> {224, 224}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 224, 224}, NeuralNetworks`RealT]]],
            "relu1_1" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 224, 224}, NeuralNetworks`RealT]]],
            "conv1_2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {224, 224}, 
               "$OutputSize" -> {224, 224}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 224, 224}, NeuralNetworks`RealT]]],
            "relu1_2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 224, 224}, NeuralNetworks`RealT]]],
            "pool1" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {224, 224}, 
               "$OutputSize" -> {112, 112}, "$MXPoolingConvention" -> "full", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 112, 112}, NeuralNetworks`RealT]]],
            "conv2_1" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {112, 112}, 
               "$OutputSize" -> {112, 112}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]]], "relu2_1" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]]], "conv2_2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {112, 112}, 
               "$OutputSize" -> {112, 112}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]]], "relu2_2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]]], "pool2" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 128, "$InputSize" -> {112, 112}, 
               "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> "full", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 56, 56}, NeuralNetworks`RealT]]], 
           "conv3_1" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "relu3_1" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "conv3_2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "relu3_2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "conv3_3" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "relu3_3" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 56, 56}, NeuralNetworks`RealT]]], 
           "pool3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 256, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {28, 28}, "$MXPoolingConvention" -> "full", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 28, 28}, NeuralNetworks`RealT]]], 
           "conv4_1" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               256, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "relu4_1" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "conv4_2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "relu4_2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "conv4_3" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "relu4_3" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 28, 28}, NeuralNetworks`RealT]]], 
           "pool4" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 512, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> "full", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "conv5_1" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
               "$OutputSize" -> {14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "relu5_1" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "conv5_2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
               "$OutputSize" -> {14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "relu5_2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "conv5_3" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
               "$OutputSize" -> {14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "relu5_3" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 14, 14}, NeuralNetworks`RealT]]], 
           "pool5" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 512, "$InputSize" -> {14, 14}, 
               "$OutputSize" -> {7, 7}, "$MXPoolingConvention" -> "full", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 7, 7}, NeuralNetworks`RealT]]], 
           "flatten_0" -> 
           Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {25088}, 
               "$InputSize" -> {512, 7, 7}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], "fc6" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{4096, 25088}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{4096}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{25088}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
           "relu6" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
           "drop6" -> Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "fc7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 4096}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
           "relu7" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
           "drop7" -> Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "fc8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{1000, 4096}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{1000}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
               "$InputSize" -> 4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], "prob" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1000}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "conv1_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "relu1_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv1_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu1_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu1_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu1_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv2_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu2_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv2_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv2_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu2_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu2_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv2_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu2_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv3_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu3_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv3_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv3_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu3_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu3_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv3_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv3_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu3_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu3_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv3_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu3_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv4_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu4_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv4_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv4_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu4_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu4_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv4_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv4_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu4_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu4_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv4_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu4_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv5_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu5_1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv5_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv5_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu5_1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu5_2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv5_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv5_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu5_2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu5_3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv5_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu5_3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "flatten_0", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "fc6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "flatten_0", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "fc6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "drop6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "fc7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "drop6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "relu7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "fc7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "drop7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "relu7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "fc8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "drop7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "prob", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "fc8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "prob", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
              "ColorChannels" -> 3, 
              "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
               0.4076039215686274}], 
             NeuralNetworks`TensorT[{3, 224, 224}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association["Labels" -> {
                Entity["Concept", "Tench::q9r2d"], 
                Entity["Concept", "CarassiusAuratus::f73xs"], 
                Entity["Concept", "CarcharodonCarcharias::st7pj"], 
                Entity["Concept", "GaleocerdoCuvieri::h7238"], 
                Entity["Concept", "HammerheadShark::cky4t"], 
                Entity["Concept", "Crampfish::6369q"], 
                Entity["Concept", "Stingray::4cts3"], 
                Entity["Concept", "Cock::2s2xh"], 
                Entity["Concept", "Hen::49q38"], 
                Entity["Concept", "StruthioCamelus::7fgc2"], 
                Entity["Concept", "Brambling::47bpt"], 
                Entity["Concept", "CarduelisCarduelis::bv5y9"], 
                Entity["Concept", "CarpodacusMexicanus::zq6w8"], 
                Entity["Concept", "Junco::sjqs9"], 
                Entity["Concept", "IndigoBird::6365d"], 
                Entity["Concept", "AmericanRobin::wf28w"], 
                Entity["Concept", "Bulbul::4x6vd"], 
                Entity["Concept", "Jay::9g7qw"], 
                Entity["Concept", "Magpie::62kfm"], 
                Entity["Concept", "Chickadee::qmsc9"], 
                Entity["Concept", "WaterOuzel::n32d7"], 
                Entity["Concept", "Kite::y2jjm"], 
                Entity["Concept", "AmericanEagle::z2fqr"], 
                Entity["Concept", "Vulture::r2nfy"], 
                Entity["Concept", "GreatGrayOwl::97vk2"], 
                Entity["Concept", "EuropeanFireSalamander::t6v33"], 
                Entity["Concept", "CommonNewt::9nx3s"], 
                Entity["Concept", "Eft::t3bv7"], 
                Entity["Concept", "AmbystomaMaculatum::qnd2g"], 
                Entity["Concept", "AmbystomaMexicanum::k9j45"], 
                Entity["Concept", "Bullfrog::r9cvc"], 
                Entity["Concept", "Tree-frog::m988r"], 
                Entity["Concept", "AscaphusTrui::qr2np"], 
                Entity["Concept", "CarettaCaretta::768y9"], 
                Entity["Concept", "DermochelysCoriacea::ypc4b"], 
                Entity["Concept", "MudTurtle::47p9w"], 
                Entity["Concept", "Terrapin::5j9b2"], 
                Entity["Concept", "BoxTortoise::hksb9"], 
                Entity["Concept", "BandedGecko::38zhr"], 
                Entity["Concept", "CommonIguana::66q43"], 
                Entity["Concept", "AmericanChameleon::67k54"], 
                Entity["Concept", "Whiptail::sb62k"], 
                Entity["Concept", "Agama::22vdx"], 
                Entity["Concept", "ChlamydosaurusKingi::stq3k"], 
                Entity["Concept", "AlligatorLizard::k6335"], 
                Entity["Concept", "GilaMonster::k8q26"], 
                Entity["Concept", "GreenLizard::2fkzv"], 
                Entity["Concept", "AfricanChameleon::x82fs"], 
                Entity["Concept", "DragonLizard::s68v6"], 
                Entity["Concept", "AfricanCrocodile::zw55f"], 
                Entity["Concept", "AlligatorMississipiensis::s7582"], 
                Entity["Concept", "Triceratops::p997c"], 
                Entity["Concept", "CarphophisAmoenus::35dfs"], 
                Entity["Concept", "Ring-neckedSnake::2f823"], 
                Entity["Concept", "HognoseSnake::k5k58"], 
                Entity["Concept", "GrassSnake::pv2xf"], 
                Entity["Concept", "KingSnake::t9m8y"], 
                Entity["Concept", "GarterSnake::892t9"], 
                Entity["Concept", "WaterSnake::y627x"], 
                Entity["Concept", "VineSnake::9kywz"], 
                Entity["Concept", "HypsiglenaTorquata::6869v"], 
                Entity["Concept", "BoaConstrictor::qq73z"], 
                Entity["Concept", "PythonSebae::dmhh6"], 
                Entity["Concept", "IndianCobra::2sv7h"], 
                Entity["Concept", "GreenMamba::c9qn3"], 
                Entity["Concept", "SeaSnake::s529y"], 
                Entity["Concept", "Cerastes::6575z"], 
                Entity["Concept", "CrotalusAdamanteus::8ynrx"], 
                Entity["Concept", "CrotalusCerastes::m382t"], 
                Entity["Concept", "Trilobite::3qyq3"], 
                Entity["Concept", "Harvestman::545h3"], 
                Entity["Concept", "Scorpion::9rx48"], 
                Entity["Concept", "ArgiopeAurantia::633xv"], 
                Entity["Concept", "AraneusCavaticus::thm3g"], 
                Entity["Concept", "AraneaDiademata::4jvj8"], 
                Entity["Concept", "BlackWidow::4682d"], 
                Entity["Concept", "Tarantula::mc462"], 
                Entity["Concept", "HuntingSpider::q7898"], 
                Entity["Concept", "Tick::xw6hc"], 
                Entity["Concept", "Centipede::s8w7r"], 
                Entity["Concept", "BlackGrouse::9w35m"], 
                Entity["Concept", "Ptarmigan::tv6c8"], 
                Entity["Concept", "BonasaUmbellus::bpbr3"], 
                Entity["Concept", "PrairieChicken::2ws9g"], 
                Entity["Concept", "Peacock::kd2y4"], 
                Entity["Concept", "Quail::7462f"], 
                Entity["Concept", "Partridge::t22mp"], 
                Entity["Concept", "AfricanGray::84css"], 
                Entity["Concept", "Macaw::ntx97"], 
                Entity["Concept", "CacatuaGalerita::tfz9w"], 
                Entity["Concept", "Lorikeet::4f725"], 
                Entity["Concept", "Coucal::z95g6"], 
                Entity["Concept", "BeeEater::376h3"], 
                Entity["Concept", "Hornbill::6389h"], 
                Entity["Concept", "Hummingbird::vz6gt"], 
                Entity["Concept", "Jacamar::v7428"], 
                Entity["Concept", "Toucan::2h2d5"], 
                Entity["Concept", "Drake::5cdfw"], 
                Entity["Concept", "MergusSerrator::5t86m"], 
                Entity["Concept", "Goose::82x27"], 
                Entity["Concept", "BlackSwan::6ft7p"], 
                Entity["Concept", "Tusker::dqq7d"], 
                Entity["Concept", "Anteater::8t864"], 
                Entity["Concept", "Duck-billedPlatypus::b8867"], 
                Entity["Concept", "BrushKangaroo::493r2"], 
                Entity["Concept", "KangarooBear::hvf3s"], 
                Entity["Concept", "Wombat::m5rqr"], 
                Entity["Concept", "Jellyfish::fs9rf"], 
                Entity["Concept", "SeaAnemone::5n98x"], 
                Entity["Concept", "BrainCoral::v7844"], 
                Entity["Concept", "Flatworm::h957w"], 
                Entity["Concept", "Nematode::hz536"], 
                Entity["Concept", "Conch::44pfv"], 
                Entity["Concept", "Snail::3r58h"], 
                Entity["Concept", "Slug::d4638"], 
                Entity["Concept", "Nudibranch::dq2vh"], 
                Entity["Concept", "Coat-of-mailShell::h3tp5"], 
                Entity["Concept", "ChamberedNautilus::tspc6"], 
                Entity["Concept", "CancerMagister::5r562"], 
                Entity["Concept", "CancerIrroratus::d69mr"], 
                Entity["Concept", "FiddlerCrab::4mt9n"], 
                Entity["Concept", "ParalithodesCamtschatica::pfzy2"], 
                Entity["Concept", "HomarusAmericanus::n2j65"], 
                Entity["Concept", "SeaCrawfish::x53g2"], 
                Entity["Concept", "Crawdaddy::946y4"], 
                Entity["Concept", "HermitCrab::4k242"], 
                Entity["Concept", "Isopod::4z747"], 
                Entity["Concept", "CiconiaCiconia::wkt3m"], 
                Entity["Concept", "BlackStork::5v349"], 
                Entity["Concept", "Spoonbill::4939q"], 
                Entity["Concept", "Flamingo::28r7m"], 
                Entity["Concept", "EgrettaCaerulea::9965c"], 
                Entity["Concept", "AmericanEgret::43jz8"], 
                Entity["Concept", "Bittern::722qw"], 
                Entity["Concept", "Crane::9wrg8"], 
                Entity["Concept", "AramusPictus::964mw"], 
                Entity["Concept", "EuropeanGallinule::c7jfx"], 
                Entity["Concept", "AmericanCoot::c7452"], 
                Entity["Concept", "Bustard::p3zj5"], 
                Entity["Concept", "ArenariaInterpres::3rbq4"], 
                Entity["Concept", "Dunlin::4mj52"], 
                Entity["Concept", "Redshank::yvbj8"], 
                Entity["Concept", "Dowitcher::47w6h"], 
                Entity["Concept", "OysterCatcher::9drpt"], 
                Entity["Concept", "Pelican::jpfg7"], 
                Entity["Concept", "AptenodytesPatagonica::f85wf"], 
                Entity["Concept", "Mollymawk::r8386"], 
                Entity["Concept", "EschrichtiusGibbosus::2c8q9"], 
                Entity["Concept", "KillerWhale::26sj4"], 
                Entity["Concept", "Dugong::ss39b"], 
                Entity["Concept", "SeaLion::bs87w"], 
                Entity["Concept", "Chihuahua::8hmhf"], 
                Entity["Concept", "JapaneseSpaniel::h55d9"], 
                Entity["Concept", "MalteseDog::trsv6"], 
                Entity["Concept", "Peke::b9n5f"], 
                Entity["Concept", "Shih-Tzu::kc9k8"], 
                Entity["Concept", "BlenheimSpaniel::cd3nm"], 
                Entity["Concept", "Papillon::zhn7j"], 
                Entity["Concept", "ToyTerrier::k3s97"], 
                Entity["Concept", "RhodesianRidgeback::jph75"], 
                Entity["Concept", "AfghanHound::6845m"], 
                Entity["Concept", "Basset::n769x"], 
                Entity["Concept", "Beagle::2bdvt"], 
                Entity["Concept", "Bloodhound::pc454"], 
                Entity["Concept", "Bluetick::fs5sw"], 
                Entity["Concept", "Black-and-tanCoonhound::84k6y"], 
                Entity["Concept", "WalkerFoxhound::z3y7p"], 
                Entity["Concept", "EnglishFoxhound::5v343"], 
                Entity["Concept", "Redbone::j6h4x"], 
                Entity["Concept", "Borzoi::v43t8"], 
                Entity["Concept", "IrishWolfhound::8m3gw"], 
                Entity["Concept", "ItalianGreyhound::s4gq3"], 
                Entity["Concept", "Whippet::57r47"], 
                Entity["Concept", "IbizanHound::987kj"], 
                Entity["Concept", "Elkhound::62q39"], 
                Entity["Concept", "OtterHound::3442w"], 
                Entity["Concept", "GazelleHound::7k449"], 
                Entity["Concept", "Deerhound::btsv4"], 
                Entity["Concept", "Weimaraner::476j6"], 
                Entity["Concept", "StaffordshireBullTerrier::883y3"], 
                Entity["Concept", "AmericanPitBullTerrier::kw55q"], 
                Entity["Concept", "BedlingtonTerrier::98h82"], 
                Entity["Concept", "BorderTerrier::gh5h6"], 
                Entity["Concept", "KerryBlueTerrier::t9c62"], 
                Entity["Concept", "IrishTerrier::qmsm4"], 
                Entity["Concept", "NorfolkTerrier::b7z76"], 
                Entity["Concept", "NorwichTerrier::9v483"], 
                Entity["Concept", "YorkshireTerrier::bn4jn"], 
                Entity["Concept", "Wire-hairedFoxTerrier::pn5qb"], 
                Entity["Concept", "LakelandTerrier::b729b"], 
                Entity["Concept", "SealyhamTerrier::5jz56"], 
                Entity["Concept", "Airedale::w6gf4"], 
                Entity["Concept", "CairnTerrier::67c37"], 
                Entity["Concept", "AustralianTerrier::q2h6g"], 
                Entity["Concept", "DandieDinmont::ff47s"], 
                Entity["Concept", "BostonBull::6662j"], 
                Entity["Concept", "MiniatureSchnauzer::848y9"], 
                Entity["Concept", "GiantSchnauzer::8fwv6"], 
                Entity["Concept", "StandardSchnauzer::q9j3y"], 
                Entity["Concept", "ScotchTerrier::2f2jw"], 
                Entity["Concept", "ChrysanthemumDog::y9tps"], 
                Entity["Concept", "SilkyTerrier::xyfw3"], 
                Entity["Concept", "Soft-coatedWheatenTerrier::474j2"], 
                Entity["Concept", "WestHighlandWhiteTerrier::4h85y"], 
                Entity["Concept", "LhasaApso::cr28m"], 
                Entity["Concept", "Flat-coatedRetriever::866mk"], 
                Entity["Concept", "Curly-coatedRetriever::pb8yt"], 
                Entity["Concept", "GoldenRetriever::t59tg"], 
                Entity["Concept", "LabradorRetriever::7g587"], 
                Entity["Concept", "ChesapeakeBayRetriever::s8567"], 
                Entity["Concept", "GermanShort-hairedPointer::k3297"], 
                Entity["Concept", "HungarianPointer::7555p"], 
                Entity["Concept", "EnglishSetter::ps793"], 
                Entity["Concept", "IrishSetter::h5pp3"], 
                Entity["Concept", "GordonSetter::yvx65"], 
                Entity["Concept", "BrittanySpaniel::435gz"], 
                Entity["Concept", "Clumber::2ddvk"], 
                Entity["Concept", "EnglishSpringer::f4dq6"], 
                Entity["Concept", "WelshSpringerSpaniel::qyng2"], 
                Entity["Concept", "Cocker::7284r"], 
                Entity["Concept", "SussexSpaniel::sbv42"], 
                Entity["Concept", "IrishWaterSpaniel::m9zkp"], 
                Entity["Concept", "Kuvasz::z4sxp"], 
                Entity["Concept", "Schipperke::7778z"], 
                Entity["Concept", "Groenendael::5854s"], 
                Entity["Concept", "Malinois::k8y57"], 
                Entity["Concept", "Briard::dtm5k"], 
                Entity["Concept", "Kelpie::k6795"], 
                Entity["Concept", "Komondor::p8q9b"], 
                Entity["Concept", "OldEnglishSheepdog::4zdy3"], 
                Entity["Concept", "ShetlandSheepDog::sffh8"], 
                Entity["Concept", "Collie::999kf"], 
                Entity["Concept", "BorderCollie::463w2"], 
                Entity["Concept", "BouvierDesFlandres::h7txf"], 
                Entity["Concept", "Rottweiler::zywt3"], 
                Entity["Concept", "Alsatian::fh5zw"], 
                Entity["Concept", "Doberman::zgqf4"], 
                Entity["Concept", "MiniaturePinscher::jvy9c"], 
                Entity["Concept", "GreaterSwissMountainDog::t7642"], 
                Entity["Concept", "BerneseMountainDog::y32v5"], 
                Entity["Concept", "Appenzeller::j96dj"], 
                Entity["Concept", "EntleBucher::y43x6"], 
                Entity["Concept", "Boxer::3966f"], 
                Entity["Concept", "BullMastiff::6p365"], 
                Entity["Concept", "TibetanMastiff::4f68b"], 
                Entity["Concept", "FrenchBulldog::3jg82"], 
                Entity["Concept", "GreatDane::xg8dn"], 
                Entity["Concept", "SaintBernard::r5277"], 
                Entity["Concept", "EskimoDog::2vm97"], 
                Entity["Concept", "AlaskanMalamute::y6wqq"], 
                Entity["Concept", "SiberianHusky::k7pkk"], 
                Entity["Concept", "CarriageDog::jh3w6"], 
                Entity["Concept", "Affenpinscher::58wr6"], 
                Entity["Concept", "Basenji::k9yy2"], 
                Entity["Concept", "Pug::6799h"], 
                Entity["Concept", "Leonberg::49td5"], 
                Entity["Concept", "NewfoundlandDog::q787h"], 
                Entity["Concept", "GreatPyrenees::t8qh7"], 
                Entity["Concept", "Samoyede::rq827"], 
                Entity["Concept", "Pomeranian::dx7mr"], 
                Entity["Concept", "ChowChow::7x292"], 
                Entity["Concept", "Keeshond::rz734"], 
                Entity["Concept", "BrabanconGriffon::jh5pt"], 
                Entity["Concept", "Pembroke::95g54"], 
                Entity["Concept", "Cardigan::b724j"], 
                Entity["Concept", "ToyPoodle::732f6"], 
                Entity["Concept", "MiniaturePoodle::4955p"], 
                Entity["Concept", "StandardPoodle::w25c4"], 
                Entity["Concept", "MexicanHairless::m2by7"], 
                Entity["Concept", "CanisLupus::5gwtc"], 
                Entity["Concept", "ArcticWolf::4xr47"], 
                Entity["Concept", "CanisNiger::99p6d"], 
                Entity["Concept", "BrushWolf::44t57"], 
                Entity["Concept", "CanisDingo::529k9"], 
                Entity["Concept", "CuonAlpinus::f5yfn"], 
                Entity["Concept", "AfricanHuntingDog::d9b86"], 
                Entity["Concept", "Hyaena::7444d"], 
                Entity["Concept", "VulpesVulpes::g8mvp"], 
                Entity["Concept", "VulpesMacrotis::jm64h"], 
                Entity["Concept", "AlopexLagopus::44cg9"], 
                Entity["Concept", "GrayFox::vftd5"], 
                Entity["Concept", "TabbyCat::rvg7f"], 
                Entity["Concept", "TigerCat::8k84h"], 
                Entity["Concept", "PersianCat::p69kd"], 
                Entity["Concept", "SiameseCat::hgg68"], 
                Entity["Concept", "EgyptianCat::sd6pw"], 
                Entity["Concept", "Cougar::7bc9f"], 
                Entity["Concept", "Catamount::q4f63"], 
                Entity["Concept", "PantheraPardus::r35k5"], 
                Entity["Concept", "PantheraUncia::z6697"], 
                Entity["Concept", "FelisOnca::jh7tq"], 
                Entity["Concept", "KingOfBeasts::vrwm9"], 
                Entity["Concept", "PantheraTigris::2mpmq"], 
                Entity["Concept", "GiantAnteater::y96st"], 
                Entity["Concept", "BrownBear::8374p"], 
                Entity["Concept", "AmericanBlackBear::763x8"], 
                Entity["Concept", "IceBear::fnc5j"], 
                Entity["Concept", "MelursusUrsinus::48x75"], 
                Entity["Concept", "Mongoose::5hp73"], 
                Entity["Concept", "Meerkat::q77nd"], 
                Entity["Concept", "TigerBeetle::8362y"], 
                Entity["Concept", "LadyBeetle::tx6bz"], 
                Entity["Concept", "CarabidBeetle::w3hjn"], 
                Entity["Concept", "Long-hornedBeetle::9zzc8"], 
                Entity["Concept", "Chrysomelid::y8pqz"], 
                Entity["Concept", "DungBeetle::bt6hz"], 
                Entity["Concept", "RhinocerosBeetle::23y53"], 
                Entity["Concept", "Weevil::r87rt"], 
                Entity["Concept", "Fly::68s97"], 
                Entity["Concept", "Bee::d8yym"], 
                Entity["Concept", "Ant::7tznr"], 
                Entity["Concept", "Grasshopper::52v2f"], 
                Entity["Concept", "Cricket::82n55"], 
                Entity["Concept", "StickInsect::4x983"], 
                Entity["Concept", "Cockroach::7426w"], 
                Entity["Concept", "Mantid::93t86"], 
                Entity["Concept", "Cicada::w2299"], 
                Entity["Concept", "Leafhopper::8k2k2"], 
                Entity["Concept", "Lacewing::8v2m6"], 
                Entity["Concept", "Dragonfly::7s252"], 
                Entity["Concept", "Damselfly::dh8zj"], 
                Entity["Concept", "Admiral::j6fvp"], 
                Entity["Concept", "RingletButterfly::28v7s"], 
                Entity["Concept", "DanausPlexippus::bfk9c"], 
                Entity["Concept", "CabbageButterfly::c8v77"], 
                Entity["Concept", "SulfurButterfly::b9263"], 
                Entity["Concept", "Lycaenid::4whyw"], 
                Entity["Concept", "SeaStar::46w97"], 
                Entity["Concept", "SeaUrchin::7b835"], 
                Entity["Concept", "Holothurian::7jk5q"], 
                Entity["Concept", "Cottontail::bsxk4"], 
                Entity["Concept", "Hare::55m72"], 
                Entity["Concept", "AngoraRabbit::v6627"], 
                Entity["Concept", "Hamster::9yy49"], 
                Entity["Concept", "Porcupine::5r285"], 
                Entity["Concept", "EasternFoxSquirrel::8g9v6"], 
                Entity["Concept", "Marmot::7vb94"], 
                Entity["Concept", "Beaver::qp598"], 
                Entity["Concept", "CaviaCobaya::b8w85"], 
                Entity["Concept", "Sorrel::b824z"], 
                Entity["Concept", "Zebra::nx5qr"], 
                Entity["Concept", "Grunter::437d2"], 
                Entity["Concept", "WildBoar::5wjz4"], 
                Entity["Concept", "Warthog::3q477"], 
                Entity["Concept", "Hippo::647b2"], 
                Entity["Concept", "Ox::yhn7j"], 
                Entity["Concept", "AsiaticBuffalo::532z9"], 
                Entity["Concept", "Bison::25c86"], 
                Entity["Concept", "Tup::8y669"], 
                Entity["Concept", "Bighorn::773z4"], 
                Entity["Concept", "CapraIbex::p5pmr"], 
                Entity["Concept", "Hartebeest::r8276"], 
                Entity["Concept", "AepycerosMelampus::q45p2"], 
                Entity["Concept", "Gazelle::px427"], 
                Entity["Concept", "ArabianCamel::98q62"], 
                Entity["Concept", "Llama::pp4mc"], 
                Entity["Concept", "Weasel::gcxk7"], 
                Entity["Concept", "Mink::r5727"], 
                Entity["Concept", "Fitch::x2w8q"], 
                Entity["Concept", "Black-footedFerret::r6gqg"], 
                Entity["Concept", "Otter::63tg7"], 
                Entity["Concept", "WoodPussy::6886s"], 
                Entity["Concept", "Badger::vcsk3"], 
                Entity["Concept", "Armadillo::s9866"], 
                Entity["Concept", "Ai::z6968"], 
                Entity["Concept", "Orang::5385s"], 
                Entity["Concept", "Gorilla::7vrdz"], 
                Entity["Concept", "Chimp::2t668"], 
                Entity["Concept", "Gibbon::7yqsr"], 
                Entity["Concept", "HylobatesSyndactylus::3g4xn"], 
                Entity["Concept", "Guenon::7y986"], 
                Entity["Concept", "ErythrocebusPatas::949v6"], 
                Entity["Concept", "Baboon::28m6v"], 
                Entity["Concept", "Macaque::m87ss"], 
                Entity["Concept", "Langur::3w42b"], 
                Entity["Concept", "Colobus::yqv5q"], 
                Entity["Concept", "NasalisLarvatus::92p77"], 
                Entity["Concept", "Marmoset::3j236"], 
                Entity["Concept", "CebusCapucinus::4r452"], 
                Entity["Concept", "HowlerMonkey::87c48"], 
                Entity["Concept", "TitiMonkey::6rqgy"], 
                Entity["Concept", "AtelesGeoffroyi::8f944"], 
                Entity["Concept", "SaimiriSciureus::f9528"], 
                Entity["Concept", "LemurCatta::4z4fy"], 
                Entity["Concept", "Indri::w2dsm"], 
                Entity["Concept", "ElephasMaximus::4668g"], 
                Entity["Concept", "AfricanElephant::634z7"], 
                Entity["Concept", "AilurusFulgens::m96y6"], 
                Entity["Concept", "AiluropodaMelanoleuca::xg799"], 
                Entity["Concept", "Barracouta::dzc32"], 
                Entity["Concept", "Eel::6yymn"], 
                Entity["Concept", "BlueJack::8728b"], 
                Entity["Concept", "HolocanthusTricolor::6t872"], 
                Entity["Concept", "AnemoneFish::5mdgt"], 
                Entity["Concept", "Sturgeon::46xyk"], 
                Entity["Concept", "Garfish::p9w7b"], 
                Entity["Concept", "Lionfish::45vp5"], 
                Entity["Concept", "Globefish::z6448"], 
                Entity["Concept", "Abacus::s322h"], 
                Entity["Concept", "Abaya::327b3"], 
                Entity["Concept", "AcademicGown::6vvft"], 
                Entity["Concept", "Accordion::vx545"], 
                Entity["Concept", "AcousticGuitar::wp46j"], 
                Entity["Concept", "AircraftCarrier::74d49"], 
                Entity["Concept", "Airliner::t7542"], 
                Entity["Concept", "Airship::dg429"], 
                Entity["Concept", "Altar::z644x"], 
                Entity["Concept", "Ambulance::rgts3"], 
                Entity["Concept", "AmphibiousVehicle::rr85n"], 
                Entity["Concept", "AnalogClock::3832f"], 
                Entity["Concept", "Apiary::d939v"], 
                Entity["Concept", "Apron::qr79c"], 
                Entity["Concept", "Ash-bin::6sd8p"], 
                Entity["Concept", "AssaultRifle::d2gst"], 
                Entity["Concept", "BackPack::2cjsp"], 
                Entity["Concept", "Bakehouse::6nmsm"], 
                Entity["Concept", "BalanceBeam::6nyqs"], 
                Entity["Concept", "Balloon::64p99"], 
                Entity["Concept", "Ballpen::k35fx"], 
                Entity["Concept", "BandAid::z727z"], 
                Entity["Concept", "Banjo::fs3f9"], 
                Entity["Concept", "Balusters::nt6x4"], 
                Entity["Concept", "Barbell::295kg"], 
                Entity["Concept", "BarberChair::mybp2"], 
                Entity["Concept", "Barbershop::qg6kn"], 
                Entity["Concept", "Barn::6xw3q"], 
                Entity["Concept", "Barometer::65g49"], 
                Entity["Concept", "Barrel::3pzvn"], 
                Entity["Concept", "GardenCart::7br53"], 
                Entity["Concept", "Baseball::9f8qz"], 
                Entity["Concept", "Basketball::jq262"], 
                Entity["Concept", "Bassinet::yn2td"], 
                Entity["Concept", "Bassoon::92ky9"], 
                Entity["Concept", "BathingCap::tsd8r"], 
                Entity["Concept", "BathTowel::72qcw"], 
                Entity["Concept", "BathingTub::729f8"], 
                Entity["Concept", "BeachWaggon::c945g"], 
                Entity["Concept", "BeaconLight::k282w"], 
                Entity["Concept", "Beaker::btv5s"], 
                Entity["Concept", "Busby::448c3"], 
                Entity["Concept", "BeerBottle::8gz7t"], 
                Entity["Concept", "BeerGlass::r6xp2"], 
                Entity["Concept", "BellCot::567d3"], 
                Entity["Concept", "Bib::5wq8k"], 
                Entity["Concept", "Bicycle-built-for-two::7h478"], 
                Entity["Concept", "Bikini::m86f8"], 
                Entity["Concept", "Ring-binder::848m9"], 
                Entity["Concept", "Binoculars::yp4ss"], 
                Entity["Concept", "Birdhouse::n3qgq"], 
                Entity["Concept", "Boathouse::59rht"], 
                Entity["Concept", "Bob::n2762"], 
                Entity["Concept", "BolaTie::g65x6"], 
                Entity["Concept", "PokeBonnet::f4y42"], 
                Entity["Concept", "Bookcase::6t56v"], 
                Entity["Concept", "Bookshop::4rgfr"], 
                Entity["Concept", "Bottlecap::mgg5c"], 
                Entity["Concept", "Bow::89mx8"], 
                Entity["Concept", "Bow-tie::79h37"], 
                Entity["Concept", "MemorialTablet::66g76"], 
                Entity["Concept", "Bandeau::4j247"], 
                Entity["Concept", "Breakwater::nrtz2"], 
                Entity["Concept", "Breastplate::4fmw7"], 
                Entity["Concept", "Broom::hgy49"], 
                Entity["Concept", "Bucket::f9743"], 
                Entity["Concept", "Buckle::3398s"], 
                Entity["Concept", "BulletproofVest::djqn3"], 
                Entity["Concept", "BulletTrain::4dfr5"], 
                Entity["Concept", "ButcherShop::hfp48"], 
                Entity["Concept", "Taxi::379w3"], 
                Entity["Concept", "Caldron::k6c8c"], 
                Entity["Concept", "WaxLight::d9rqz"], 
                Entity["Concept", "Cannon::54f56"], 
                Entity["Concept", "Canoe::nnt95"], 
                Entity["Concept", "CanOpener::6b885"], 
                Entity["Concept", "Cardigan::237mv"], 
                Entity["Concept", "CarMirror::5xccg"], 
                Entity["Concept", "Carousel::n2992"], 
                Entity["Concept", "CarpentersKit::37rxx"], 
                Entity["Concept", "Carton::769gr"], 
                Entity["Concept", "CarWheel::t6f2y"], 
                Entity["Concept", "AutomatedTeller::w8746"], 
                Entity["Concept", "Cassette::2pvzn"], 
                Entity["Concept", "CassettePlayer::v2ng9"], 
                Entity["Concept", "Castle::m2pbs"], 
                Entity["Concept", "Catamaran::7b489"], 
                Entity["Concept", "CDPlayer::7gq93"], 
                Entity["Concept", "Cello::hhbp5"], 
                Entity["Concept", "Cellphone::5k4s4"], 
                Entity["Concept", "Chain::w9j9s"], 
                Entity["Concept", "ChainlinkFence::pfv8d"], 
                Entity["Concept", "ChainArmor::h32y6"], 
                Entity["Concept", "ChainSaw::f5bt6"], 
                Entity["Concept", "Chest::fd956"], 
                Entity["Concept", "Chiffonier::m3jmr"], 
                Entity["Concept", "Chime::m6623"], 
                Entity["Concept", "ChinaCabinet::9bmqg"], 
                Entity["Concept", "ChristmasStocking::867r8"], 
                Entity["Concept", "ChurchBuilding::2394b"], 
                Entity["Concept", "MovieHouse::hbj23"], 
                Entity["Concept", "Cleaver::bk925"], 
                Entity["Concept", "CliffDwelling::5c9sb"], 
                Entity["Concept", "Cloak::dj822"], 
                Entity["Concept", "Geta::3r9c9"], 
                Entity["Concept", "CocktailShaker::r9655"], 
                Entity["Concept", "CoffeeMug::gwhm5"], 
                Entity["Concept", "Coffeepot::32tb2"], 
                Entity["Concept", "Coil::c7h65"], 
                Entity["Concept", "CombinationLock::b8rp7"], 
                Entity["Concept", "ComputerKeyboard::26d5s"], 
                Entity["Concept", "CandyStore::268x7"], 
                Entity["Concept", "ContainerShip::tsz7x"], 
                Entity["Concept", "Convertible::4pxj2"], 
                Entity["Concept", "BottleScrew::djq6x"], 
                Entity["Concept", "Cornet::35d97"], 
                Entity["Concept", "CowboyBoot::5f655"], 
                Entity["Concept", "CowboyHat::59wk9"], 
                Entity["Concept", "Cradle::3882z"], 
                Entity["Concept", "Crane::k29p4"], 
                Entity["Concept", "CrashHelmet::76cs8"], 
                Entity["Concept", "Crate::wmc92"], 
                Entity["Concept", "Cot::3kgws"], 
                Entity["Concept", "CrockPot::w5t85"], 
                Entity["Concept", "CroquetBall::g84t5"], 
                Entity["Concept", "Crutch::3q57h"], 
                Entity["Concept", "Cuirass::256jq"], 
                Entity["Concept", "Dam::w9687"], 
                Entity["Concept", "Desk::q73z7"], 
                Entity["Concept", "DesktopComputer::f8gmj"], 
                Entity["Concept", "DialPhone::3j2f6"], 
                Entity["Concept", "Nappy::6979r"], 
                Entity["Concept", "DigitalClock::hm3x5"], 
                Entity["Concept", "DigitalWatch::v274r"], 
                Entity["Concept", "DiningTable::6ypqf"], 
                Entity["Concept", "Dishcloth::4t678"], 
                Entity["Concept", "DishWasher::px58r"], 
                Entity["Concept", "DiscBrake::bxcw7"], 
                Entity["Concept", "DockingFacility::f42zy"], 
                Entity["Concept", "DogSled::34t8q"], 
                Entity["Concept", "Dome::5j3x2"], 
                Entity["Concept", "WelcomeMat::jqb5y"], 
                Entity["Concept", "DrillingPlatform::r792r"], 
                Entity["Concept", "Membranophone::2x379"], 
                Entity["Concept", "Drumstick::4j5yw"], 
                Entity["Concept", "Dumbbell::qjh33"], 
                Entity["Concept", "DutchOven::qy3dv"], 
                Entity["Concept", "ElectricFan::n79z5"], 
                Entity["Concept", "ElectricGuitar::9pkmr"], 
                Entity["Concept", "ElectricLocomotive::5wv23"], 
                Entity["Concept", "EntertainmentCenter::mg549"], 
                Entity["Concept", "Envelope::c722j"], 
                Entity["Concept", "EspressoMaker::z42xs"], 
                Entity["Concept", "FacePowder::yzy7x"], 
                Entity["Concept", "FeatherBoa::c94h7"], 
                Entity["Concept", "FileCabinet::vsb9c"], 
                Entity["Concept", "Fireboat::xf64t"], 
                Entity["Concept", "FireEngine::zsvx8"], 
                Entity["Concept", "FireScreen::665b5"], 
                Entity["Concept", "Flagstaff::qz2t6"], 
                Entity["Concept", "TransverseFlute::8pj76"], 
                Entity["Concept", "FoldingChair::4vqcr"], 
                Entity["Concept", "FootballHelmet::c6twc"], 
                Entity["Concept", "Forklift::b2dfv"], 
                Entity["Concept", "Fountain::yn972"], 
                Entity["Concept", "FountainPen::r2vw4"], 
                Entity["Concept", "Four-poster::8kbhw"], 
                Entity["Concept", "FreightCar::5pg8s"], 
                Entity["Concept", "FrenchHorn::rm367"], 
                Entity["Concept", "FryingPan::23fyh"], 
                Entity["Concept", "FurCoat::6q374"], 
                Entity["Concept", "Dustcart::2bbpr"], 
                Entity["Concept", "GasHelmet::23k79"], 
                Entity["Concept", "GasolinePump::wk2nk"], 
                Entity["Concept", "Goblet::h85x9"], 
                Entity["Concept", "Go-kart::gjsj5"], 
                Entity["Concept", "GolfBall::63tb2"], 
                Entity["Concept", "GolfCart::sxmp6"], 
                Entity["Concept", "Gondola::4ds6k"], 
                Entity["Concept", "Tam-tam::m962t"], 
                Entity["Concept", "Gown::76k26"], 
                Entity["Concept", "GrandPiano::8kk56"], 
                Entity["Concept", "Glasshouse::qxjm6"], 
                Entity["Concept", "RadiatorGrille::75d36"], 
                Entity["Concept", "FoodMarket::4bmts"], 
                Entity["Concept", "Guillotine::w4656"], 
                Entity["Concept", "HairSlide::3xwcp"], 
                Entity["Concept", "HairSpray::9w6z4"], 
                Entity["Concept", "HalfTrack::59zq4"], 
                Entity["Concept", "Hammer::cx2fn"], 
                Entity["Concept", "Hamper::3b93m"], 
                Entity["Concept", "BlowDrier::t4dpz"], 
                Entity["Concept", "Hand-heldComputer::zs5zw"], 
                Entity["Concept", "Handkerchief::84d24"], 
                Entity["Concept", "FixedDisk::5xfff"], 
                Entity["Concept", "Harmonica::8t835"], 
                Entity["Concept", "Harp::zz89k"], 
                Entity["Concept", "Harvester::472sq"], 
                Entity["Concept", "Hatchet::7cspp"], 
                Entity["Concept", "Holster::g2prc"], 
                Entity["Concept", "HomeTheater::4y845"], 
                Entity["Concept", "Honeycomb::qq347"], 
                Entity["Concept", "Claw::7kmg8"], 
                Entity["Concept", "Hoopskirt::3784g"], 
                Entity["Concept", "HighBar::n5222"], 
                Entity["Concept", "Horse-cart::546b9"], 
                Entity["Concept", "Hourglass::83jnz"], 
                Entity["Concept", "IPod::366dw"], 
                Entity["Concept", "SmoothingIron::274h7"], 
                Entity["Concept", "Jack-o-lantern::yss6v"], 
                Entity["Concept", "BlueJean::68hww"], 
                Entity["Concept", "Jeep::5twmt"], 
                Entity["Concept", "TeeShirt::nk5bs"], 
                Entity["Concept", "JigsawPuzzle::jgp79"], 
                Entity["Concept", "Jinrikisha::g7j7m"], 
                Entity["Concept", "Joystick::nj32z"], 
                Entity["Concept", "Kimono::284nv"], 
                Entity["Concept", "KneePad::nh7y5"], 
                Entity["Concept", "Knot::f4x5y"], 
                Entity["Concept", "LabCoat::6fg55"], 
                Entity["Concept", "Ladle::3m7q7"], 
                Entity["Concept", "LampShade::4b824"], 
                Entity["Concept", "Laptop::zdd33"], 
                Entity["Concept", "LawnMower::z97p3"], 
                Entity["Concept", "LensCap::6j259"], 
                Entity["Concept", "LetterOpener::sx79v"], 
                Entity["Concept", "Library::8855f"], 
                Entity["Concept", "Lifeboat::3r554"], 
                Entity["Concept", "Igniter::638td"], 
                Entity["Concept", "Limo::jfrr3"], 
                Entity["Concept", "OceanLiner::s5fxp"], 
                Entity["Concept", "LipRouge::4vd22"], 
                Entity["Concept", "Loafer::br9fk"], 
                Entity["Concept", "Lotion::79h3v"], 
                Entity["Concept", "Loudspeaker::44d64"], 
                Entity["Concept", "JewelersLoupe::kg4bc"], 
                Entity["Concept", "Lumbermill::94r3y"], 
                Entity["Concept", "MagneticCompass::5r692"], 
                Entity["Concept", "Postbag::ck37r"], 
                Entity["Concept", "LetterBox::pccp7"], 
                Entity["Concept", "Maillot::d8grj"], 
                Entity["Concept", "TankSuit::5k74s"], 
                Entity["Concept", "ManholeCover::4x7fq"], 
                Entity["Concept", "Maraca::395nq"], 
                Entity["Concept", "Marimba::kbbq5"], 
                Entity["Concept", "Mask::798jz"], 
                Entity["Concept", "Matchstick::266wm"], 
                Entity["Concept", "Maypole::qc3qr"], 
                Entity["Concept", "Labyrinth::gc6rg"], 
                Entity["Concept", "MeasuringCup::7b637"], 
                Entity["Concept", "MedicineCabinet::m9g7m"], 
                Entity["Concept", "Megalith::753z9"], 
                Entity["Concept", "Microphone::7bqww"], 
                Entity["Concept", "MicrowaveOven::fs7tb"], 
                Entity["Concept", "MilitaryUniform::r9626"], 
                Entity["Concept", "MilkCan::d9g72"], 
                Entity["Concept", "Minibus::y94d9"], 
                Entity["Concept", "Mini::pn78q"], 
                Entity["Concept", "Minivan::yfsj9"], 
                Entity["Concept", "Missile::854m6"], 
                Entity["Concept", "Mitten::7d534"], 
                Entity["Concept", "MixingBowl::djy62"], 
                Entity["Concept", "ManufacturedHome::d7czj"], 
                Entity["Concept", "ModelT::c44dv"], 
                Entity["Concept", "Modem::wq8j3"], 
                Entity["Concept", "Monastery::mkgg8"], 
                Entity["Concept", "Monitor::nh8d4"], 
                Entity["Concept", "Moped::p85wp"], 
                Entity["Concept", "Mortar::jz37q"], 
                Entity["Concept", "Mortarboard::8r99w"], 
                Entity["Concept", "Mosque::35k94"], 
                Entity["Concept", "MosquitoNet::5z562"], 
                Entity["Concept", "MotorScooter::bbwp9"], 
                Entity["Concept", "All-terrainBike::7n976"], 
                Entity["Concept", "MountainTent::k5s7y"], 
                Entity["Concept", "ComputerMouse::kbzr4"], 
                Entity["Concept", "Mousetrap::j8542"], 
                Entity["Concept", "MovingVan::2s387"], 
                Entity["Concept", "Muzzle::c7f4q"], 
                Entity["Concept", "Nail::x2828"], 
                Entity["Concept", "NeckBrace::hxh4p"], 
                Entity["Concept", "Necklace::58n8w"], 
                Entity["Concept", "Nipple::jfzc3"], 
                Entity["Concept", "NotebookComputer::b3h64"], 
                Entity["Concept", "Obelisk::s7vg6"], 
                Entity["Concept", "Hautbois::937r3"], 
                Entity["Concept", "Ocarina::zc9mv"], 
                Entity["Concept", "Hodometer::jw6kb"], 
                Entity["Concept", "OilFilter::d8chh"], 
                Entity["Concept", "PipeOrgan::gq9sr"], 
                Entity["Concept", "Cathode-rayOscilloscope::z4q77"], 
                Entity["Concept", "Overskirt::n87sx"], 
                Entity["Concept", "Oxcart::vwjn2"], 
                Entity["Concept", "OxygenMask::4k479"], 
                Entity["Concept", "Packet::r63y2"], 
                Entity["Concept", "BoatPaddle::843sz"], 
                Entity["Concept", "PaddleWheel::c59g3"], 
                Entity["Concept", "Padlock::73c99"], 
                Entity["Concept", "Paintbrush::2456k"], 
                Entity["Concept", "Jammies::5vhcb"], 
                Entity["Concept", "Palace::3556d"], 
                Entity["Concept", "PandeanPipe::gjck2"], 
                Entity["Concept", "PaperTowel::j7j8m"], 
                Entity["Concept", "Parachute::k594d"], 
                Entity["Concept", "Bars::3m828"], 
                Entity["Concept", "ParkBench::hq98s"], 
                Entity["Concept", "ParkingMeter::h445p"], 
                Entity["Concept", "PassengerCar::b7xgp"], 
                Entity["Concept", "Patio::65kf2"], 
                Entity["Concept", "Pay-phone::4h2kc"], 
                Entity["Concept", "Footstall::b89vf"], 
                Entity["Concept", "PencilBox::977v9"], 
                Entity["Concept", "PencilSharpener::23nv4"], 
                Entity["Concept", "Essence::9m7fx"], 
                Entity["Concept", "PetriDish::xt977"], 
                Entity["Concept", "Photocopier::33g75"], 
                Entity["Concept", "Plectron::5g596"], 
                Entity["Concept", "Pickelhaube::pgr6y"], 
                Entity["Concept", "Paling::2brd3"], 
                Entity["Concept", "PickupTruck::9k58n"], 
                Entity["Concept", "Pier::36y3h"], 
                Entity["Concept", "PennyBank::78b56"], 
                Entity["Concept", "PillBottle::r9pdj"], 
                Entity["Concept", "Pillow::3y32w"], 
                Entity["Concept", "Ping-pongBall::3vdwp"], 
                Entity["Concept", "Pinwheel::85td5"], 
                Entity["Concept", "PirateShip::386k8"], 
                Entity["Concept", "Ewer::w6672"], 
                Entity["Concept", "CarpentersPlane::287kt"], 
                Entity["Concept", "Planetarium::kq5yg"], 
                Entity["Concept", "PlasticBag::9x453"], 
                Entity["Concept", "PlateRack::sxt2r"], 
                Entity["Concept", "Plough::y6c4t"], 
                Entity["Concept", "PlumbersHelper::hq4m2"], 
                Entity["Concept", "PolaroidCamera::38q9k"], 
                Entity["Concept", "Pole::c4566"], 
                Entity["Concept", "BlackMaria::5jn8v"], 
                Entity["Concept", "Poncho::tr389"], 
                Entity["Concept", "BilliardTable::9c56d"], 
                Entity["Concept", "PopBottle::6243b"], 
                Entity["Concept", "Flowerpot::jjb26"], 
                Entity["Concept", "PottersWheel::zwt32"], 
                Entity["Concept", "PowerDrill::j44yg"], 
                Entity["Concept", "PrayerMat::x6rjb"], 
                Entity["Concept", "Printer::c4244"], 
                Entity["Concept", "Prison::rsq7c"], 
                Entity["Concept", "Missile::n28m6"], 
                Entity["Concept", "Projector::d56q9"], 
                Entity["Concept", "HockeyPuck::3hj3q"], 
                Entity["Concept", "PunchBag::wm5qg"], 
                Entity["Concept", "Purse::n57jd"], 
                Entity["Concept", "QuillPen::jm57s"], 
                Entity["Concept", "Quilt::f56w9"], 
                Entity["Concept", "RaceCar::9m8p9"], 
                Entity["Concept", "Racquet::53f72"], 
                Entity["Concept", "Radiator::3959j"], 
                Entity["Concept", "Radio::8p736"], 
                Entity["Concept", "RadioReflector::55ckr"], 
                Entity["Concept", "RainBarrel::65nkh"], 
                Entity["Concept", "RecreationalVehicle::p93tb"], 
                Entity["Concept", "Reel::v4rgf"], 
                Entity["Concept", "ReflexCamera::j67h4"], 
                Entity["Concept", "Icebox::tnkd4"], 
                Entity["Concept", "Remote::h4drx"], 
                Entity["Concept", "Eatery::f73dy"], 
                Entity["Concept", "Six-gun::ctqb6"], 
                Entity["Concept", "Rifle::x7pp3"], 
                Entity["Concept", "RockingChair::ncpd5"], 
                Entity["Concept", "Rotisserie::c8hjy"], 
                Entity["Concept", "PencilEraser::7y7dd"], 
                Entity["Concept", "RugbyBall::34tbp"], 
                Entity["Concept", "Rule::shrw6"], 
                Entity["Concept", "RunningShoe::z7fvm"], 
                Entity["Concept", "Safe::36p67"], 
                Entity["Concept", "SafetyPin::8h4m3"], 
                Entity["Concept", "SaltShaker::7k48t"], 
                Entity["Concept", "Sandal::7f3xr"], 
                Entity["Concept", "Sarong::96j5v"], 
                Entity["Concept", "Sax::v45s9"], 
                Entity["Concept", "Scabbard::77z36"], 
                Entity["Concept", "WeighingMachine::2xvy7"], 
                Entity["Concept", "SchoolBus::2983r"], 
                Entity["Concept", "Schooner::f2t26"], 
                Entity["Concept", "Scoreboard::z76vk"], 
                Entity["Concept", "CRTScreen::q6vr6"], 
                Entity["Concept", "Screw::wwzc4"], 
                Entity["Concept", "Screwdriver::8ty86"], 
                Entity["Concept", "SeatBelt::4qg32"], 
                Entity["Concept", "SewingMachine::23c46"], 
                Entity["Concept", "Buckler::4m7zq"], 
                Entity["Concept", "Shoe-shop::7ds48"], 
                Entity["Concept", "Shoji::x95jt"], 
                Entity["Concept", "ShoppingBasket::db865"], 
                Entity["Concept", "ShoppingCart::95g62"], 
                Entity["Concept", "Shovel::tjpz7"], 
                Entity["Concept", "ShowerCap::2787m"], 
                Entity["Concept", "ShowerCurtain::6cs25"], 
                Entity["Concept", "Ski::5nbj2"], 
                Entity["Concept", "SkiMask::6hd4m"], 
                Entity["Concept", "SleepingBag::549k4"], 
                Entity["Concept", "SlideRule::59p96"], 
                Entity["Concept", "SlidingDoor::m65qk"], 
                Entity["Concept", "One-armedBandit::573v8"], 
                Entity["Concept", "Snorkel::53ncf"], 
                Entity["Concept", "Snowmobile::y538p"], 
                Entity["Concept", "Snowplough::h36y5"], 
                Entity["Concept", "SoapDispenser::c2fjc"], 
                Entity["Concept", "SoccerBall::25w42"], 
                Entity["Concept", "Sock::8w379"], 
                Entity["Concept", "SolarCollector::pw2xw"], 
                Entity["Concept", "Sombrero::k9893"], 
                Entity["Concept", "SoupBowl::w86pk"], 
                Entity["Concept", "SpaceBar::735sr"], 
                Entity["Concept", "SpaceHeater::spt23"], 
                Entity["Concept", "SpaceShuttle::72jnc"], 
                Entity["Concept", "Spatula::r7876"], 
                Entity["Concept", "Speedboat::r6p4f"], 
                Entity["Concept", "SpidersWeb::28fz6"], 
                Entity["Concept", "Spindle::7zh9v"], 
                Entity["Concept", "SportCar::k9874"], 
                Entity["Concept", "Spot::q3792"], 
                Entity["Concept", "Stage::86r83"], 
                Entity["Concept", "SteamLocomotive::9kv4y"], 
                Entity["Concept", "SteelArchBridge::46zx5"], 
                Entity["Concept", "SteelDrum::fqv7s"], 
                Entity["Concept", "Stethoscope::f829c"], 
                Entity["Concept", "Stole::g8fqc"], 
                Entity["Concept", "StoneWall::8489j"], 
                Entity["Concept", "StopWatch::4vk6s"], 
                Entity["Concept", "Stove::27vm8"], 
                Entity["Concept", "Strainer::2c2kx"], 
                Entity["Concept", "Streetcar::vhm65"], 
                Entity["Concept", "Stretcher::74r96"], 
                Entity["Concept", "DayBed::nrph3"], 
                Entity["Concept", "Stupa::g64q6"], 
                Entity["Concept", "Pigboat::p7yyy"], 
                Entity["Concept", "SuitOfClothes::5c67x"], 
                Entity["Concept", "Sundial::7mj6d"], 
                Entity["Concept", "Sunglass::xc3yz"], 
                Entity["Concept", "DarkGlasses::855bw"], 
                Entity["Concept", "Sunblock::65k7n"], 
                Entity["Concept", "SuspensionBridge::66qcg"], 
                Entity["Concept", "Mop::v6xdr"], 
                Entity["Concept", "Sweatshirt::s5937"], 
                Entity["Concept", "BathingTrunks::c892w"], 
                Entity["Concept", "Swing::s5b96"], 
                Entity["Concept", "ElectricalSwitch::5gnjt"], 
                Entity["Concept", "Syringe::8j57r"], 
                Entity["Concept", "TableLamp::6239m"], 
                Entity["Concept", "ArmoredCombatVehicle::353r5"], 
                Entity["Concept", "TapePlayer::bf5f8"], 
                Entity["Concept", "Teapot::c54x7"], 
                Entity["Concept", "TeddyBear::f56q9"], 
                Entity["Concept", "TelevisionSystem::5593b"], 
                Entity["Concept", "TennisBall::xk58h"], 
                Entity["Concept", "ThatchedRoof::w2cjw"], 
                Entity["Concept", "TheaterCurtain::5kbhk"], 
                Entity["Concept", "Thimble::9828b"], 
                Entity["Concept", "ThreshingMachine::372m3"], 
                Entity["Concept", "Throne::2t9q6"], 
                Entity["Concept", "TileRoof::5p749"], 
                Entity["Concept", "Toaster::rp6v2"], 
                Entity["Concept", "TobacconistShop::88ncg"], 
                Entity["Concept", "ToiletSeat::z8wvq"], 
                Entity["Concept", "Torch::j9rg7"], 
                Entity["Concept", "TotemPole::gbxn5"], 
                Entity["Concept", "TowCar::ph6vn"], 
                Entity["Concept", "Toyshop::74q74"], 
                Entity["Concept", "Tractor::39j62"], 
                Entity["Concept", "ArticulatedLorry::ph66j"], 
                Entity["Concept", "Tray::jyx2n"], 
                Entity["Concept", "TrenchCoat::rq833"], 
                Entity["Concept", "Tricycle::3537s"], 
                Entity["Concept", "Trimaran::2639q"], 
                Entity["Concept", "Tripod::pqth2"], 
                Entity["Concept", "TriumphalArch::q79sh"], 
                Entity["Concept", "TracklessTrolley::78g52"], 
                Entity["Concept", "Trombone::22z3w"], 
                Entity["Concept", "Vat::vcpt8"], 
                Entity["Concept", "Turnstile::82gr4"], 
                Entity["Concept", "TypewriterKeyboard::z8334"], 
                Entity["Concept", "Umbrella::3mntq"], 
                Entity["Concept", "Monocycle::mrm29"], 
                Entity["Concept", "UprightPiano::286t3"], 
                Entity["Concept", "VacuumCleaner::7rg56"], 
                Entity["Concept", "Vase::4x594"], 
                Entity["Concept", "Vault::7k875"], 
                Entity["Concept", "Velvet::575z6"], 
                Entity["Concept", "VendingMachine::96kgg"], 
                Entity["Concept", "Vestment::334y8"], 
                Entity["Concept", "Viaduct::p32mt"], 
                Entity["Concept", "Fiddle::q9djd"], 
                Entity["Concept", "Volleyball::q7bkw"], 
                Entity["Concept", "WaffleIron::gpqx8"], 
                Entity["Concept", "WallClock::w5687"], 
                Entity["Concept", "Billfold::z7845"], 
                Entity["Concept", "Closet::588p6"], 
                Entity["Concept", "MilitaryPlane::whx2r"], 
                Entity["Concept", "Handbasin::6w875"], 
                Entity["Concept", "AutomaticWasher::6d32z"], 
                Entity["Concept", "WaterBottle::5wh67"], 
                Entity["Concept", "WaterJug::759dt"], 
                Entity["Concept", "WaterTower::4rr5d"], 
                Entity["Concept", "WhiskeyJug::5gcrh"], 
                Entity["Concept", "Whistle::pv275"], 
                Entity["Concept", "Wig::9msqy"], 
                Entity["Concept", "WindowScreen::wfk7m"], 
                Entity["Concept", "WindowShade::3rh75"], 
                Entity["Concept", "WindsorTie::5tt62"], 
                Entity["Concept", "WineBottle::g4m78"], 
                Entity["Concept", "Wing::tbhz7"], 
                Entity["Concept", "Wok::fv9fj"], 
                Entity["Concept", "WoodenSpoon::nc2wp"], 
                Entity["Concept", "Woolen::ns82d"], 
                Entity["Concept", "SnakeFence::837z2"], 
                Entity["Concept", "Wreck::qr554"], 
                Entity["Concept", "Yawl::hggp6"], 
                Entity["Concept", "Yurt::4bbtv"], 
                Entity["Concept", "InternetSite::639pp"], 
                Entity["Concept", "ComicBook::ty3qz"], 
                Entity["Concept", "Crossword::yqtk6"], 
                Entity["Concept", "StreetSign::ysx2f"], 
                Entity["Concept", "TrafficLight::b4966"], 
                Entity["Concept", "BookJacket::sy4d3"], 
                Entity["Concept", "Menu::g698m"], 
                Entity["Concept", "Plate::2244k"], 
                Entity["Concept", "Guacamole::xc482"], 
                Entity["Concept", "Consomme::37g8f"], 
                Entity["Concept", "HotPot::kgb8q"], 
                Entity["Concept", "Trifle::b4264"], 
                Entity["Concept", "IceCream::825yn"], 
                Entity["Concept", "IceLolly::473v3"], 
                Entity["Concept", "FrenchLoaf::x859t"], 
                Entity["Concept", "Bagel::x38n5"], 
                Entity["Concept", "Pretzel::967k7"], 
                Entity["Concept", "Cheeseburger::3z2z7"], 
                Entity["Concept", "RedHot::3j848"], 
                Entity["Concept", "MashedPotato::8ys8w"], 
                Entity["Concept", "HeadCabbage::9c693"], 
                Entity["Concept", "Broccoli::spbm9"], 
                Entity["Concept", "Cauliflower::fmp3m"], 
                Entity["Concept", "Courgette::44yb5"], 
                Entity["Concept", "SpaghettiSquash::8j979"], 
                Entity["Concept", "AcornSquash::8p8y2"], 
                Entity["Concept", "ButternutSquash::6k466"], 
                Entity["Concept", "Cuke::nzfb2"], 
                Entity["Concept", "Artichoke::ntvv7"], 
                Entity["Concept", "BellPepper::9w646"], 
                Entity["Concept", "Cardoon::s78dn"], 
                Entity["Concept", "Mushroom::3xw4j"], 
                Entity["Concept", "GrannySmith::k3786"], 
                Entity["Concept", "Strawberry::3csyb"], 
                Entity["Concept", "Orange::w579d"], 
                Entity["Concept", "Lemon::743j2"], 
                Entity["Concept", "Fig::d3p6f"], 
                Entity["Concept", "Ananas::m6nzv"], 
                Entity["Concept", "Banana::f6z73"], 
                Entity["Concept", "Jak::p6r56"], 
                Entity["Concept", "CustardApple::nx482"], 
                Entity["Concept", "Pomegranate::dh736"], 
                Entity["Concept", "Hay::vcd3m"], 
                Entity["Concept", "Carbonara::9my37"], 
                Entity["Concept", "ChocolateSauce::y5838"], 
                Entity["Concept", "Dough::8x86g"], 
                Entity["Concept", "MeatLoaf::t7nnp"], 
                Entity["Concept", "Pizza::56w88"], 
                Entity["Concept", "Potpie::38zh5"], 
                Entity["Concept", "Burrito::4xwy5"], 
                Entity["Concept", "RedWine::666g6"], 
                Entity["Concept", "Espresso::rv2y4"], 
                Entity["Concept", "Cup::q9zjy"], 
                Entity["Concept", "Eggnog::9v7t8"], 
                Entity["Concept", "Alp::m4bkv"], 
                Entity["Concept", "Bubble::qp224"], 
                Entity["Concept", "Cliff::q56fy"], 
                Entity["Concept", "CoralReef::669j5"], 
                Entity["Concept", "Geyser::5w69b"], 
                Entity["Concept", "Lakeshore::4483j"], 
                Entity["Concept", "Headland::8n9c9"], 
                Entity["Concept", "SandBar::4w689"], 
                Entity["Concept", "Sea-coast::m3d85"], 
                Entity["Concept", "Vale::88wm8"], 
                Entity["Concept", "Volcano::9fcbc"], 
                Entity["Concept", "Ballplayer::7v976"], 
                Entity["Concept", "Bridegroom::85m28"], 
                Entity["Concept", "ScubaDiver::kqb95"], 
                Entity["Concept", "Rapeseed::5x738"], 
                Entity["Concept", "Daisy::hypz2"], 
                Entity["Concept", "CypripediumCalceolus::7tzrs"], 
                Entity["Concept", "Corn::m7hpj"], 
                Entity["Concept", "Acorn::f62cf"], 
                Entity["Concept", "RoseHip::333d2"], 
                Entity["Concept", "Conker::v8p64"], 
                Entity["Concept", "CoralFungus::f7fp4"], 
                Entity["Concept", "Agaric::844w2"], 
                Entity["Concept", "Gyromitra::3v4zb"], 
                Entity["Concept", "CarrionFungus::wj2ng"], 
                Entity["Concept", "Earthstar::678m7"], 
                Entity["Concept", "GrifolaFrondosa::m7rxd"], 
                Entity["Concept", "Bolete::9g3s2"], 
                Entity["Concept", "Capitulum::834z6"], 
                Entity["Concept", "BathroomTissue::ts4sr"]}, "Dimensions" -> 
              1000], 
             NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"112\"", 
                    "\"112\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu3_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu3_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu3_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu3_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu4_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu4_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu4_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu4_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu4_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"28\"", 
                    "\"28\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu4_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu5_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu5_1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu5_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu5_2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu5_3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"14\"", 
                    "\"14\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu5_3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"7\"", "\"7\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"fc6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "fc6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"drop6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "drop6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"fc7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "fc7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"relu7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "relu7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"drop7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "drop7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"fc8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "fc8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"prob\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "prob"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{341., {318., 322.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7286561242403393`*^9, 3.7286590936801453`*^9, 3.728661065632024*^9, 
   3.728661106806336*^9, {3.728661156630548*^9, 3.728661161423916*^9}, 
   3.728661236908629*^9},ExpressionUUID->"77413d88-cea0-4dd0-a35a-\
7519daf60f40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", "\"\<~/code/wesen/deep-learning/dogs\>\"", 
  "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728656343055949*^9, 3.7286563502632303`*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"8fce87c7-45db-49ce-891d-71cf8b012401"],

Cell[BoxData["\<\"/home/manuel/code/wesen/deep-learning/dogs\"\>"], "Output",
 CellChangeTimes->{3.728656350622529*^9, 3.728659099479764*^9, 
  3.7286610659926443`*^9, 3.728661107160657*^9, 3.728661156826223*^9, 
  3.7286612371608963`*^9},ExpressionUUID->"a0d69ec3-0cc7-4a42-90fc-\
2dff34ced404"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"categories", "=", 
  RowBox[{"FileNameTake", "/@", 
   RowBox[{"FileNames", "[", "\"\<Images/*\>\"", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7286563585037403`*^9, 3.728656381023086*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"88d9d711-d070-4017-99c3-ea56517b71e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"n02085620-Chihuahua\"\>", 
   ",", "\<\"n02085782-Japanese_spaniel\"\>", 
   ",", "\<\"n02085936-Maltese_dog\"\>", ",", "\<\"n02086079-Pekinese\"\>", 
   ",", "\<\"n02086240-Shih-Tzu\"\>", 
   ",", "\<\"n02086646-Blenheim_spaniel\"\>", 
   ",", "\<\"n02086910-papillon\"\>", ",", "\<\"n02087046-toy_terrier\"\>", 
   ",", "\<\"n02087394-Rhodesian_ridgeback\"\>", 
   ",", "\<\"n02088094-Afghan_hound\"\>", ",", "\<\"n02088238-basset\"\>", 
   ",", "\<\"n02088364-beagle\"\>", ",", "\<\"n02088466-bloodhound\"\>", 
   ",", "\<\"n02088632-bluetick\"\>", 
   ",", "\<\"n02089078-black-and-tan_coonhound\"\>", 
   ",", "\<\"n02089867-Walker_hound\"\>", 
   ",", "\<\"n02089973-English_foxhound\"\>", 
   ",", "\<\"n02090379-redbone\"\>", ",", "\<\"n02090622-borzoi\"\>", 
   ",", "\<\"n02090721-Irish_wolfhound\"\>", 
   ",", "\<\"n02091032-Italian_greyhound\"\>", 
   ",", "\<\"n02091134-whippet\"\>", ",", "\<\"n02091244-Ibizan_hound\"\>", 
   ",", "\<\"n02091467-Norwegian_elkhound\"\>", 
   ",", "\<\"n02091635-otterhound\"\>", ",", "\<\"n02091831-Saluki\"\>", 
   ",", "\<\"n02092002-Scottish_deerhound\"\>", 
   ",", "\<\"n02092339-Weimaraner\"\>", 
   ",", "\<\"n02093256-Staffordshire_bullterrier\"\>", 
   ",", "\<\"n02093428-American_Staffordshire_terrier\"\>", 
   ",", "\<\"n02093647-Bedlington_terrier\"\>", 
   ",", "\<\"n02093754-Border_terrier\"\>", 
   ",", "\<\"n02093859-Kerry_blue_terrier\"\>", 
   ",", "\<\"n02093991-Irish_terrier\"\>", 
   ",", "\<\"n02094114-Norfolk_terrier\"\>", 
   ",", "\<\"n02094258-Norwich_terrier\"\>", 
   ",", "\<\"n02094433-Yorkshire_terrier\"\>", 
   ",", "\<\"n02095314-wire-haired_fox_terrier\"\>", 
   ",", "\<\"n02095570-Lakeland_terrier\"\>", 
   ",", "\<\"n02095889-Sealyham_terrier\"\>", 
   ",", "\<\"n02096051-Airedale\"\>", ",", "\<\"n02096177-cairn\"\>", 
   ",", "\<\"n02096294-Australian_terrier\"\>", 
   ",", "\<\"n02096437-Dandie_Dinmont\"\>", 
   ",", "\<\"n02096585-Boston_bull\"\>", 
   ",", "\<\"n02097047-miniature_schnauzer\"\>", 
   ",", "\<\"n02097130-giant_schnauzer\"\>", 
   ",", "\<\"n02097209-standard_schnauzer\"\>", 
   ",", "\<\"n02097298-Scotch_terrier\"\>", 
   ",", "\<\"n02097474-Tibetan_terrier\"\>", 
   ",", "\<\"n02097658-silky_terrier\"\>", 
   ",", "\<\"n02098105-soft-coated_wheaten_terrier\"\>", 
   ",", "\<\"n02098286-West_Highland_white_terrier\"\>", 
   ",", "\<\"n02098413-Lhasa\"\>", 
   ",", "\<\"n02099267-flat-coated_retriever\"\>", 
   ",", "\<\"n02099429-curly-coated_retriever\"\>", 
   ",", "\<\"n02099601-golden_retriever\"\>", 
   ",", "\<\"n02099712-Labrador_retriever\"\>", 
   ",", "\<\"n02099849-Chesapeake_Bay_retriever\"\>", 
   ",", "\<\"n02100236-German_short-haired_pointer\"\>", 
   ",", "\<\"n02100583-vizsla\"\>", ",", "\<\"n02100735-English_setter\"\>", 
   ",", "\<\"n02100877-Irish_setter\"\>", 
   ",", "\<\"n02101006-Gordon_setter\"\>", 
   ",", "\<\"n02101388-Brittany_spaniel\"\>", 
   ",", "\<\"n02101556-clumber\"\>", 
   ",", "\<\"n02102040-English_springer\"\>", 
   ",", "\<\"n02102177-Welsh_springer_spaniel\"\>", 
   ",", "\<\"n02102318-cocker_spaniel\"\>", 
   ",", "\<\"n02102480-Sussex_spaniel\"\>", 
   ",", "\<\"n02102973-Irish_water_spaniel\"\>", 
   ",", "\<\"n02104029-kuvasz\"\>", ",", "\<\"n02104365-schipperke\"\>", 
   ",", "\<\"n02105056-groenendael\"\>", ",", "\<\"n02105162-malinois\"\>", 
   ",", "\<\"n02105251-briard\"\>", ",", "\<\"n02105412-kelpie\"\>", 
   ",", "\<\"n02105505-komondor\"\>", 
   ",", "\<\"n02105641-Old_English_sheepdog\"\>", 
   ",", "\<\"n02105855-Shetland_sheepdog\"\>", 
   ",", "\<\"n02106030-collie\"\>", ",", "\<\"n02106166-Border_collie\"\>", 
   ",", "\<\"n02106382-Bouvier_des_Flandres\"\>", 
   ",", "\<\"n02106550-Rottweiler\"\>", 
   ",", "\<\"n02106662-German_shepherd\"\>", 
   ",", "\<\"n02107142-Doberman\"\>", 
   ",", "\<\"n02107312-miniature_pinscher\"\>", 
   ",", "\<\"n02107574-Greater_Swiss_Mountain_dog\"\>", 
   ",", "\<\"n02107683-Bernese_mountain_dog\"\>", 
   ",", "\<\"n02107908-Appenzeller\"\>", ",", "\<\"n02108000-EntleBucher\"\>",
    ",", "\<\"n02108089-boxer\"\>", ",", "\<\"n02108422-bull_mastiff\"\>", 
   ",", "\<\"n02108551-Tibetan_mastiff\"\>", 
   ",", "\<\"n02108915-French_bulldog\"\>", 
   ",", "\<\"n02109047-Great_Dane\"\>", 
   ",", "\<\"n02109525-Saint_Bernard\"\>", 
   ",", "\<\"n02109961-Eskimo_dog\"\>", ",", "\<\"n02110063-malamute\"\>", 
   ",", "\<\"n02110185-Siberian_husky\"\>", 
   ",", "\<\"n02110627-affenpinscher\"\>", ",", "\<\"n02110806-basenji\"\>", 
   ",", "\<\"n02110958-pug\"\>", ",", "\<\"n02111129-Leonberg\"\>", 
   ",", "\<\"n02111277-Newfoundland\"\>", 
   ",", "\<\"n02111500-Great_Pyrenees\"\>", ",", "\<\"n02111889-Samoyed\"\>", 
   ",", "\<\"n02112018-Pomeranian\"\>", ",", "\<\"n02112137-chow\"\>", 
   ",", "\<\"n02112350-keeshond\"\>", 
   ",", "\<\"n02112706-Brabancon_griffon\"\>", 
   ",", "\<\"n02113023-Pembroke\"\>", ",", "\<\"n02113186-Cardigan\"\>", 
   ",", "\<\"n02113624-toy_poodle\"\>", 
   ",", "\<\"n02113712-miniature_poodle\"\>", 
   ",", "\<\"n02113799-standard_poodle\"\>", 
   ",", "\<\"n02113978-Mexican_hairless\"\>", ",", "\<\"n02115641-dingo\"\>", 
   ",", "\<\"n02115913-dhole\"\>", 
   ",", "\<\"n02116738-African_hunting_dog\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.728656366021964*^9, 3.728656381719482*^9}, 
   3.7286591013105087`*^9, 3.728661066029943*^9, 3.728661107200458*^9, 
   3.7286611568562593`*^9, 
   3.72866123717063*^9},ExpressionUUID->"5de0e068-744c-4c47-bd09-\
b22918747e12"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"extractBbox", "[", "xml_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bboxXml", "=", 
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{"xml", ",", 
          RowBox[{"XMLElement", "[", 
           RowBox[{"\"\<bndbox\>\"", ",", "_", ",", "_"}], "]"}], ",", 
          "Infinity"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "3"}], "]"}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{"bboxXml", "/.", 
       RowBox[{
        RowBox[{"XMLElement", "[", 
         RowBox[{"s_", ",", "_", ",", 
          RowBox[{"{", "v_", "}"}]}], "]"}], "\[RuleDelayed]", 
        RowBox[{"s", "\[Rule]", "v"}]}]}], "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getExampleBbox", "[", "file_", "]"}], ":=", "\[IndentingNewLine]", 
  
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"bbox", "=", 
      RowBox[{"extractBbox", "[", 
       RowBox[{"Import", "[", 
        RowBox[{"file", ",", "\"\<XML\>\""}], "]"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"ToExpression", "[", 
       RowBox[{"bbox", "[", "#", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{
      "\"\<xmin\>\"", ",", "\"\<xmax\>\"", ",", "\"\<ymin\>\"", ",", 
       "\"\<ymax\>\""}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.728656579046311*^9, 3.728656805756638*^9}, {
  3.7286572085461283`*^9, 3.728657216361536*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"bcfcc40b-94a6-4893-a2b8-db7e39607a91"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"categoryAnnotations", "[", "category_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<Annotation/\>\"", "~~", "category", "~~", "\"\</*\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"categoryImages", "[", "category_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<Images/\>\"", "~~", "category", "~~", "\"\</*\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"categoryElements", "[", "category_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"FileNameTake", "/@", 
    RowBox[{"categoryAnnotations", "[", "category", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makeTrainingTuples", "[", "category_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"makeTrainingTuple", "/@", 
    RowBox[{"categoryAnnotations", "[", "category", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"makeTrainingTuple", "[", "annotation_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"bbox", "=", 
       RowBox[{"getExampleBbox", "[", "annotation", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"imageFile", "=", 
       RowBox[{"File", "[", 
        RowBox[{"ToString", "[", 
         RowBox[{"\"\<Images/\>\"", "~~", 
          RowBox[{"FileNameTake", "[", 
           RowBox[{"annotation", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "~~", "\"\</\>\"", "~~", 
          RowBox[{"FileNameTake", "[", "annotation", "]"}], "~~", 
          "\"\<.jpg\>\""}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      "dimensions"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dimensions", "=", 
      RowBox[{"N", "/@", 
       RowBox[{"ImageDimensions", "[", 
        RowBox[{"Import", "[", "imageFile", "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"imageFile", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"bbox", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", 
         RowBox[{"dimensions", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"bbox", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "/", 
         RowBox[{"dimensions", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"bbox", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "/", 
         RowBox[{"dimensions", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"bbox", "[", 
          RowBox[{"[", "4", "]"}], "]"}], "/", 
         RowBox[{"dimensions", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7286563908795853`*^9, 3.728656429183226*^9}, {
  3.7286569108438177`*^9, 3.728657058251298*^9}, {3.72865732575346*^9, 
  3.728657331864867*^9}, {3.7286582021312037`*^9, 3.7286583060263863`*^9}, {
  3.728658348098783*^9, 3.728658419161852*^9}, {3.728658513129571*^9, 
  3.728658515112792*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"dce6b4f4-f565-4375-9a2b-9efc0f645b49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingTuples", "=", 
   RowBox[{"makeTrainingTuples", "[", 
    RowBox[{"categories", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.728659110788838*^9, 
  3.728659132340214*^9}},ExpressionUUID->"006ae7a1-002f-4484-9fe9-\
388015b88c00"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"annotation", "=", 
  RowBox[{
   RowBox[{"categoryAnnotations", "[", 
    RowBox[{"categories", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.728659140612599*^9, 
  3.728659152291408*^9}},ExpressionUUID->"8367b445-3db3-4fa6-959c-\
6a2fa19b38e1"],

Cell[BoxData["\<\"Annotation/n02085620-Chihuahua/n02085620_10074\"\>"], \
"Output",
 CellChangeTimes->{3.7286591527341137`*^9, 
  3.728667419848379*^9},ExpressionUUID->"66241dc4-6ed5-4feb-96c9-\
cfe133902e01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makeTrainingTuple", "[", "annotation", "]"}]], "Input",
 CellChangeTimes->{{3.72865827671496*^9, 
  3.728658279097473*^9}},ExpressionUUID->"7e97ce07-7b8c-4c12-bb1c-\
4eb69cb42255"],

Cell[BoxData[
 RowBox[{
  RowBox[{"File", "[", 
   TemplateBox[{"\"Images/n02085620-Chihuahua/n02085620_10074.jpg\""},
    "FileArgument"], "]"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{
   "0.07507507507507508`", ",", "0.8288288288288288`", ",", "0.02`", ",", 
    "0.996`"}], "}"}]}]], "Output",
 CellChangeTimes->{{3.728658279385729*^9, 3.728658307462221*^9}, 
   3.72865835322744*^9, 3.728658398952406*^9, 3.728658516425024*^9, 
   3.728659153796451*^9, 
   3.728667419895568*^9},ExpressionUUID->"b5011990-70bc-401e-9514-\
173041f16119"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingTuples", "=", 
   RowBox[{"makeTrainingTuples", "[", 
    RowBox[{"categories", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.72865705945894*^9, 
  3.728657076378037*^9}},ExpressionUUID->"de49001f-3d6e-49b9-be29-\
69ad071ebefc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingTuple", "=", 
  RowBox[{"trainingTuples", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.728657094434708*^9, 
  3.728657098633976*^9}},ExpressionUUID->"95930887-eb1e-4455-ae79-\
4dd5f0af82e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"File", "[", 
   TemplateBox[{"\"Images/n02085620-Chihuahua/n02085620_10074.jpg\""},
    "FileArgument"], "]"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{
   "0.07507507507507508`", ",", "0.8288288288288288`", ",", "0.02`", ",", 
    "0.996`"}], "}"}]}]], "Output",
 CellChangeTimes->{3.728657098923259*^9, 3.7286572201899652`*^9, 
  3.728657334215353*^9, 3.72865842794448*^9, 3.7286585223349857`*^9, 
  3.7286591574750957`*^9, 
  3.728667422918728*^9},ExpressionUUID->"7017d2db-7a6c-4031-95cc-\
a9c3389684f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bbox", "=", 
      RowBox[{"trainingTuple", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"image", "=", 
      RowBox[{"Import", "@", 
       RowBox[{"trainingTuple", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
     "dimensions"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dimensions", "=", 
     RowBox[{"ImageDimensions", "[", "image", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"HighlightImage", "[", 
     RowBox[{"image", ",", 
      RowBox[{"Rectangle", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"bbox", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "*", 
           RowBox[{"dimensions", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"bbox", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "*", 
           RowBox[{"dimensions", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"bbox", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "*", 
           RowBox[{"dimensions", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"bbox", "[", 
            RowBox[{"[", "4", "]"}], "]"}], "*", 
           RowBox[{"dimensions", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728657102402733*^9, 3.728657181041663*^9}, {
  3.728658466816616*^9, 3.72865850680068*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"52fbaa0c-89d4-46c6-8dd2-708b3d3bd5ef"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    FormBox[
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJx8vHVYm9na/T/nzHQqI+3UaEuhLe6uQYJLgBACISTE3RUJBHcrUHd3d3d3
b6ftuLvbOXPknd9KdieHb8/7/q5rzb7uZ5O2888na9333g9zJEam4q8vvPCC
dQwWprg23WIR15VOwAPLYFUrDXJZvqFKrpRbEiQvYvOXv7zwQhH+c9SvjH19
3JjXRr/8yqiXx700avSLo8e8NGbsqLHjXhn/+gt/eWHMuLETJr4x+uWXxowe
NWn86xNeGTPxpRdDPd0zYyJzE2Jz4mNoSQkFyYkoyGN2XDR+lB4VTo0ITQ0P
SQkLTA4NSArxTQzyjg+YE+s3K8bXE4r28YjynglFerlHzJkRNmtaqKdbiMdU
hzynEAV7TIaCZk4Kcp8MBc90C5wxxX/apIDpeJwG+U+b4j35jVD36QFTJ0Nh
M2fEeM1O9PdNCwnOiYqEaHGxJclJrDRqRWZGZU62KC9PRCvk5dHEdKaKxdFW
8HQVXD2n0soX2qSSBom0SSZtV8raFNIWqbDfoNkx2Hdj99bbB7a/d+Ho9w+v
/fL0NvTrW3f+9vbd396686/3Hv7t6Z2fH9349fGtf7/z4H/effj7kzs/37/2
66Prf7z/8JeH176+cfbne1e+unr6/VMHvrxy6vvr5945svvzc0d/vXP50zOH
3zq44+1DOx/t2fz04I63Du18+/Au/BRCgUds3tu54dbWNdc3rYRQ3N629uaW
1ajPLh86s2zw3IrhC6vmn1857/TSuScX959Y1HdkXtexBT0QioOD7RAKx/6C
zoPDbfvmNkP7B1uw7uyp39pRs6W9eltn7fYuG+qNLZZ1jcY1dv3qet2yWv0C
s3JQJ4GGDbJ5RvlcrbhXycfapxJ0yyu7ZFysUIekok1U3sAraeQzoSZBKURq
bNZx6PXcYgiFraKoll1YzaJBNeUFeHT9iHwMn8emvZJBCmtpnoWZiz/i+Ht4
9BpOgYWVay7LwVrFzq+uoLlWa3ke9o3MLENJpq44HTIWpesLqNr8FJfUuUnK
7ERIkZUgz4yXpsdK0mLE1GhRahQkpEaJ02PEWXGS7HhRVhwvI5pDjWClhhUn
BJWlhLOoUczkcEZCGMRMjGImxZYkpZRQqYx0Cj07rqQwjlESmUv3Scqdksed
LbFR9O2Z8qYUTUemZaDA3F9o7C0s08cUq8L5tQn6nkxFW7zAHihqChA3+6u7
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
6W1p4pponjmEYwpgGX1LjV4V1b6ixlB1V5y+jyJtCq+w+vGrg3lVQTxLELr1
iqqgfOWsLLFnjnROsTZC01XYuVbdv9lcM49rW8hVd+ZxamLY1aGsKr9S6+wK
my+/IUTeFS9oiqJpPHPl7uXmILYphCadJbbFNCwoss3N07QkmDtTZHVhXJ2X
viG+ubfQ1pJb25pd155jbqRqa2NFxiCGZBrf6C2o8uJbZ1da3SX1XqNHjx4z
hrA+DkI//vKYUaNGv/TXF18YO27UuJcdVh4w24OWlkrPTE+NCAfjEOI6GHcd
opHjcpehA3MwTgl2JHZKsB8J7cTBXZO3kXF9JOZozP2mjfd1e91/+gQw7qin
jgfmIyftsPIo79n4JsG/mx8fT09KYWVkcXPzK/NoED+/ABIXFSuYZbpyjp7N
dQR1NreaJ7JLFDZnS14vUzSrte1abata3aFR9xj0K1sa9y4cvrxt04ODez48
f+rHB+i77/xw//rvb9+DADhM/H8+eBP1T/euwsSxoiWHj4PxX+9e/enWpW+u
nPn8/PFPzx756pLj+Oxb57SNmPi3V04/3rMFDv5w58Yne7e+d2Dnu/t3vLlj
461Nqy6vXQLvRm6/vmklwjliOXycdOWX1y29sHoRMIehA/CjC/oODXcD5KPz
u8mMnZySYyXn5gAcJr69o25XdwOoR2+Ox7V2y7YO++o607Iq7Za2ug1N1YtM
yiUW9fJq3YoaPYT9xWbVQqOCqFfJh33DyomDw7URzmHfZK6O2tGPg27nPtQm
YTcLy1zTM5ezYyU9O6GbwA5yycANmy7LJqM21FgJ9SjwU/II+65l5YNucA26
iaETNyd0u2Zuzw7HcxIJ2oRuwjVW7JNNfAlIMmKJmzu+CnKSBGmxlSnRECs+
vCjcvzDMryQ6kB7lVxDjkxnpwaVF5ybPLsryLS0KNpnztbXZrQt5HUuEiobU
Ek0g3xZt6M0wDGTw7OGC+lBBXVBljX+Fyafc4MU2zK4weBcqPJLK30gun1Ks
BrDxFWaKoatseGtN4yKxoZvBscYVKLwLVZ7lVm9+vR+vwR+k8+zBsPV81cws
0dTK2lBdF1XaGCesQfxOrh3ItfamKxqieRZ/gTVAURvRNZ/Zt5DdOcSobUvT
2eI0tZFSU0CF2p2lmMpST2ZrJ3PNU4W2mUB87NhnjMPBITJ8e/W1MaNf/uu4
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
2b58e2PfCkP7EkXnSkXjQp62M6+yOoZXGyOuj5M0xJbrfXMEk2miKWy9L03g
zdHGS6vTuboEGi+ogB+MumGQa+0qltlSKo0RfEso3LlcN4elm8mzesvsoTmC
CcllY0q1c+qG84a3i9tWsvi1EZSy1/KlM1nGAFh8jsQNXs+pDjD0Uni1Abwq
P45pNkvjXiKbUiyawJRN5KjcgLnIOJNnmAYJzNOcR+XPBMAdjL86+pVXR496
6YXpU9+IDQ3Kp6YwMhxWXkhJKEp6ZuUjG3MwDrkO1IiVI7EnBPo552/PQvtz
mBPAR56YuzAH3VhdmCO0k94cjKPTT48KdbTklPjitBRWNqw8h5tbICgoho+D
cUUpG3QbOAIjV+hYKwRmrqiKL60VKerFSri5XSJvUigQ1zv1+i6ddrDKurmv
+8SalXf273568vBnV87DyoE5QP6780wcsP/7nQd4BOPox78C2pdP/XzvKhj/
x5M7f39wA3R/fPLQL7cu/3bn6udnj/1y+9IX54/BxB2N+YkDaMbvbFmDoP72
3m0AHFb+aPuGh1vW3du4+va6FTfWLoOboysH5uSsHIVjnL50CEQjpR8c6kJQ
x0qK/XM7yGV10pWDdHg3GHfcdkM+76iDia+tN2IF4xubrOvspk0tNlg23Hxj
cy1WoA0rX1FjWGUzLbVqYd8DSmGfnA/MuyXcTlEFacNh5UQuH3cxXscugsgI
Dpsuignm5J4b4B0J+MjjNtekneRzcpJODN316MIcqi7JJmgTuYybMK5GP54Z
D6myErTOa2+Odjs3EaQTkAnmoBv1MwfPjpfnURT5SVjFuQmMlLCStAgmNZKe
EJofFZQXGQjSi+JD6Emh+RT/yrIEu43dN6Soby/T1Wdr6zNr2unN/Zymvgpr
K93cUVQ/xLb0MaR2KkMVVCj3KdUFCW1xgurIMq1vpSlY15pW011q7+fVdLGl
1iyGKLxYFCIyJ1naC42tuar6ZGlNjLQ2SlQVwrf4y+vDLd0UqS2UJpycx5ss
qgm1z8vvWsWumZvPNYemcabA0POkMzPFbmnCSbmKaeyaAEVnLKfOp9TsXqSe
TJOOz+C+nFL6QjZ7FEMyQWKeLTJ6CvQzK/XuCPAjfdwB+GtjXn197Ovjx018
49XwIL/89NTirIwiajKdmlySkgzSof81sbtuxbgSe3yALxJ7tM//k9hd+s+7
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
P/79+e/fPblzbd/2zXMXLbL395vb2mVNbfzaxhKNhVqpDilV+JTrfSurgwX1
4aquVF5dXKkpgmNJKNfH5lR6lyjCbP1lTUOc+n5W4yC7Y4mwbRHf2JFfpgvL
4s/MqJyew5+eWTEpmzORo/E2tyaYW+Nk5uAKRaBAG93QXbR4nbJtgFHM8UjJ
HlfAmqavpXQvYC3bou5azBaYoorEXvnCWansKbGMsckVr+fJpjMN3hxrIK8m
RFwXKrOHCqr9pfVBYpsfx+RZYZjpNmPSDPcp7jOmuE+b5DFtcoDnzMQwx/sp
DqhTUkC3S6AeyktxYJ6ZEJcR72A8IyYamKeMuN3quBIT4JPg5xXvNyvO1yPR
3yPed3qst1vU7MnAHHQTRXq6RXhMDZ85Jcx9sgPz6RODp00Mmj4xzNPTf/p0
Xze3QHf3sNmzo319UyPCHV81yUn0NGppdgYA59ELhCV0WXmpilMmLCqQlhSp
2SwDr8Is4Jr4HCOXra9gW/iON0zrxXKnlI1SXYvC2K4yNkslfXr1ioba3UN9
Z9etvLd/1/unj3x26fS3Ny/9fP8GHJxYOZL5L/evfn/rwhcXTvzzzdt/fPj0
30/uwrjBOHj/9urZ76+fB+BfXTqFFZ/54MSBd4/ufe+Y49UzAP70wHYiRPe7
29dd37jCJSAPOQbs65ZeXr0YjEMXly04vWT4+IKBg/N79w117RnshHbP7XCQ
3t+2t7/dod623d0tQJgcgm9utW3rsG9qqcUj0eo6EwTAUa+sNQB/PK5tql5R
ZwLg4Bq8o5hvUs7VSqBOKbcZRAvL28UVWFFDIPo5zEE0ikZeKX6ERxubjhU7
+AAwJxfeCNGu+A2oSQgn99zIdRfnbbc8YG5mpJuK02pYOTZ2HjA34ZEB406D
wLgTcyowV9NTVEXJSO+wdSJtgdPo81JBuiKL4rzgSnXcWk+JQXuOhl1HQ+ud
IMyOsbBzFjeq9yxsPbyq9/qe5R9e3f+PD6799t7lr+8d/emts++c33Z8fdet
A0vfvbj5+r7571/e8sGVrU/OrX9yYfPdk+uuHll179yWy4fXvHv7yK9fPvjj
75/88e+v/vbDew9vHN+7Y2lrq7qumW+uL9baMpSw9cYYni2YafUptQYV6QJo
Sn+6JjxX5B9bOBmkW7vo1u5CazcNMnfna9tzxfbUEkNYjtQ7gflGQumEhJLX
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
VmFVKY1gjk0X4MTZySwOZk1m6c/dVCcrmci57rkZ6OkEc0dLjmacTjU7G3N9
UaoLcwfgTpYJ5oRx5y98o2JfnhenpCWoixIMzBRjaUqTpHBVq/rcprnvXtj6
45snfv/owvu3tj24sOb07r49axqPbu26dmzJhQPzUG9ZUrN22Hh4c+fRrd27
VjYd3NC5c0Xj6iFLVw2/2yZe3GVc2mPusYk7qvjzWjWo5zYqoAXtuhX9Vcu6
zfNbVPOa1Qt7LGdP7Vy5bq6tVSaz0riGxBJtWJEmiG4IpmkCE3kz48tmFKrD
+TUpRYoQmtCHVxXHrYouUPklsKZEFL2WyvMss8Rw65NKrTEple4UzlQYekrl
lFyJe4nWi2sJ4FuDxcYYlTVJX0PV16QYapKMtUmmGoqxOlFjirHYkhs68hev
lq7barF3FLEEgWVCf7E+XGoMF+tDRboQTU2ctZkqN0cWVXoItaF13fkL1oiH
Vgk75pfFRIYkxEaA8cykhJxkSp7zF0c45upEhHFna4x9J+ZxWXGI6xFU50F5
SlgweT/FEdcD5iT6zY73gY8D8BnRs6dHzZoeOdM9aqZntMesaE8PKMpjRuRM
twj3qdGzpsXMdovzmh7vPS3Oyy1mzqSoWW+Ee4yP8JyQHDIrLy6ElhheRIlm
pidyc9Mr87OljEIZk6EqY6nKy9UstorluO0GwDUsnoEttPJktSIwrsZaw5NX
VYrtEpXDyqWqdrWuRaFslEr6nK+hHVm++MLm9Y8O74OVf3r53BfXLpIrMV9c
OQuhKyeGjg7962tnoM/PH3eZOApi69gkvDtS+qFdTw7swAq9uW/b0wPbYdzE
00lcJ0Iz7rDvpUPI6iAdj2eXzzuxoP/MwsGzixywozGHm4Nxh4a7kdXRoZMR
HBpzhPYdHY3AnIzZXYM4Mm2Dd6+yGckOwRxdOTBHaAfmZKIO+wbsUIeEAx8H
2rbyInCNAmt1KQ3CDrHyJucsDhSDdDJwcwFO6HZlePK7WF0vpIy8wurqzYmb
kyMzEtqR1fWFKcDcysyElWtoSQRz4tfP5MRcSaMQc1fkJ0pz4mS5sZpiiqmc
Ks2PquFlLm2Sn9sy8NnNfb+9f/b7N4++fWXzw4vr755fc+nIwhM7+0/vGTy7
b3j3mpZFXcplffotS+2HNvUv7tINNSs2L25c3KXvrBYMt+q665X9DcquWkmd
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
KI9XC+K859rkh9b2Xzmw4pO7R9+/sf+Lh8c+vrv/nWs7Pr6796M7u28dX3Zs
c8/pnQvXDzec3rl0y6LWoQZtg5pbI0Uznl2vqOy2qpq1EgWzQMdmNqqkNqnA
zOPUiAV1MqnzFXJZk1xrE8p1pRw1o9wuUgLzdoWm32gYtBgX1Vt3L+i7umvj
xS3rbu3d+eH5Uz8/vPPb4/sw9O9uXf75/g3SocPNyZjdebJ24YvLJ3+7d+33
hzd/uOE4QIetf3r2KNpwAI7QTprxpwd3ooCV39m+HpijB4eDu3Rz8yrXORoM
HSYO6o8t6Ds83A0dm9dLrBywH53XB9L3DnYenN97bOnQlq7GTR32DW11kKMx
72hAYgfpZMgGuRI7MIeAOephraRTxB7SiFGAdHg6GnP4NVpvBHXw3i6uINM2
a0kemnHQTQbshP36P/M50CY4E6KJdz83fCN67nfCuH4tjEuuX+xGRnDm4kyC
uUvExw10qiov0VCSrmekiTKjZbnxwFyaFw/M0YbXcLMNzOQ2VcnB5e33j6//
9NahL+8d+eTOwW8en7x9YtXVQ0vO7Z0Pxk/tHN65onvL0s6185ocGm5Z1Fk9
3GJe3me3awXNRomGU9xdo+uvNxn4rK5q/cJ2e42q0iQrq1JVNFul7TXyRpOw
0VDZbhENNaqR2wfrZO1GdoumtMfCXdQoX9xhGO6t6+yqqrVLLA2c2m6uqaNE
3pSr6qCVGRMqa6jihlxhbSZDGZlZMSu30pOh8CtS+YL0fKlXiTaoRB1KZbsH
UV9yj3ghMPXFtLLpGeWQW6nKn20IosvnMOReaLHF2jAwrjBFgnFtTYzJnljd
ktrSS5u3vHLdZt2S5eLa+myRKEQui6mpymxozKquoegNUSpduM4UW9eQOXc+
d/UG7ba99as3GYeXyXrm8bqHeCAXWR0+TiZsxMoZySllaenMtLRiKpVgnpuY
gE+mx5FL7OEZESFpYUEpIb7JwT7Jgd5JAV6JfrMoyO3eM6EEH/dw94lhM95I
CfRkZ4T31QgOret9fGH7rx9e/fHdi+9e2w3dObn60fn1Ty9vunNyxaX9826f
XPrw/OobR5e8d33fkwu7f/3gxqd3Tzw6u+vB6R33Tu44s33Zml77kXULdi3p
66tS1orLa0Qsh4TsakFFNZ9TxePaRKImuapZoUE/DsCbxIpWmapXZ1hoq17R
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
IANCXpSjKM4RkFJE+Wk6NtHAJeu4JAUDLy3OltFytJxckzDfKqHYpFRIzz0a
llfLhCjVMDxqOtj4OofEpaM1Vil6u8w9/Yb6Vp7amkYVBVEloYYKssKFp8ni
8cUHyaxDQjXQGstXhhDo75A5O8jM7RTOLoM9vbNP0j+grq9nYGm1PbukJNds
S+eKgvEFb+dRt7DFByXaUJ78AFexT6Q9zFXtZ8p2yy1h7trMmmP5vnpiSVl2
qQfX3MAY6JS1+OgWTbJOHeMtzTk+IFlYdJyaNADjJT4ChKeaVFqXX95I8TZR
PI2F6FYIOrsOmBOiY4BuwBysO8zhSWZkJJLyuJCgmCBsBw1S8pj9O6L2bovc
hXbQ3g7H8vHNR7dtCt3yWvTuzelBu1hZ8aPNlX//+sn9s6NnTzbMdHkn291D
daZOrwLFcL15sNbYYBV4lUWNNmF3uabFKanU0jpKZeNt9iYHu80jqNAW1Fno
fVWK8TZrawn/4mTj2onKCxN16+O1SwOl753pvbva++ze6VvL/VdmuleHWrpK
Tc1WXbNJb2MxgfEmg2mwrGyuteniSP/d+dGHq1OPz87+5t0bX1699NnFs8+u
Xvz2xmWw7j/cvoLdTXty/3d3r4Gag2N/enbh47W5T88tAOaQjIMtB70GEUcr
6oD5p2vz4M8B85sn+iBujPReG+qGEdhHe+WBHTRgHAL5dmAcqTkADqZ9osI5
5rHOVpRMeOxAOjB+yusYcJt67boeuw5hDo69z2kA046F3QCYg3ajbXGYANGo
TCvMAeoyNgVkHb4KmAPySN9BysGrA8Xo9EsgE0c7aC8GdjbGr9doOR1YRoFI
R+tvL26rofQc3SIP3FtB4h64w4K20QNlWrH2Z3mpCHOUnmOa7iedmxyKZej4
OGDcxSU1G4WTzZ57pwd/uL/82ZXR+6s9F07WXp1uff/s0PJgdXelemm4vtYm
aivXV5rFZnFRS4XJIKbCCFCbuRQ9k6yhEXSMPFURTkJOkxVkCPISNPQcZVE6
KztCSIw3cnA6ZpaCliErzpTTspSMHA2bYBSQgXFQcwQ7KLueRzSLCoB6p4JW
YeQ3uuWlJkZzlaS7Xdvbp2vtFJlLspmy0GJZmMSaztenFEvjCnlH2ZJojSXd
WoqzlWWpLLESXXgRZzeJslkoCauoIDfWMytKybW+4vYWfl1Vsc2SrtHEMdj7
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
YJVhx2McagYw7rGIK13qijJjfaev4Xh961Bz23BL60BL6/Hm9sFj3UMdI+MD
o5MnJmfGpmbGp6cnp6YmpqampqenlxZX5xeWZ2cWT41PjwyPDQwODw0NDZ8Y
mZmZmp2fmZwa6+pt6+5pu3L94n/+5Q9//+mvf//pvz9++tHlq1du3711592b
d+9df/Do1rsPLn3xzXuj040iRUZ67tZM4qYC1naOfL9Ef6S6De+pS9baQzmy
7UXsTcWst/nCXTLFQbszTqcLlcr2icS7BeIdiPGc2KjMqPDUoyFg15FXB8BB
x4FxTMp3b/Yzvilo++sY4Ft/eWTLyxB+xl9Fufme134BmENuDr4djP2e1/9P
wpHtLjXDJMzW8ZJV7BQdLwty81Id3avjeDQsbOWNRdQUYycSQcetjFwnk1jC
IIIiA+OGrERFUiT4c87Rg7ywg4Lww4A2MA6kQ4iOHpZFhcijQyHEoQeEwfv4
R/YoY0PlsSHc0H3S+FD8rjfpEXuMBakyXDQj8bAFDBg11cTM5udE1GpZPW7l
ZJPj4ommD86ceHpp8t5838Wh+idrJ+4v9N8a7wBZvzXec2fiOOo2Dpk4WlcH
0mEOFv1i7zEYkXYjHUdtDVEDU5SJA+aBCCTpaAkOjHq3UQGAw4jUHC2tozV2
ABw1LoQJys2RvqMk3SdiYiXdpJx6paBWzgPMUcMjCFTpJXCjJBCgeihvRb4d
EQ2AwBOYI8zhSyixVRNSUXVWhDk6AocW1QMX0F48BYcYR6fd/A2SEv2r6DDG
QejyYR7n4mR1OQTDFYrTne6Pzw8B408vDj852/totevqqerJRk2Xm9vp4jZb
mI0mZp2O6VPSymR0r5ThlTDLpKxKObtKzqmUskrAqLPyQdNdrHysDavfpaAc
xETKMhIztfhURU6SKC1WAVYQnyHJTIJQETLAqPPTEgXpSTAC4OyUBEZiLDBe
HBdVGBclzM/nEIksfA5gzs1LlxXlGPj5kGza5AUOJcWhoTm0TKeR53XI6ipM
jfWe2uaKypbKisbysvpyX0NlY3tj92D30NjI8OjJE6fGJianp6ZnZ2YX5+ZP
Ly2unV4+Ozu7srSyfubMxsLpc+MTs4Mjp0bHJidm5vuPD58cn1hZPXPu4qWb
t289+/W3f/2vv/3uD7//6tk3S6fXZueWLl66enp5dXl15e57dx49uX/7vUu/
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
3yvOO2ZljTcaJ5uNt6dbHyz1PVg8fnOi49Jg06XBlqsj3ddOPM/HQcRR83HQ
cUAb/Pl0tQfQBtKBcUB+qqpkFJTaZQQ1R1k5pOEAOLCMol7CbpLzWtWidq2k
QyeFEU0g6UbdxtEENRkHQX8Rc3Q2Bql5hZBRKqA52YWmolwN6DI5y0DBW2hE
G4MMo5FK0BfidODMIXWlYrXaENQQKBlHOTiMyLoj04uycvQNSKwDq3CBQHSj
gjDA+8+b6ekIcy05SZefCJm4pTjNSk+10pNbjPSxGvX1ifoPz/V9tjH87PrJ
zy8PvbfQfH6wbO6YZaxWNeKTdbs4dRpyjYbcamN4pbmAeZW6yCMiOfnkUklx
mYxZIiq2cwscvEIrm2xi5FkYRBuLbKLlagqytPlZuuelKrBqVLKcRElWPAQn
JYaZFAXBxiYxRbHhlOgwSuxRTloSPSWeEh9Fjj6aFxGaGxGaFxmWGx1Bx+Ep
WVmk5OS8pNjC1GgmLl5KSVczszE9UlKcKroTckxIzEs0NeXmWp+zutLl85XU
VJc3NtX2dHeOjp6Yn18E7z05NYd5dcjEl9bml88trJxfXF0/fWZ9fnlt9dLF
9evX1jYuzZ9ZW76wfuv9B0+//vbb3//4h7/9919++gniP3/66fd//a9Pnn17
8dq1+eW5javrn3/52V/++l+/+eHHq1ff6+2fqKzqONY20nxsoLVzpLt/tKt/
qL2nv2dw8OTEiWu3zn33w+P7D9ecLgYOv4PB2CcRHS7I/1V2xv8jFG41m8LA
wNMY7wDjaeFHkkMPJwTt85dl3gWYQ2CM79z8AuNv+DF/dT/QjRj/vzE/sOkV
rJ+pf+EdSAfrfuSdX+17/X/zSdHCgihZcbyGk2EW59rlBdjtXQXdIaZoaHhJ
brIsN8VIxTuZZCfoETnTkptiyIrXpsfo02LUSRHSmGDIuLXJkfrUaGV8GEg5
48B22r6t7MO7ZOGHtTFhyqMHNREHxUd26sGxhx/UJYTR926WRh6SxQRzQvbm
73ord8cmQXSwMCYEkBckhBVF7Scd3SHMPmooStEWxpcIczpsnE47e7BMcqav
7P5i9/3F3utjxy4NNkBcHm651N9yrqseEnBQbdSCHC2+AdeztV7gHcO8wTtZ
5RzxGAec2gmfYxwYhxzcaegxq1AF9QGHHnVJQLUgWhTCVo3YX9hNCQreoBQ0
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
bADapBOnJWgImUpcin8pD6us7mTgDPlJksyjGmKsnhTVrCqoFuXCOFouPVkm
WWmz3J9pfnZp6Hd3xn98b+qLCz33Z2vvTlae7zX3u+gtelq/S97nlter6V4x
uVJBrdEwK5TFXmWRn3GssmK1VQhRZRPXWiVuIcXJIZtpeD0FM+oqSB9yU2X4
ZGAcfm0Ac0EGyHoceHVGAgh3GCUmIj8mPD8yjBwRSg4PyY8ILYwIgwDYITGH
r+ZFhRIiggnRocT4CHJyNJ+SyyLhmLnZPFKOuICgKCKYufkeRbFNQtTxsr1m
bnujqwRoZxZpdaaRsbmzG3fm167cuvfJR1/+Fsb1a/dXL94emV5p7Bz0NXeX
17eXN3TUtR9v7Bqqae1r6Og/v3Hj+9/+8b9++ukPf/7rN9/97uvvfnj65dcP
P/zk/ocfX7p5Gzz8xu1bH3/9DBj/5g+/f/Ls2eX7DzbuvX/lvfev3Xtw8/7D
uw8e3Xv4+N7DR7fv3nnv/rv3Hr334PG9e4/fu/bu5dm1meMnBnt6hifHlzYu
3bwK/v7+tcXVIVcFu7yBZvelqktCZY4DOm+YozY1I/xwcvC+2AM7AHCIqL1b
w3dtRoz7z7n9A3OIg++AaX9l7wuMBzDf9/orWLz28p5fvbTnlZeD3n4r8cB+
fGQoKyvGwM6xi0hySrKBh7eKSQ5ZgV2abxXkGdh4fXGOpiAD+3llxMszkjTZ
KdrsRMBcnR6NBF2eeFQWGyKOOsI/egBMOOvILhBlIB14R8iLwoLkMeHquChZ
9FF+yAFO0D4gXRkXLosK4oViiTyk9uDhuSG7ecG7hZEHKME7WfFH1LnxClyM
OjdWkhUmygiy01PsjKQqGaHVRO0rYc0d01wfL78zU335ZPn68crVzor5Zs90
vXu6zjNVWzpR7RmD7BsbncOlluNuTZ9T0euQ+kPebpa16CWNGmGzTgx0d5hV
LTppvVIAqg1QV/CZgHmtVNigkMAIIl4tBfnmVYq4EKDjoOwVQlYZnwGMQyAd
BxVDy8ug4IA5VhoFNJ2Kw6S8CG8qIiDMbTRshc3NzPcw8u0UgonkT7rzMXJB
qSH81V0y0ZVwNILK+/fCErWkNHSHVElMkeDinzdE89eJEqXHYfc+srEtNlkW
1vjMQs3QkRKkWeGq3Eg1IbTLwuh38sYq5ed7PddOVH+42v3ttbFfXx/97Z3x
z/8/xt4Dqsk1Xfufc2bWzOy93W57LyC9995CCQGSkATSQ0ghkFBC772DVAuI
CCiiUsQCKqggCggKSJGOIth7RaWr+e6XzPjt/znfOeu/1rVun7y+CVmQ33Nd
9/OWtB/rrc1sKY06lycqi6MVhrqWxnqWxIqKIgV5Aax0H0qGH22vPyszgLUv
Spgb6QmYp4dyU4K5iQHsWF9GtJAaxSFGMHGBrmhfZ5TIyQqyusAevNvEG2st
dLTyxFhJGQcfp5sC1Fp0c2PovkkGOs66mgRdTZK+NjDOMDWimhgA+7Adq6/p
pKeBNdImWhiSbc0cIc0aa9sbaTtbGFBsTTg4ywCmY4yX6754r0hvl+QIj4tn
y+72dVxvbak9f+FM/eWWtp76K60nq+tTsw9yBWI0jqxlaL5xl9xOedV122VW
b9z+t9/Xbdwtu0lmj4yqelhcYnf/yNyiBDB/9PRVde2F0mMnIW9XVNUmZmaX
V9f2jU58Wliel0ieffjUOTB49sq1s03tV2/1dw1N3r33aGBsundwvHdgrO/u
6JMXr999mpmZnfvweebj7Jf3czOTzx523ulub+8BjY5Ntty4NjB0e3iiDTD3
DDb3DNVh+O6miDbzQhWCUkzAylFaSoA5AA5xHawc4vp/Z1x67Ext5waE7j8x
DlLZgggSuyr4+KZ1ENcRK5eXc9TXI8K8aqnjSbQI5znz8cYBbEwQxzEpgAGY
g8UHsx38XGwDXNH+ROSzJLQx90NbIie4/htzsbWhj+WKlRtpQG4XGmuCoQO8
fF1kCQ4Y52gq8bTV+HoaPF11tqYyXUWWpizD1lTk66nBU1jqe6AmkjBxBBt3
bTmC7Aay8nZXDRk7uQ1UA3nAHD6oYrwxxUAmnGrl72yQyEPvCyIXRTKA9AsF
gR2Vyf11eR0ns2+eyLtxNPtKUTqQXrs3Dhz8TFZiZWo0MH4iKexYXFBJtG9x
pPBIlKgk2vtItLgwzAcw3xfouT9QuC/AK8cXEHbfJxYC5uDjIAA8z1eYLQJz
5yMm7u+d4+sFaKfwWVBTPdwS3CnQg6cJkbO/kgUMYBzCKiR2wPlnaAdn/3No
l35loTSoxzOI0RRcOAlZWJPy+2fMpdSvrJ4hF31LT2tZOf8cjRwBJ9r44K3A
NINckfs9AuArt3xBbvwIfbq3g4mvk0kQ0SLYxSLE1TKKgYplWtVm+V4ujGo/
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
pmgrG7yjNc6eyCZHpkfEZof6xbHcgu2oYiOqvy432sQnFb1ym9btfz4T5t/X
nf1fH4e4LpU0qMtvXi0F/F/t+aY/FDeuht7cREkOGCdbW5BRVq5WloA5yx4t
JBDc7GwEeIwP2TEj1JNPNA90t/dn2wawbMJ4jqEsjAhvzrUx9rAx87Sy5Jqa
uBvoAOkepvpcIx26jip03ESVPSBowLGKuyCi28tuBbqtd2+y3bUJqsWOjZY7
N6F2bwHY7RV2OanI4NXlCJDt9ZRddBHeaUbqNCNVhok6wC5yMGMYqUGMx6nt
AEGGZ5ooUw3kfZ1M2OZqDGMFqsEeYFyMM2FbKIscYH8tH6xmOM04lm2Z5oU5
FEmtSOWfyfW/VhY/dPFQ//kD10pT6vZFlcYKMyF/iiiZQuqBIC4E7CQuCQJ2
mic1kesKQRqZyrAW0oY3zJ0YSMetfCkA2pNg7UOxixNRKnKjexoqnvY2fRjv
/P50SPJ5evlJ/7fH/ZJng5JXw5Lnd79Ndc9PdMze6/g6eXvp6aBk4eWPl6OS
xVeSDw8kiy8ln6Yks08k7+9/ezkimZmWLL+UvL838/DO1yf9QOvnyTuj1889
7mm6df5YTphnXoSwIE4MswpUGIMq8xP6L1cNXKl+O9b59engl2eDC6/HJHPP
Zp8NfZjskcw8WobB6I2lJz2LDzuay1NayhMHLx141FH2uPPo7L0Lz7srJm8c
6TqTUZvnd/FQaGkCJz+YnBdI3h9COxDqli2mZIhcD4Zy9gWxI1j2MVw8AJ7m
y8wK5GSI3eOgDXHDh7FwUsCFRBsvgrW7vSnP0UKAQ7nbGrsYIhEdOnFXAw0X
fXXI6nhNFay60k/AgW7zndvMdmwFme7cigJDX3FzaM/x2urQm7vq61AM9agm
BlRTQ5qZESR2GsqUamNGWREPb+9BsBPRbAP5mAixU2QwMSyIHBjA8g/0jU5I
S88tS80/HpdbFpN/JK7gSOrh4pi9WbHpaVFJKUHRUR7eQmcy0drexgxl6oC1
s7Q21tFXUVbdray6U0dP0Qql6+BkTmE4Cf3dQ2N8Y1NC0rLjUrNi49IiY1Mj
cg5l7y85UHC0sODoocLywyWV5aVVx4+cKiupPFpSVXbkZMnhY0VFpYWHig/k
7c9Kz0iKiQ2PjAoJDhFTGS4cPovOphLIeJ6I5y7ku7ix6HwPPI3qwmaEJkQk
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
Lc8GLt3vPH3vVnXv5dKOusKyTHFRiig7jL03zE1IMhG6molczERk8wCGTYQH
NtaLFC0gBNOQO8oGutr6k6z9CNa+ziipvBwskCuYVm7LzLE0cDPT5VoZetmZ
EVQUXTXUqdpaZE0NnIqSk5ICXlWZpKmOV1PBqig5qCg6qirhNFSl944g6Wtj
tVVIxjouJrrORlpkCyMO1k5AdOTi7cHKuQSMiIYXc8iBfEqggBrgQfHzIEdH
iA4cTBMH8O0dUZZoS11zMzNHJ4rQl8AVuXoGMP0i3QNjucHx3jEZSfuPFlVd
utQxePHm0LXue0D6ncm3HaMvr/U9vtr9qKHzwcnG/oOnWrLLGlKKzsfkV4Vn
VUTtLU/aW56ceTQxsywusxSQj8sqS91fkVNcc7jy4rGzV6rqm6E3r6prOH2h
4Ux9Q825+pqz507Xnq0+c7b2/Llzly5cvHq5sekquHnjlYa2thvt11s6W1u6
Wq93XW9pPH06PT42Jzez6kw1GHp+UXFU8l4snYvCUy1wrrp2DqoWZkpmuni+
qzDO679gLsX5f8EcKoR8A8XdaEMtYBxEtDAhWyOJnWZrg5zgCr05GiMlHTzd
y4Xs6erqjsWIWSTozbMiBU2VuaFcNGDuQzGFeT6c7ejpaMZDmwowVnQTfTcD
bYq6MnbPLsBcKoBdCriUcSngPzG33bQe2nB7qXevyHE9IiAdtfp3EOyA2bYZ
SEeeu2Wd5c4NaJVdDuqy1grbbBS343QUCfoqjppyTlry9pp7XEw1zeW36O1c
Y6WCwI7RkdfftcZeR8bd0VDgbOJirpAdzjqZE3ihOLq1KnO8pfRxR8X9lpLx
K8UDdftvVWXeqskYuJjX35A7fLXgQXvZy77qj6N1M+MXQIsPm74/vQ6an7oy
d78B6tKj5qUn174+aPw6fXnhUdPi42YQDJAdHlyG//3++Bpo+WHTwoPLs/cu
fRmtnxmt+zBSD/x+Gmt4PXh+fuoaMP554jLwvvToBkL6FML4HJg7YD7dAhPL
/OOm5Vet399AgG9dfHEdYAfNP78x8/Dq7PO2hVcdwPvHh80zT1uB9LmXXYuv
hwDzb4D5xwcI5p/ur2A+Cg373Ju7c6/6F14NzD3r/XC/7elA41R33XRP/fit
0/1Nxydun+2sP3ynqfzqqZyaooR9sYKMMHas0CWADeaOhurPsPd2QYUxkTvN
BrggF9t64yx98FYAu5how7M2dDPXoRmpk/VVIHHh1eWwKjJY5T0u6moEFWWs
gry9nCx6z//h6yyg2tr2rX/e+96959Rwdw0SgwRCiEAIREkCSZDg7tpC3d31
tNSoC+7ulKKFUqy0FC0UakApLfVz+/1D7j3fGfeN+40xxxorKU1o4bfnnGuv
vQNWbgyYu2NQbmgkF2kOmINkmIttrMUEHANl6m5v7UG15RLQbBu0yJHox3YC
Hwf5CxjBIlaUn1tyuGRDrH9qtH98uHdVRXZTc0Xi2kgqnezEZZjb4PTRGFMb
O5qbF8c3RBKZ5BefGhCXGrNx18FzV28X1xQ3dmaW37td3JBd2VJQ25VXB3pY
2NCXX9dzvajl99uVx9JL9qXlbj1+a9OR6zuO395z5MaWHec37UjbceDK9v3p
63el7Tp648y14rRbpVezq2/n1d7Or7xbUJlVXJFdVJFdUJJfXFZQWApjUVl5
KST1+vrq+oaahvryyor6xoba6pqHHe0d9++3NzR2Nd2//PvpnTu2ZGbfgY5+
8ty5TbsPuLh52tK5ZK4Q7ehkYmerb4N0krC9EyR/ci0T8C5r6yaqcqZq8jK0
YWKotApGtJ46QlWOaGbAtMWwCFhXoo1s2xsYupcTDQAP4nKCXbkhbNdQDi+C
5xbpLor28AoTCmO9xWFCVmqI+NzepObC83uTPJL9HMDNNwaxAPMYviO4eSiD
6k8lBhCsvTGWbggjrqEux0AHLBgMHbxYRvpfGacoy0Mxly6yqfyzjLsoKjgr
yLvIyTmvWQNzJ3k5wNxBUQ5Id9XXgdAOxR9+f3hWpnxrhABnBoAL8OZ0Mx28
tryTha6bHdKXLr1HJVg52VQDSOfgERIGgWSm5s8lbI0UgjFtDudknFlfe2d/
xdWdLXlHeyvSpCo9C+ou+r0j91hv6Zn+ijNPatLGAPPOuwsDBV9Hy/8xWQP6
Pl75ebh0aaj409PiT89KYPLxadGX8YqlsbKlkdJPo2VfJyp/TNX8nKr9+aLu
j+fVS0+KFgfyvzwr/WO86ttI+dehks9DZYuPS8DTF/qLgPf3A3AAKf00VAFe
/2Gw9PNo9Y/xOrD+72O1f0w1/nzRBCMcNz5NVPx82/Rlsgom3142LIyWfZio
XByv+DhZC7wvTdUB8vNQH6bvQYb//LLn++zQ0kzv57ePf357AaQvTD8CT//H
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
GiFwiOI7xLjRY92do3m0UCYplkePZDuE0cmBVIIfEedtg4Ho5Y62kHZwlCUI
uOYiLdiW5kxzhIu5KQtpzoHfEys0D4/l21gJbK2FkC0pBB7R2tUe6iTe09ne
m2EPmPtyqYFCp8RgcbS/IDnSd0NiSHSwZ1JkQMbVc6NDPV+/fSwozb9291p2
YW5kUjzR2dHCxkrDyFDLxBhLJjOFYpbIg8xkO3BcXURimkAgCgwMS0pI2blz
w55dqbu2bd63a++JI0fTzhw+e2r7wQPJm7ZEJ6dEJ61P2rBtx56jR06cP3Tk
/N79ZzZvO5q0fn/cuv1rNx/bceDyoVN3zl0vBTfPKGzIKKqD0H63oDwjvzQj
t/DmnezMrPwbNzPOnk+/cvNuaVVt7b3mkqqqqoaGytq6+oZ7Dx486Ovp7et+
1NUqTe/l+TmHd+84f+bkxQtpe/btRaBQWiamUD100ZaKJnpaViYWNIwJBfG/
O7ispMtOnMlyO0g2Qeqo0rDmENf5JBuevdTNPekOPi7g407g40C6L53u7+IC
bg5WHuEqAE8HNw8WCADzSA9ukr/g5qlt5TcPy7p5pJAQ7U5M8KAlCJ3j3RmA
uQiP8cJj4YfLNTF0MZQy7mygQ9fRdNBWd9bVctTRcNRUo2pJGYdnYA7IOy6f
Lpd5ulQK8rKs7rhmNXXNKumOuDUr7eRWEhWl++XsVOTsdVQcTbQZloYslDHA
zrZCAOZ0SwOqmY4z2sgFY+xgrkswUnew1Peg2UZ7cFJCxKlh4lgfTpCAdHZP
fF3umao7R4bbM4ea7zy5f7O/9lJ3+dmukrPdZWl9FRcHqi4PNVwFxp+33X35
MHu2r0AWqqFcfx+tkkbugcKFvlwwZUjgP0bKfkBiH5IGeMBcZuUgwBwcHOI6
CL4STHyhJ3u+O/Pdw0yYvGq7Pd12a6bl5lTLjZett1523JntzATYYYQX/zYk
Bfz7M+nb/RiuhHeEl4Ve8PNN09fJqs+Q3l81fIYK8KJuabwSSP+8vPT3bebe
z7et/3jT9mW65Y/ZPnDnH3PSrfWLM92fZvt/fh3//vHZ18WnH+f6P88NAPjv
pjqXZh7B0WB2tBXobiy92lRytaHkSkPh5dbq2x3VGVW5Fx/UZFbnpWdeOHRm
f+r+9RGb4/3XR3itCxUnBwhSAvmpQYLUAL70gzL9BKm+/BRv13A2NdSFFORg
50fC+9pZA+Ze1kghxhJM3BWL4mKQbJQFoM2wkDLuZG7CtUazsEhnpJmThSnI
GWPBxWF4djiWDZpli+STrcXOBGDcg2XnzSX5u9Oi/PjRQe5JUb7x4T7r48Ny
bqePP+2ZmhgaHn16/c6N9Vs3Hv/9ZHVj/aVb190kntoII7B1fQtznAOFLuCR
mC4EBp3iyoaRxKIxRK5u/p5u/mKeRODmI/AJk4THh6RuW7tt3+bdB3Zu27E5
eV1SQlLitm3bjh47kZK6Ye26DXGJKTEJGxJSd2zZc/zouRvnrxdcyarILG0s
qWsrqW8urKrPLa/IKCi6nZ19/fadK1evn/n93NGTpy6kXyksL21sbb7Xdr+q
oa7mXt399uaHjx50d3e1tTbdb6htqavpaW0+vm/nzo2pu7dtXp+6jkiyN8eg
9CxMdZAIZRMtbStDCxoK4fDvmP+52iabyJxdZuuylTdo5Vw7a8Ac5E4metKo
EmcaKJjNBh+XuXkY0A3FnOcGbg6YB/J40M0B8zgJN+v83sL0vcn+Tkm+1Ah3
2yg3uxh3SjibJP0pM6gSexsxDs1HmTGN9Z0MtOn62jDSdDUp2mrAOIxkDRWS
pgpFUxXmMMJDiO40FUUnVSX6spyVFWXO7iC3miy3yn71CsLKX21X/2ansIqk
Km+voYhXk7PRVLDVUiRoKxEN1MjGmgQ9FbT6aryuEpDuhDYiQ1XXV7E31RI5
4GM8uXE+rutCRWkHNhzbHn3x8Lr6/LMN+WeeNN/uLD/fU3sZDH2sLWMUkK+/
1ld1+VH5eZg8a7o+3pox/TDnbX/RwtPyj8+qoDt/Ga6SLaMBjJDVwdOXu3YJ
GO6HodKl4fKv49X/mKwDydbcwJ3f9xd86CtYeJQLCL/puCvTdMu1F81Xp+6l
Tzalv2i6MtN6/U37rbedd1633Xz3KOvTQAFY/5dBaQaAUXo8WS4FP2fuyVb2
/jHT+Hm85vtUg3S1f7x6aaz242jNt6l7P1+3/XjVIt2gO9e7NN35D+lVq08X
Z7q+zPf//DHxY2no/Zvu15Ot8y87P7559Ha85dVI09x4C2A+OdjY11bSXHG7
JPNs3vXjVfmXWioz6ktuNJXdbq7MrC+6kXH56KGtcUlhnjF+gtgAfmIAlHTX
GC9WjJgR6U4P4zmEch3COQ5RrrQwFiV4ecMzkC6xs4IDvsgaBbFcYIPn4ay5
Vlg2Bs1AI11Qls5ICyYGRUdb0pDmjpZmIBrawhmDdLayZOJRTFskj4L1cLGT
sMkSV7K/m2OIl0uQ2Dk+zGPz2vCUuODdW5Ibq4pmp8fHhgebW+/nFxet37wp
ICT4yo3rHY8eZuRlJW5cR3SiKOpoaCGMyCxnAoOGptjZujjaMR2d3ZksTzbf
h+/mx3f347r7s72CeH5hgsAwt4S1wVu2x2/YGBMVIZF4ccVuTJEb013Echez
Rd7uPsE+4Qmx63fuOnjm7JkrNy5l5twqKs2tqMqtrMytKMmvKgLlVeQXFOXe
vHX1wqVzV26mZ+SCyedX36tq7b7f0dPe2F5XWl2YmXP9ytW09PQz2RlXa8vy
hjrbj27fsjkx/sCObVs2pLBYDBt7WxO0uY6FgZKRujZaF/6P0C6Wf8VcFstl
krVy2c4ZY5U18FB2Eg1MHAB3oxDcqXYejhRvuiNYua/0E+E5QSwWMB7IZIay
XcHKAfMInlu4u8iPw4n2FALmsd6c0psniq/uXx/CjPcmAebg5lECUpCzbZAz
UboE52jvZoV0tTR1Mdaj6WvJ5KArBRwEgC/fQUIZJmQtVak0VKhqitC7pZir
KTurKctId1JRBH+nKsqR5FYB47ZyKwiKq4jLmDPMDVwsDOhmeiDwcS7OHEzc
3lhDmtUR2kQTTTtjDRgdkQaudiixk60/j7oh0uvCoU2QRauyzrSWp493F7dX
XATSuyrPt+SfaC863Vd16WnD9aHGm8/u3RpsuP703g0Af7Ij+2V3wax0laz8
w1DlQn/J+4HipSdl4LYQrcGvgcd3vTkfn5YsPi0BzL+MQSWvAX1dXoqHA8LH
wWLAHBh/3X4HjPvF/esTDelSwBsvT9RfBD1vuASkv2y5DozPdd792JcHaAPp
S/35shFCPhxSFgcLvk3UyBb8YfIB8vxELWAOvAPm76HCj9X+MdP8beb++7G6
n/N9P6Tb3aUXsi296f660P/HJ+klNnMzD149b3n3qmtpvm/+Rcfr0fvzE61v
x9uGe6qfdFVOPW1+OdL+sCm/4PapG2n70k/v/P3gxksndtxMO3Dn4uHrZw+k
Hdl2dOfa/RtjN0ZJ1oUIAXaw9bWBbuv8Bev83dYHCJM8OJDoIti0EGcyeLqv
PU6a66wxbngrLs6KbYUBroHuP7kmmRqRzU0cUebOVigmHuuCwzhhLKkoU7q1
hTPOnGOPEtFtPdlEHx4lUOwU5sdOCBfHhLqnxgcd3L3++sWTDZXF3R0tHS1N
9+43lVRU3s7M2rl3D8uV6xcUeDrtTG5xvptErKijpqKvSeUC5g4mtmi0AwHv
QrJjkShce6bYSRTk6hvp7hfB8wll+QYzvf3oAUGsiAh+bLQ4LlIU4svm0HF4
jLYVVgttrYXB61sTEUQansZ1Yov5fB9PUYi/b0x4WHJM9Pr4lJ0p+0/vPXfz
9LXsSzfvXki7cPTchePX7pyHQ2Ta1ZOgG9kXC6syb+ZcOnFu/4btcVGxPmGR
nimp4Yf3blwfGULDoLw57GNQIuJjUUgzRWW5lYor9ZGGmmYaxjZGNmwsgW8t
w1yGNmAu05+w//k8wG5vacyRfiQNAVo5jCJHey8nB/BxYNyP6QyMg4KZrCAG
M4jBDmFxoZtH8t3D3IQ+LFak2C1cxI4UM6oyfgc3/yvm0W7kUCYxlEmG0A6Y
C7AotgXCyUifqqctE1lH015LnaStQdRUI6ir2GmowkR2UyAp72oKQDp4ugx2
qZYZB97B5aUL8qoK8DUkdUWyhpK9trK9nqq9obpMFBMtJwt9SOlEI3WSiaat
vgpWW8FaV4mE0GZYI7hEFJ+MhV/LzfF++1LDLxxOzbq4p7n00mRv2VB79uOm
m22lZ+uyDoFaC052V5wHxl905g0333nWcnesLXOiI/vFw/zXfcXzj8vfD1XM
9RfP9RdKSR8qlXVnMPQPjwukRA+VfnxWBqSD28II/r4wUACMg9715kEsh6AO
mmq6Nlx9frzuwljt+dGaNBBMZKTPNF+b78oAzD8/LgS6YSK19YGCxb5ciATz
gD/Eg4EC6cm4sZrFp2WfR6s/jlR/fS49Bwff2/tn1d+m7n9/0bw4Wv/tdefP
hf5vs48+vHrwdb7nx4eBzwv9oHdvuhbePvz0ru/D7KO5qfaFmc75yfbR3qqZ
4bax/nugpw9rmqsyqvLTawquVeVdaa/NhUn+zbM5107nXj9z49zBIzvWrY/x
Wx8tiffnyXp6jIQNth7rwYr3YMeJOTECaXELdLL3JRO87HDSXIdBsjCWMtem
mpuSEcb2CCOZ7EwMCCYG9mbGVKQZ3QrlhEM7YZEOaISTlTnd2oxNRAqdbLw4
9n4Caqg3IyZEsDk5KMyfGxfmlXXr/OvJZwtvpwd7H7bdb7p/vyU3r+DmrTsg
Ls/VDGnp6ELbvm8739tNSVdVG6Hn7M6yZZBNbJEoKh7tiEfYmSJJpgQXNNOD
LAx0EQfSPP2pkgBqYBDN348a4EMJC3RKihasjXQPElOZjqY2eBWMjQISp2iB
U7XAa1vYGiKJZkh7FIJggXGwtmMQqK4kVwkzMN5z7c7IbYeSt+1O2LI9dtuu
pJ0H123dk7x2S0TC5rCUnVHbDyat2xYemejtG8p196CyXG3YXBsRnwRIWulo
+/N4Zw8fTImJsidYmyIMdAy1dBDa2hYaKKolVUhw8CTKmvhfGZcJuAYHh6wO
Vg7HAayBpgPWXECVMg5uDq1c5EgGKwfMZW7uy3ABHwfSYfR3Zga4sKTFnO8e
6S72ZbIihYJQASNEQKu6fTo7bXuSHy1BQgbMI92JMWKHSB410pUWzqH5ONjx
sEiWuans5j//hjmMwDiIrCl9SNHSlE5UFMkq8sCyDPb/t3NmeTWepq1K11Wn
62s6GUjlaKgJQV0azpEGIKjkLKwpG2cGgofg4BDaGXgzoNuHQ4nwZMcHCiMk
bIiaN87uvXR0062zOxsK0jLO72grT6+8fbip4HR//bWRtsyn924+qrzYV5M+
0nJ3qitvojN3sjMXJjOPCt/0l7wbrFh8Vrn4tAIom32U97Y7V7Zc9mOs8h+T
NQCglPGhUvB0qbMPFgGV0LUh2wOhbx9mvWy7AYxDLIc+PlJ9Tgp49dmRqt9B
MBmrTZtsuDh17zKQPvvgDvR34B202JMDsP8nzGFcGq358aLp22QjYP7uaeWX
5/cA8w9jDYvP7/8x37s00zE/cf+PxYGfS08+z/d+ez/w7lUnMA7m/vZ56/Rw
I2D+cvh+S9WN+uL0popbjSU3i+6eLc4411GX96C+ELjOunLyZtqhSyf2nD2y
49zRnRdP7r3y+8Gr5w6cPbRp38bIjVHea5c9PcLDJdCVGsgmB7MdAhhkPweC
lz3ew9ZKiEPLzowvY25OtwTMjQFzmUhmxg5IMyLCCG+gY62vDbyTkAgafKW1
JYuAYduh+VQrsHJ/NwdgPDbUbV2cT0SQ28mjO1ubKj4tvv7588vUxHB/T+eb
19PDI2P329p37tpz9sLFjKzMa7duunm4M/lMEo2ySnWNnoWxi5Bt40QytUVi
qAQzOxSajMKQLWydkE4CG1cvokBC8A6kBEfSA0IoAUEkHx9bbw98gIQYHugQ
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
O63fztu4kxeVRAmJJftHk3wiiV5hdt7hxKgkZlKSa2yQY7LEYS3PPtYeGWii
6aOm4KusGKCsJFJXdDTVcCYguAQ03waLXL3SfOVviDUrMLqqOpp/10b8HcXU
pIaZU+KN/hPmYOUmyquNFFeCoVNRplx7HJ9iCyP4uOwqFektmv95dTkDBG4u
NXQWE56RkR7kyg0T8GME4hiee6JImCjmxYlZt45tuZ93blsUL96HHCmyA8x9
2ThfFkHCsBM54AV2WMCcizZjWhhLMTfUBlF0tZb7uDpIZuhENZhoLJOujleQ
s1GUB9kqKdj8S3hFeejvkPydTQwdDHUdjfTYSDN3PNbNBs2xRbnYmLng4Phv
Dv85HFtLZyzCwVLfEWlEsdQjWeg74k3FHGpchOfmlIit6yMSwj3PHNhUePts
Rc7l2oKrLZV3OirvNhZcLrhysOLO8c6Ka2MPil48Kh1tz3vWkjn+IAdaObj5
q94iIH2mO3eqM+t1b8GH4arZvoI3PXmvu7JBADsEaUAPtPSkTKYPj0sA8zdd
mbLVttcAeMetN+03X7VelzLecHGi7vxE3TnA/FnJkSeFB0GPCw+AwNnB0F/c
uzjVeGG+6+4r6dr7zQ+9OZABIOoD5lD24e1eQ54fKHr/pFQG+7snZaAPz2q+
TkgvePk4WgfIL4xIr2Rfmm6W3a0CBFX925ueL6+6Fyc75sdaPk53f599/PlV
Pwgwnx66P9xV1llzuzonrSLjfGXO5fLMy4W3LuVeS7t69ii4+ZnDu07s33Z4
78Y925I3rY9MSQjYnhq2JTEQGnpiiDDGhxfuwYr24CT4CCSOxFAO3c+R7IqR
nh/nY1AscwTNyMDBSA/oBsYdTA0czAwdzY0YGHOeLdZKR9UZa86wtnREmgDd
XDsrkaO9P4fuw3QU04mhIudNCX4pcV7hQZy9uxLKyjNn56aXPn/8/OXb29n5
F9MvZ+fffv3+6cfP7z9+/lFzr0Ek8XJwoZ+7fLG8trq+uWnPoQNAt4qWhqa+
rjkGJcNcVVtTSUPNHG1hZGagZ6qKwKiRXAz5EozQ39rV2wIYFwfixYE2ogCc
MADr7m8JmIM8w6wE/hbu/ijAnOeNMsevMLdaYYz8H7KzTnC004btHoC5V4C1
0McyKIqQuoPnHUX0iaEA4B7++OBQckocKzWIHsvGSizUQ8y0www0AlTkJCv/
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
kPPjRTvo0/Nm+BctjjRPPCgGxj+Mt70faXs90DD+sGq4o2ysq3Kyp/bb9MBM
b+P4g4qxjvLu2rv3iy43l15pLruae+VQ9pUjmVeO3r5wCAz93OHtx/ZsPrhj
44HdW48f2Xvq+IEj+3fu2bp+S0pcalx4ckSQD88lVMzzYlDtzSFx6bgSrT2d
iDwiloYyBbptIdEZ6zggTdi2GDcHgsjJnkXA8MjWQULmhuiATfHBsYGicAkv
Okiwe3v4ls1+iUlupP/L1ltAtZWve/+cmWmnpbi7u0MIkISEBBIsCQkECCQE
d3d3d3d3p9AipUjxtkBboO7ezpmO2zn3nHvv6fuE3DP/d933v9az9uwys2g6
5bM/3+/+bcHJUxnGUYn0gbGq/ZOVvcP1k4fHz56/fPb89du373/66ae//+33
337/6fLSImAek5SQlJEGOxDamzra8PZEMRkpESkJwNzI3Ay6uaq2JshdUV1Z
WVNeTlVURUdEy0QIMKd66wPj3iHAuKVXEAow9/TH8DB39zP38LdgBmFobKRv
uB0rBGvvqs0KQcelU5n+SHuahoAEn6oOn5rOF/qmwqnZrNAo8rkLfFYoWX+m
VaiLBV7+nIP4GYasoJPwV0x1qQisCcNYmaQl4YczDrQycJAUoIhecJORoGko
Oamr2MnLWokIGfKf0xO6YCgvq6+tIaWmIm1qZOXrh4uNNwuLA7TB3YA2D3Ow
OUJNnvsi49OrW7m3pGEt/m/M/yzm/wtzntb/Z7n8tJ5zGzrNJYruEepEjXVz
TfJyLYjg1KWHdpfGbs80XhkurUxlA+Yu1lpEUxV7hCYVZQSM25lqE0y0wOaw
A1sbQ3W0ljLkdnNlOcDcQEJEX1wYJA6AG0qK60qI6kiIa4uLaYmJwmiKiwLg
utKSwDWMkbKCiaqSvqKcnoKsiZoySl8HZ2KI1tMDrVNwWG8XSgDTw4/l6efD
5KIdHhgYxPHhMFlsDw58xY8V5M8O9mdmJYR11RVcmeq6vXXp1d2t9492v3+2
/89vH/z25vD3twfww//p4frHk6W/3lv+7uFVmJ8fX/vx4dr397mkg8qfb49B
Yofc/ub6BJD+klvPB2ELTv/mgHvW/d3uyPvrw2BzmHd7A6+3e1+udz5f5Sb2
VxsdkMD/xPxouvRgLO9ovOBksuDedBEM2BxyOxTzk6lins3B/i/XWmFOYe+G
bv52swdI52H+cQ+0PgzhAaL7p8Ppjze4x5yP+1M82L+7Mwc2h+ABmP/4cOW3
Zxsfjudh/np35dt7qz8/3/3m3uqrg8X3RyvQx//+4QRyO+z8+uLWk935u+uT
jyDnrI7szfccrg7e3516erhwvDW9Nts93l3dUZPXWJrZUJbbVFlUkJ1aXJBd
UphVmJeen5WSl56YER8BTk8I9uHQHQFenKGmk4Ux99J0tCneQN1aVw0At9JU
AsB9nGz9qfZ0G0u8sbatqa4zypRNJcYHeqdFBiaG+CSGcFKiOQkx7uERTgEh
tmRXw5wiTnN32vr1sa39y3fuX7//5O69+w/3D+7cvn30/Pnz9+/evHr1Ymxq
MiUrwyfQPzM/F2CHiU9NhpTOszl0czMrC1NLJKj89PIYOXlVaSlFQQUNATUD
fid3A4qXHjMIwQ5DnWKO8QrEAubuvigg3d0P6Rlg6RWMd/NF+4aTbCnaIvJ8
+hYCoXHEyCTH6BRniO4a+l98LcQnpcBnZiWlqX9eRJrPDCfDZFsFe1gRFL8m
fM3HFD3PFPg6UFY8TEslFmngb6TJ1lVzk5ciC11gSUi5iYg6SIjaSAihBM6b
nvnK+OuvTcRETJQUdDU1RBWUZJFW+Ig42+Q847B03i0qMLzcDrxb62tAGedl
dRrOkrea5knCAeaw/V8r5n9e48rb8gAPcaXzJtSVDt0cME/09MjwZZbEBNRn
hLUXRq6NVS8NldRm+kE3p2G1UVqS5qriGG0FcDe3mxuqY/RU/hw4mMPfMlJF
3lhOUkdcSFPkgq6osL64qJ6YiKaIoJa4sKa4sIaYEG+4+5IimlKiRspyxmoK
CC0VC1112BprKFnoaxIQJoC5tYEBydKCbk/0dnVhutM83GmeTFcu4BxPYJyH
eWCAT2RYYHx0UFVB2mRv/e7y+P2by4D5y5Nrb082fnh+85dX+z8+3/3x6faP
T7egmH96sAI19reXW78+3fzu3tWPdxbeHV56c2P62dbok43hp5sjwPjzrWEo
5k/Wep+u9wHpYPOP+xNvd4bB47yBYg5CB8whtAPmL/6tcgjtvFNw/y/mIHQo
5kA6V/TzVbzVN96JuzcbnSD0F6vtbza6P+z0f9wdeLfNHSAdtA6M897J/mpz
iAc7zIeD6QdrvR/uzL7Ym4AjFWwhk7zav/TTk60XN+aeX599ub8ANgfA/+vT
w//4eBfq+d316b2LvXtzPYdLQ9cXuA93BcwPVgbWZlq3LvdsLw5uXB6cH+sY
6ahpqymuL8svK84pLsotys/Kz0kvzEkrzknLTYkFoQOqfm7OFAwCxtPOmoFH
kUx1rDTkAXOQuD3CAMD3pZJ8yHaQMHGGWq62GG9nuxBPWkIgOy0yODMmJCs2
PCMuyJuJY7ExnAAcJwhbVBFUWBlyeH/x2bvDN988+fjd+1fv3t+99+jk5N7T
p0+fPX18fHxneHysqKIMMIeGDtuIuJjw2GiI6OBx3rq5OdoKMFdQUznN8NDW
5WRVhJS0hE4x1wObewWbcyIwXkFW/3+Yozz8cXQ2xi/CAeug8YUgn6IOn2+Y
dWAU3j/COiGT6uFjhrQWV9Lg++IcH78In5aZENpVk8JBBHpbUXVFHc/x+V74
Ovjs15ECguwvvgqXkfWRkHQXEqKdv8A4JxAsLud5QdhRSAAneM7y7BeIL/+C
FOBHy8tCXtVS1RSQVZZBYm2i0m1Tq4zDS/R4N5tLCPLSO6jc1lQP/k+Czf9c
LgfYuXHd3oZ7FRwB62GLYxLx3va2f2IOA0SHubn+OfDLEDotjEaLcnWLdWXk
BPgWhvlXJQTXpQQ3ZQYv9BVvTtW3FYXH+xApaA0jeX5dqXMobXkHpC4ZZWhv
oUswVscaqmD1lQF8ELqNgSZGSxVyu76UqI64iJ4kt5LrSUqAxzXERCCW/3uE
YFTFBGEMVeT0lWRM1BWRehrmupoG6krGWqpoY32qDc4Jg3bEYiCu05ztyY52
JKKNrR3WmUxydaN4eTNY3u5eXnRvT5qvNyPE1zM60LMqLwGUtH5p4Gj70snu
/IPr82+O1z493v7rw82fnu1Adf2Ptwc/PrkGpENJ/+PFDoT2twdzb/ZnweZv
b8682pt8uTvx5NrA043B5xsDvAHSgffHq13cns4FfPD1dv+LjZ6na+0Q2h9f
aX601PSI28prjmbKTmYrHi3WPZyvAaHfHss/Gs87nuBuD0aybgym7/WnwjyY
K320wF09h3m8WAeN/tV6+4ed3qfLUPCbX6yC3zvA7G+3et9s9r3e6IUU8WCp
7c5s48OrXRAt3kKz2Bt7uTN6f7Xn+wdLjzeHf3q0+mZ/5o8XW092J358vHn7
St/T6xe/fbD+w+Od93fXnh8sPLlx6enNhW/g0Le//Hhn7nh1fP/KwP3tyacH
l062xrcud+0s9O0sDKzMdM/0NfY2ljaX5dYUZbY1VTbUlkFih/ReXpRTVZxb
mJWUFhsWyvYI8aJDPWfa44BxGhbBw5xsaUK1QsDYIwxtjXWcrEw4FFIsxzPa
1yMxmJ0S7g+THhWUEReaHhuSEMWh0iyZPtbBkfYhMfbRyVRPX9TJ46v/+vzD
3//5078+//d//+vzz7/88f33P/7ww3dv3704Oj7s7u8bmZrKzM+HxG6ORjM5
bCDdwMwE9A2YQ1ZHoCx5NpdRUlDX1dTUV+WdgtMyFqF4mrqyjDmhqKBoG1aQ
BSvIihWI4a2p/Yk5M8iGRDdiBth4+FmjSYp0tqlfGM7YStDQ4oIb2yQq0Sk9
z5PiZqSue4Zgr0VlmjuxTZ28DP19UJ7W6hQZfg+hc6yvzgR+eT5eWCpaUJLD
dy5EQCxMRMr3vFCgoJjbufM0CRE7sQsY/jMW57/CSIrZqKshNbmX3V+QUZEy
w+HCMuxSqhGRFRqS3JceasuIKgp9DbxjjbSd0AiShTGvlQPm3LPrRJwXyYY3
3vbcYdsTfBxsOY7/fjA7mRrp6h5BZwDXwRRKgJNDoLNjqAsl0pUaRaOURYWX
R4WURQZ25iZ25cf1FsWvDVQfXu6uzwyK8iTQcXqAuYmyMAmpZWum7mipbWem
htGRM1UWNZQTMJQXNlORstRQtNRQMlGU1pMW15EU1ZeWMpSV455hk5JSl5RU
EhNTFhVRkxBXERNWFLqgIHhOSZhfVULIXFvVRFNVX0UBaahnYaRvoK2BMNLH
Is1cHAgsD1cvBo1OcaKQHVxozm4MFxgnRyIgj7EyxaJMiFikE94yIsCzICWs
JCNipKNiZqBha2HoJfTQ4/UfXu6/OVl5cXvp5a2Fjw9Wf3mx+/vrG78824GS
Dun91xeboHWIu2BDmGcA1LU+wOfp1tAbbnoff7E9/HRj4NlW/8vdoRc7wD4g
3/14tQPmyVrnE9hZaX243Pzoagvwfn+h9g54fLL4cKL49mTxzZE80Pet0bzD
0ew7Y7k3+lN2exLvjGUfDKU/nS9/u9r4/ErN48tVz5brX662PFtufL/V8XK1
6dnpejqvrfMW7O7M1b7ZHb672Ha00PrD3cWXe2MHs43vDqZf3hj/4eGVVze5
H/uX5xs/P7v26mAGWsnmdMNPz7a/ubfy7uTqh3urT27Mvjm68mx//uPJNejm
H47XX99ZeXx9DnL79uWO1anGlcmm+eG6i33VlwYalsc7Lg+3dVbn5SeHt9cW
t1QX1VcUVBZlleSmFmUnF2WnlmSnAOnJkQFRPh7gaxeMOdFMx1pH0UJZmoww
dTYzczI1doa/OJS5OwHj5cB9TRLd1tKHTowK8EiLC8xKCs1ICE6ND0yI97Wj
mjl7WbIjSEFxTmRPo+KqiF//ePqvzz99/q9//Nff//uXH//+x6//+OG777/9
9P6//vXz3/75fW1jw8DoRGffYHltbWxSalwKZItkAzMzSXn5C6KiKloaJhbm
kNu1DPQAcx0jPSlFSRUdeXG5c7qmsi4eFm5e5qwAy+BorG+oJSsQwQkB2C2o
XoYu3sbuARZuALs/2tnTBDo7OxTn6mPuG2EDmKMIMqKyfNLKfJZY2YAwu8w8
P082xtxK0S/Qzg8AdzN0pxt6UIwdLZSsZM4ThM9xpGWjROXizkrE/UUo7i8C
MWf5Q/jPcwTPuot8TZESIIjxI/m/NBc+T9BQcbIwQ5uYKimrC8qpyZpi8UGp
Zn7J6OgyDWlhLVlR2KpJChopyxDM9MnWSOdTxnmtnHt2/RRzb3u8FwnnRyFx
yAQfRwLbAc+2t/NxIPo7OgY6UcJcXMO4j4+gBjuTg5wcg8kOEXRKjDs93cer
Kj6iPimmISWyryB1oDh1tCLjanfl/sWujvzoNH8XL3szpJooUlOSijVywRm7
4k0oKB2CkbKFuoSxgpC+rKChvKiJopShnISxkrSJkpyejJSaiIiioKC6uISO
nJy6tKyiuIQCfEVMBGBXEuGqXEtaDFSO1FEDj5toq1kYGaDMTVFIc2srpKWZ
kYOtNYNO9nCj0lycYeh0Fzc3OvBOdrb38qCzmPQgH/dAtivb1SE+lNVQAqG9
9tHh6qNbK6c2v3S4NvHkYPGbR5sfHlz7eH/tuydbv77cg/n56TakdyDi4wk4
bhG2YMOn26OPtwYBGcAc8vAjMPh6HzDOwxzm8bWeB6ud96+03VtqvbfUDHMf
totN9xYb7i81PlxsvHup9vZM2f5E0f5Y4cF40fWhnIOxgpuDWdcH0vYHM7Y6
4zZaI/f7k2/2JT2cKXi+WPn4UumD2fLnS3WA+YuVRu69q6sNQD0X/LVW7pUz
14c+3Bh6uNy6P10JH+b13tjxlQ44BEHq2Jmo/enxVejmv7+49o+3Ow82h2C+
f7Ty13tLb25f/vn51qs7C/e2xx/uTT0/vPT+3tUXh/Pv7kBhv/po79Ldzek7
a6OHV4duLvddX+rZmG2/drFteaJ1bqB2oqNyuLmkoyK7Ji+xOo+7slZZkF6Q
HpeTGgsqL8xKyUmNz0qMSo0KCfV2pdpYYPVVIdoR9JVIRlpOxkYUM4SLhQUV
ieC+oNzShGaNdCNYsig2wV6OCeHemUkBuWkh+VnhRblRBUUxnEgKLQhH8bGk
+iDAqmMXqz9//vSf//j+P//4419///zP3z//198+czH/9s3nz7/89+df27u7
2nsGRiZnJi5eKq+pr6htyC8tVdPRUVRXF5eV1dTXBcxB7lDSxWSkwOaSCpKK
mnIi0l9rG8tQXa3cWVa+QZiQKCwnCOHtb+gTjGAFmdO9jWgsE48AFMPP0oVl
RvU25S20Ub2MAPPYVGpABN7ZTd8KL6uhd05J4wtrgjqepK1nJE4gaAZ4WTJp
+h5upn7+eJY3lojStJITthE473FOKOqCVPI5ySi+c4F8fwkQOOMjfc5N9hxB
9AxK6Axa4gJBXZ57ZZGBrqG2tpqWrqSyjri2mQmVg/CMRrBTeC8rhwGno/TU
7f+vS1thCwfPPxk/HZtAFwc/si1gzrK3YZFsAfNAZ2cwOPd5UDAUagiZEk4h
R9OhjzNSWZ4lESHVCZEt6YldeckDRekj5ZmTNTlzTQV7k239ZUkFkV4csqWV
poSVjgwdb+pBsvAkweHF0M5U3UpLxlRZ3FhR1FRZ0kxVVpv73CruJei6ctLq
4uKq4uJaMjIGSkpacgrKklLywsLyIkJKIsKAOXRzfQVpDWlRLVlxQzUlwNxI
S8Pc2ABjaWGJMLHFolyc7Lw9XX3Znr4c78AATlBQQECAnzuDBshzq7obOYDl
FubvGe7rXpgenRzO6qjJub099/Ro/fHhCnTzDw93/uPb+98+2f7uyQ6Edu48
2YJY+90DrsoB8xc3p57fmHx/dPn9rbknWyOPNgde708+2RwE0u9e6bi33Alw
cdfQ/8343eW2k4Xmo8uNR5frj+cbji/XH12qO5nnDjB+dLHqcKrk5njhzdEC
IP1wvPDOVMnhSO7+cOatkWxQ+VZ79MFACsyD6Xxg/P5M4clU8anQG7nPltlo
e7/V9mqtGZo7FHzo7ND9n6y2we8CmHPX+K6P35pvebE7ChVjdaAUMP94NPfu
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
bH+0PQIq35tr2Z1r25ppfnd3+dnB3I3FnturQyvj9XO95Y+2Zx9uzd3fvvhw
d+7BzszR+tjOfOfKZAOE9tWp5stD9VDPZ/vqL/bWDTaWNBan5SdF1pdm1xRn
ZcSHZSVHN1QWwsBOVCA7KsAr0IMKpRtsjjdSIxmr2Zuos2ytAuyxEa6kFI5r
bjg7L5qTGeGdHOKWF8/JTfTJT+WU5oVUl0XClOQHZmaxI1PpZA7Czl0HYSdl
hBGOT3c9ur/0GXL6d2+++/Tx/dsPP37/04/f/wD7f/306uD2bnl1DYT2wbHJ
suq6qPikoPAoBypVVVsbVC4hJ6dnYsS7oF1BTUVUWlJVW11eTV5BQ1ZOVdQM
rU6hWwLm4dEO7ACkO8vAzUuHhzmDbebGQZ5ibu3obkL1RhBddE0w4grafPyS
fPxi3DvNxeT4BCX5NPW/xtqpujEt6R6WGBsNItnAzk3f2dvEww/NYlu7UxFO
aG07Q2W8rnwYFc/CIyhITQczRQekIhWn6u2sH+qBCqahfR0saSgDqDkaUoKy
IueV5aR0tXUg4VpYEdMyK+wc2ZJyJryHtBuryNqY6DqizBxPr27lYQ6JnYc5
iwQ1nMB9ETyJa3OOE96fQgqkOgLjwRTnIDIZcjtk9VAKOdKFehrX3bIDWGXR
IXXJMU2p8e1ZSX0FGaPludO1RbMNpWDzS83FVzorZxoL6lKCQ11xbjZGniQE
h4r1dcF5OaKoeBMCQgulr4TUVjDTVABgjVTlLXQ0LfS1LfT0zLS0DFTUIKur
S8urychqyMmrSEmqSkmoSUuqSYgqCJ+Xu/CVguDZU8zFNOUkdJTldFQUzQx1
iXgs1ZkU5MvyZ3tAOKdTHYFrVzqFRqOSyU54GwyQzl1D53hGBLKSogOLMuKm
B1ufH2/+8Pb4xzfHP787/vHVre+e3/jPTw//+enet4+2fnuz/x/vD6GVQ2j/
5dnOz882v3u4CjUWyiw4/d61ARAidPMXp8+aAI7uXu3ixXVgnIc5DDB+tNh8
e67+8GLtwUwVd6Yr96cqbl2sBBgPJkphAHPuTBRzhT6aD3O9PwO6+Z2xXB7m
h4OpYPN7k7mgcsCcdwc6dPM311rB4zzMYXhX08E33BrKO5lveLnVB58HegR8
sOszdQdzLd8eLexfarmz1Hk43wYDiR0wvznffnW44vBK79HqIDAOEgfA16ea
tufaby71P9y6eLI2tX9l6MbiAPzy+kIv2BwwvzRQeWWsfnG0abqncqipeLCx
aKSlfKStsrUytyIvpTAjviQ7qSQ3NT8jITctDhp6TnJMTlJkcpivn6s9BW2E
M1CyVBU3lRd0NFK1N1C2N1Z2w+gHUDAxLKdEP5f4AEpBIic/2acow7ckN6As
P6g4zy8vk5WazvAKQaOpKmQfY0aQBcXbMCTevme48MGTze9/egl9/OWLJ998
fA+c//H7z3/7+0+Pnz5Iy8qG0N4/Ml5Z11hV3wSwk11d5VVVIbfLqaiAyqGb
6xobqmhpnN6wpi4hLyGhICqlKGiIVCKQDBjelhExjix/czcvPVemLisA6ROC
dvdBuvlYegbi3HzRzCAbFElVRe+MovYXWqbnDa2EEBgxc2txEythZW0+ORU+
ESk+Ve0zJGc9V08r70A71yAMmW0OYZ5grUxCKJJNVRyNlPF6CjbGyn5M2/hY
j4BgB7avTVQ0JTXBNSGcHOVt5+NggTdU0pHiVxA6oyolYqytgUKay8ko2uDs
E+Ky0ZaO58/KakgKGShKWeqo2pkb8i574z2D/X9sTrD2ssPxAPcm2sD4Odr6
O9kFOtsHkR2AcSAdAOf2cRfqaVyng8rT2cyiUP+6xOi2zMTmtLjBkpwh7mRd
biybqy+Zrs5b6qi60lm9PtA0VpObE84Mc7cLZhCC3AnB7kQWFevuiHaxtXDG
mTmcPrIJVG6krqghK6mtIKOvrGygpqqvqqbHjU7cLRRzBTFRJXFRwFxDSlxV
QkhV7AL8oZA6KpZ6aua66mBzvBWSYG3lYIf3ZLgwXJzdqA7cdTRbrC0BS7Sz
IRBssFgM7NiTCO6uFHdXZ39v16hgVnpscHdj6dpc//HO5cNrU3f3Lt/dmTve
mv74YOvdvbWP969BYv/95fUfHm388GD1lycbPz1a/+aIG9o/nix8OJ5/dTDz
fHcchheDwebQze9f7YKczD3/tjnIS+zHSy235xuB8f3p6ptTFdyZLL8+Xro/
VXZjouTGaNHNsWKuyk9tDvUcVA5zYyCTZ3MI7YA5FHMQ+p2RjOMJLumA+dOF
mudXmyCxv1xterRQ+eByJWj9aKZsZyBrozdrZ6Tg2XrXvaVmwPzBSvf2RNX+
XOOLnXGY24sdoPL5roK59tyPJ0uQ2IdqUjYmGg6Weh5sjV9f6IagvjxaC3N4
deDR3uzRytjN+cH1qba1ydbNi+07l7o259qgmy+PN1y72LY20znTW9VTk9tc
nNJYmFJXkDzQUpGfGpkSE1iaC5gnx4ZxooJ98tLjizITKvPTyjITkkJYLEdr
opkGSl0SoSRooymFVhFGKglgtSSoVpqBdOvkQJecWGZZekBlbnBVYUhxrm9W
CiMtySU7nZFX4M0KQ9kw1HxicVFZlIBYfEA0ITnXe3Ci8sHT3SfPbt9/ePj8
xaN371/+8uv3nz//89dff07PzqtrbofQ3tzRXdvU2trV6+3nJykvr6ShIaus
DB7nPexRWVNdUl4WMJdRlpZUFAHMtY1lzCwUHV0MQiNJ3n4IYJyHOScUw8Pc
wx/n6oOms1EaJgKy6nwIrAyNZRaa4ATd3CcYExxt5+6DcKYbaOidPSfEJ6vE
h8GrccJInqEEipeZDVrBWPEMQuwvRCVRhrE6A6UnI8iHtFR28yOwopx8o52C
Y8lhYaQgFjbMDetirmkmL6gpelZd7ByoDX7gKURbNUVVK6Q1keCMNMPyf8VN
7KByrJE2EWlERiNoOEuQOFTy/xtzHuAwsO/rQIDxc7Dzd+SGdu6qGd012s01
1p0R6+HKO+2WG8CuiA5uSY/vLcjoyU+/3FIzU1cCoX29p/FKW/VsXfHOUOtK
T93h7MDqQGNDZmRqAD2Sac8jnemM9nS29qLg2TQ7tgvJ3QFHwphhTPSM1JUB
c6jhWgryJlrapto6Wooq8mLi8qIissKC8iJCqlJiWrLimjIiunLihkrSOvLi
gDnKSMcOjXB1JjrY4rAoC2f4BwqBxyBtrC2xaKQ1xhK+am2NtrKysLPFAfWg
eDeaI4T2ABbdz4OcFhPQXpW1ON62vTj4/tHuHx9Pfni5/+PLG/Dj/eb24rcP
1iCrvz9aeH/r8rcnVz7eWXi+Own6e7A59HRvHIrty+uTUHLvr/cC6dw3NWwP
A+bc96ydpndg/M5C08mVVtjemq07mKnZB49PVwLmNya4jO+OFu4O5e8NF9wc
L4RuDoxfH867PVnMwxxsfns050Z/ylZ7NNRzwJxL+lj23an8+xfLgPSH8zXQ
ze/Nld+ezOddCnt7qmSjJw2+4cPl5tuzNcfzDbcvN2+OlK0OFt9eaH26OXLv
ai/Ej+Pl7muj1TfnWu9vDC8NlE42Zx+vDN6Y73yyNw10Lw5VgcrnByrA5jcW
+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
V54dnR7nm5UcnBztFxPGjg5lhfq7p8YHp8YGZcYHF6dHVubEVKRF5MX6Zoa4
p4W4Qo+LC6LGBrjEBrmmRHinxfrFhHj5eZPdaLjgIFpSEjs4zNmBqm/npO4T
hErOpbAijDzCdbyijb2iTT0ijX2TLfxTkYxIDbdwRVachm+cTlyOTX1nePdg
bnt7fltbVVNba3NHD2BeUdvgExAMpBMcHIQlJYFxsDkEdQU1FfA4RHcwu6yy
PNhcWllEWklAw0DS0FSK6KQbFGYLNofQTnM3cPMy8wkiuHhYONARVCYOgdUA
zN39CJDh3XzQzu6mBLKWq7cZmWFghhaVUuITleHTMz1HdtUH0n0CceraZwl4
NT8PawZay1LsC8IFPprI1+6i593EzrvLCTtJnnOSveChIcVUlaZLCHiICfgq
S6HO8FkJ8ZG1Zb3Qxgxrc2tj7Yhgf3V1VX4h4bNCImcEhb8EzPnPOVmYAOa8
95W7Ya0Ac14l/xNzyO1/Ms4b2IfQHkJxBMzj3RnJnp6pXp7FYUGg8uHS3Iv1
pQDv6cp4+Xp/7bXeumu9DVt9LTdGuhbrKy9VlwLml6srxopzp6u4F8xM1heM
1uU0ZIcl+DkE0q2YDiZejqaeJFM3giHD1oRpb860t3Cz5b4VywljAqY2UZXj
XtIjKawiLqgsKqQsIQKY6yrJmOkoY010iJZGztamFBwCAoArCUW3t3a2tSRi
kViUibmpnqGeuqGOmrGeBjCOsULgbbjraESiLYynhyvDzSUkkBMSyD5d4ont
aarYX5/dXhzeutyzvzy8fann1sowYA6M37028upg9tH2GLTvvZmGvela7pnq
jcG3+1Ng8+2ZeijmD7eGj6507UzVAeOf7i082Rx8sNZ7/3TpnHd5DMT12/ON
oPKbFwHwKt4pOMD8Wn8uhHbAHGajN4sr9GHu7Axkg9CvD+VwL2sfzoFuvtEe
B90cMF+o8oPcfmckA6i/3pe83Z0CA938+lDWWkfCVm8yYL7dlwbd/MZIHvd6
m5kK+C2uDeTtTVZfbsuAz3a1v3CkKn6uNWtjrG4d+vjF1p2ppvWx+pXhmqmW
3Imm7P6q1NGG7O7K5N7qVHA3AD7cmAs7ow35w3W5oPWhhpyhhqzR5lyw+fJ4
3URHYUdFYm1edEtpUn99AUxLSTpgXpETc+ri4PSEgJgwb3+WC9OVFBXiHR/O
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
BHszK6wWkWoSGkdPzmflVHkFp1rTg/TtvJRxDBmSr6JzsJytL78Fg881SsQ7
XiYgSTsuE+cXivYPIpZXZV6cn4XE3jM4AjYvr6nPLS4GzCG0Qz0/XUFT4t1p
/j8LaqpyMiqSEnIC4nLntA0kzVByFDeT0Gh7oBVvr4IjqhActRgsDBRzOovg
FeiMIRmi7A3cfAhULzSQjrRR+EqAD4mV8gvFhsbYwQRFEtLyPN19kKKyfOKK
fJqmgkg7FWYg3tJaSV3tK7y5XLi7dVWcd1UoIwKjT5UVsD3H5ybOz5YRYwic
Ywry+6vKkeQv0JEqBANZvImqiY5iYKDXF1//RVpF8SsBoS8vCJ05JwiYn/+a
HxK7K84KuIZh4FCQ25k2kNUJXnjA3JZ3ku3f4xzs7BRNp0ZCMXe2D3MmxrqS
s3yYZREBdQkRvfmpExW5w8Vpk5VZW4P1m33Vs7VZs7U5V9srNrrqtnsb19qr
L9cUT5flzpTnXaoumirNGSvM6M9N7MtJgOnJie3MjGpLCy8Kdc/kkCNpaBZB
n4ZSI1sqU9BqLjhNMkbDwUrdwUrTHqUL4QRtoI410LQ11ydaattjdB2s9Ygo
bby5BgwRY+Bka+ZgY2aHNcZZGVgidMyMNPW0lYBxZQVJAFxXU81QV8vEQNfU
xMgcYWplicSgrextbQD0QI53mL9XYXrcdF/r/GjP0njX7c3Zw7WJlan28Y7i
haG6o/WxJ3szt6/2fzhefH5j+nipa2eidnOkfGe86sZk9d5kze359o2xqrXh
crD8/sWmzZHK9b6izcHSGxM118fB19UgUO4VMpsD99c6by00Hi+23ZiuhYEA
D7yvDxWu9maD06E7Q0mHeg7mvTlWvDdcAHMwXrTemQyOhqI9Xx9+OJ6/0hIF
sK80RR4OZ602R212xO90pyzUhC43RO71pm12piy3JlztSIJef+di+WJL3NZQ
3sZAzmJbynJXxsFM1dW+3PmO9OtTNeD0+fbMh+t9z3Ym5tpzx+pSVgbL14ar
AfaZlpzOgqiJ+sy+isSWvMja9CCYhqzQ5twI+CXEsJb8qNrs0Iq0ABjYaS2N
66lJ7axI6ShPbiyKrcuPaS1L7qrKqsuLy4zh5KVFpyeEpcQGJ0T4BvvQPMg2
ro4opgs23IcCkxrJKkwNLUgJgclJCIgNY0aGskNC2EH+TAaDjMEgtLSUIFCr
q8vr6qkZGmmZmukhkHqWKAMbOySFTmD6OMake2ZVBkRkUkMy7L1jkfZ+irQo
JZzPWafwCz4ZipGFRt4xmlQfTSJNOzHd18vHZebS3MzlxZHJme7BwaGJiayC
gtObzWUBbeD6tJiriMlICAP3irLyahDdxeSURBT+D13vAdbWmW97kzi2AdNM
7yCEQEKi997UhSR6EwghQCB677130XvvvfdqMMa44hK3JE4yk2TSZibJnDMz
59w7c/P9hWbmnnPu8+1nPa+3NtjGht9ea7371d4IaRT2tqMHwifECiD18jd2
oxqSfSyITAsXsjGeYe3HIQZwibRgF4ytNp3lERRJ9AtzpvmaITHX9AzF2NF2
yZlEXpK7EPY0UijPzZWOMbCR18De9PA2pgZbMUJsvYOsQyKckxLpWal+2XGM
KLpNhIsxUVPGXfrDIHWlCA3VKDXVNCyGZ4qm66mx7M0IOBRaTdHF3ho8S01L
W1xK9qak0Mpv3Lx1/eYNCO2AuWhqHRI7kC4CPNTDLZzgKcI8mkoTKYZC5tMo
gHmSNzUj0LsoIqguIaojO7G/KH26pnChsQQYX2wu3O2pORqsB9LPJzu226t2
O+v2uxtgXBdUzNcUTJRmjhSmTpZlzVXnw8ux4vTOtJgmfrggIQJ22tK4guTw
uvjgshjv7HBSvL9TBM0iiIjjBTqH0W18PU2ozjhPa7Srib6HOUZ4c0gnrJeb
kfDhMq4YggPawxblYY/GOxtT3K0AcwcbrJUZygSrB+d/pK6aEHM9HcDcxMjQ
wgQrYtzZycHdzcWP6eVFwTOIniQXW24ws6uudG6gdXO6b3Ome3eh9/Hh3GdP
dt7eX398MPnJ+dKfPr/3hzfH7y8W3x1PvNof2R+p6Cpgt2UFTdQlPN3ofbk/
/GJn8GKp/WKuBbQ/UDpTl7Talr3WnrPZkw9AnUzVns7Wn8zVns7XPVnreLHd
+3i1/Wi8am+k5M5U1elkxd5gwZWhFwKS96YrhDH7ajncw7nK/d6M44HMo/6M
5cZogH1NELvaEL3exHswVrDdwge6wcr3WuJPutMejRacDeQeDeTs9WZvd2VA
zZ+qjd7uzdruzVlpSz0cKYa/ZbIhfqY56XS6DnQ4VgnB4/Fa99ZQ5f543cVK
1/54w3J3yVJX8Vxb/khNWk8JvyUnqimT05wVKcjmNmZE1KSFlfB9K1ODG/Ii
20rjOiuShIZemwbqqkobbs4f7ygZbM6D3N5SJuS9sTS1oTyvOD8tP4OfnxmX
Gc+JZTO5geSoIFJatF9uQmh9cXJrVVZFfkJhVgwoKyUqKIjpRSe5uTtaWZti
jPR1dNW1tFUReppIfW0DQwQcweIMTM2MbGzNPTydaQxP72D3uIyAvJqosjZe
fDGFGqVHi9HwTlKLqcCkC6wLOz28IjXNPaRoQeY1gpzU7PigcFZVfdPG3t7g
+HhFXR3Iy9f7I0lx0bVyTT1tEeYyinLKWspquqoq6gpqWrLqOrf00FK2Lpr0
ABNmqAXJB+dBx1IDbCl+Dh5eVgRfO/9IQmAUiRbqjDBVtSWYeIW4cpOYUNvN
bW+jsGLegegoni2HB7CTc0sC49Lp4OC0QBs3hrErFU3wMcZ741wpBu40NN3P
3NvHgk7GerthwvFmAWa6VHUZH0XZYHm5OHX1IkuLbHsbuqaKH84QJf4R0crC
m0xEGxiKiX0ofktOQlJWQlxaXFzyhvjNf82ug0SeDnE9nODOJuJBHCKBe3VZ
PJZGhVGEeSKTBowXRoRUx3HAx7tyk/sK00ZKs2brCg8Hmu5PdZ6MCI4GG4F0
4P3JbD9YOQA+U5k7VZ4NaC83lKw1l8P+bFUevBwtSutIjRZh3p4S1Z0RK0iO
qIkNLo3yKeDQctjkFJYnP8g1Ltg1nGELmHs5G5HtMCRrDNkGR3MEzDF0d6w3
3oThgSM7Y8HT3e0M3R2MPByMHa2BZSQOrYXW14DQDpgjtFUAc7Q+Akg3MkCi
DVEYtAEOizExxsJBaOtUD1dvkls8J6inoXx+sG1nbvB4efhid+rp8dzjw5nH
+9Ovz5d//uzs159ef/t89+vLjc9Op8HQn653Pd/qfbTSdmeyZrE9Fyr5yXTj
namG+7OChwttJ2PVyy2ZAPtuX/H+UOnxRPXV+tKKo+mq+yvNF4uCp+udYPFA
GWB+Ml19Olm1N1gEnn4wXHQ6UX5vWrjqFVxYhPnxYA4IWvZKcxw4+5qAv9zI
W2mKPenPXq6LXqyK3GiM2xYkHHWl3+3POehKOx7M3epMn66LmW/i9xWGLrem
LLelLgiStvvy55qSRqpjFtvT4Us6m224O1N/viiAL3t7uOrOTDNgvj1cMy3I
gQAP43B1Knh6V1FsZyGvuzi+szAOkK9ND6/LCKvPZtfnchrzuWDlrSX8jsok
wLy/Pru7Or2zOq2nLrOnLltEOmBemMlP4nPiIoMSecJ74EeF0sK8PUIZLkkc
7/SYgMrcOCjv1UXJZXmJxdn8tCRuQADdw9PF2ASD1NdB6GmB9FG6hmgkygAB
oxHWAIszhI9aWpk6u9h7Ep2JdGFgziyJLBXEpVX5szJsA1MxyXUOyfXWaU02
FQM0SoSKHUW+rjPp5NFK93CLk4cLlekLWX12eXnr4KC5o8PW2fGaxE2I64A5
lHEtpM4/3FxbRbgETkdVB6mki7ptaAxurssMMvMJs6D44wjeJpDM6UEuJB97
SqATWDlgTg9zdaZZGNnp4Ox13L1MnIhIlPFH5nZSoRyLxBQ3frxLTi4jJ8cn
ONgG74lygVOCqYKxhby5nYqFrYqJpYK5lZKjg6aznYaDiSLBVJXlYBhhru+n
fls4x64gl6ylWWhiEqCq5KWpir0hRjPFBpLwktc/lJKSkr4tf0vqtuQtOUkJ
GQmJW+KSEpDSoYz/4yLaFeyia+VcKplDJoowB8b/uaKVxPciQ1bPCfUviw5r
SokFxgdLskbKc07HOnd7G09GWo8Gmxca8ldbSk5Hm4H3g556iOsi7XXVb7RU
LtQWgpWDhgtSerP4wDWMIIAdSG9NjKqLCSkMZWQFENMDPNOC8cnB7glBrkEE
Y18PLNMV7eOG8/e0DPC09nO39nE1pzgYUl3QYOggQB4MHW+HBkOHfGdjgjDF
aGFQ6tDNsYbaWDQCZGFqBD4OMjc2MsYJZWqCg/TuYGPpaGfpSyXxwgM76sue
3Nn+8sX9Hz67/Orl3bcPts63xw6Xeh/tT3zxZPvLxxsvj6dfHExAPd8drRmu
ip9pShfOv03WTjWl7I/XbAyU7gxVnM0J7s0JdvvLRD4OmK935q115mwPFG8P
lWwOFO1PlF+sCs7mG4EyMFMw9EerLceTlYcjpXenqoWGPlpyNlV5PiOs0oA5
GDqkd8AWKvZOV+paS/x2R/J6SzyQDtpqSZirjJguYQHpa/W8zSY+8L5Sz9vt
zlxrTR4qDRuviuwvYgHm882Js43xC4KUsSoh40cTFQejFZAl7s01ns42PNsZ
uLfYfne+FTA/W+jYHa2D0D7ZlAVWDuoujgPMW3OjwdAb0tng5t1l8e0lsU0F
UXU5ETVZEQ15US2l/M6qZAjtguL4esj2Val9Dbmd1RlCQy9PrypKz8mIy0jk
ZiVx02JZV5i7Aebx4XReCCWdFwhW3lCR3VydV1GUlhgXHhTo44l3NTE1Aq5B
BoZ6aIw+0I0xQgHgOGM0MA4fBcztHaxdXO3JXi5OeFNWlFdCdmBOLbuoNSyu
2CW90aOoh5QhcKwd8fXlI+kc9O7F4PMvjioa84YmRmITU5AYjIObGxh6fUuL
Dgopq6QAoV1BTUVNRwMMXUENIFdQ01VTR6hpI1T10epoYzVzWw0PiqEfy8o3
3PLquQxmjBBHZogbLcAZsrp/JAlIB8yj0oKt8EaaRnKqBtdl1MVUkWIEBoKf
5pGeSUiId8lIJiZHu3t7oMh2UE71nXGqThZqLvaa7g7anvbaFGekjyfG3w3t
Z4ckIuX8DVQCtRR9ZMTZcjJpWhq52rpJmhqkW5JENUUHFQW6lRlOW8MMixYT
E7t5S+qWlJzkLdlbkrK3bklLSt36v1PreFeWpyswfmXlHtE0UhSVGE0mgIR0
06nxDBooydsrw59ZxA6BuN6VmzpWmb/YWLHWVnM+1bvf33w62gZaay3d6qw8
G2k56qvfaquEuC5iXBTax0syILSDejLjWpMiWxI5YOIgMPQabkhjDLuOy6qM
CCplQ0lnZoaQE3xduHQ7tpdNOM06jGoVTrPlMBwiGc7hVMdgghXTDct0w8BI
c8WQHdGAOcEe4+mAcbIytDNDWuB0zTA6plg9c2N9S1MDSxM0xgCBNdTHoVGQ
24FxM1NjaysLezsbOytzE6yBu70NJ8i7r6Xm4eHGnbXp1fGukdZisKSZ7gpI
7P/ruxd/+frpD6+Pfvdi76snm6/uTD5Y7YYmvtlfOt+WCVrrLRhvSBms4o/X
JcPBk6mGs9nmy9XOz47G9gZKV9qyFwRpK0D6UMnhRNX5ctPzvZ6L5RYI8AD7
080usHXgHUi/N1+/P1R8Z7zi/GqJ+9XaV6Ghg6Bob3QkrzTzVwXxC/UxMK42
8Vca42YqOVPl7KnSsHnA/ArwxZqopXoeML7anjJSzpmsiRmvilrrSJ+sjRuv
5s21pPSXceZbhFa+O1IGX8+Dlda7c41Pt/rOl9oOJupF612PphpXekpnWnKB
dPD0ycbsgYqk1lxufRoL0rsgL7o2nQVufmXl0YKiWBBg3loW31aW1FGR0luf
NdCU216ZVpvHaypO6G0sLM5OyE6JSedzEqND2P5kqrsFfL+ozsZg5cmRPrmJ
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
0NDS3trd3T86Ojk/n5qdDZhLyctpIRGK6qrCi2hXoR3quaqOqrKWkrKajK6+
AtpY2cxW1YWIoAfgvIKMCd5oEea+YXj/cLIvm+wXQfGLIPlyiAFRFAbbnRLu
QOPYenGtfHnW7GTnxGw8P86uNJPKIaJclMV81W+FKMsA12FSsmGSUsE3xIOu
3wy5KRF2SzJc6hZbWoojKxOvrBh64yOutGS8kjxXUjxWWipdVYWrqkRUVWVY
mIcQ8Ch1VSnx67K3ZcQ+EJOSu33j5i1xcUlpcSkZScjskv/E3CXUww18XLge
huDOwbtFkTxhB+hO9hHOq+ey/CpjI9uykiCrDxZmdGTEz9QUb7TXr7ZWHw+2
r7fWHPe13h/rvZjogYi+31l/2N141NMEI2AOaO93N4ChA92Adm8WHyq5sIlH
BVVFBtRGB4MgsReHMoqCGLlMer63TyqRFOvuEot3i3C3D7Q3D3Iy51Acq5LZ
XWXJY02544KckcbMSUFORzEvJ4qWGOoRQjL3ckJ5WmgTbfUp9hgzpLw1WtXG
SNMWq2ONRVgZISwwuiYoTTB0XQ0VfV0tSOzwI6Sro4XS1wMhdLWFl9FNMC42
lu525kyCU0k6f6C5ork4pbs6fagxs78u7fXZwheP1h/vjBzMCFYHK1f6ygHz
qZbcqdbsyZas6bactcHy4znBcl/RUm/hYmceRPf51uy1nqKj8erz+ean610v
d4QrXb9/tvrT251nu70ni/Wf3p96sT9wud3/cL3j/korUAZ+Cj0dYAdDF15P
X2w8ma6Gkg4Zfqe/ACL3Tn/eTAN/sSV5uy93qSUZtN6ZAb27JycwL9g208+i
MtK9PpbUkxUwVRE1UsIeLo0cq4ppTvOpT6IPVUb1lUZ0F7I3egvm2zIgPDxY
advoL3q63QN/+8ls095Y9duTsTuz9XDy+fRsEr4wsPVH671g6w/XegD2T+/O
f/ds5/cfH/zmwSqAfzLfvtpfuXd1M5m5ntIhaO71md01qVDPmwrj4L+uuzaj
qZgPPt5cAs7Oy00IzU/mpMWF5CSE80K9gqnO/iRbprtVGMM9I5aVGRfmR3Ez
NdAxgkqlq6WlooJC6MK3BqAWoQ28A+ywrw/fMoQOcA0ODoDDSyT0L0MUDs4N
cP7Wh8M4U1NzKysLO0czV5IF2c+SwTLz5piSWfpO3hr2TG3fOAdSuE16ZXwE
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
jF18kARfg9AI27ho97hQ50i6FQdvSkGruGvIOClKUrRVvJBajvJS9vLSdBMs
w9VDRUlVUUlF7MMPxa59eP22tISinIS87P/APMzVPcIDH0UixlDIMRQin05N
8/fOZQUAYi0ZCcNlOeNV+VO1Rcttlfv9zXdGWsHHwcQvF0cB8Pvj3Y9nBsDN
H0z0n490g4/vtteDtptrl6tLZ0vzp0pzxovSoYwP5iX1ZcdDE4eUDm4OaJeG
eYOD5/qT8wIoAHga3T2J4gzKCaBl+1Mz/agpPpQQF1t3NJKFd2krznm6v3Gx
vbgx0b0123uwPHS03PfoYPLB7giE9pf745+fL0Fu/92z/cfbY/EBHl72aKo9
Bgwd3BwwdzFDgafboHWssXoYfV2RmwPswLjIzbFGaDB3YyOUvbmJl6cTlMTc
BG5hclRzcUp9NrulgDMhyNwarQbMD6cF4OwD1cmQ2y/3x/7w7uRv3z37+4/g
4K+FmP/bu//9w9P//O7hf/7u4j++Ogcr//ntATD+2wfzv7zd++J8Bizyywez
nz+cPVttOV5ueHsx9erO+POD0Sc7g4+2+h9t9T7c7IHoDiX9xf7A0+2ep5td
z7Z7nqx1iDDf6i8ar09c7MppyQkZrOTNt2W254e1ZodU8r1ywlw5BHSoky6P
jMsMdKjkUVvSAlrSAwHz2iRmdyF7qkF4fgDSAd79iarzpbbFzjzhfSl3By73
hl8cjj3dHXq2PwTd/GK19e5C4954xd2FJsjw0NMHqnizrVmTTWmrvUVQK55u
DZwvddxf7oSv/MdXRz++Of7+zfF3r4++er7/m8vd377Y/+bV0edPdt/eXz/b
HJnpreyoSgfSq3Oii1PCClPCsuIC0mN8I3xdo/3xhYlhRSncyuyErDiOgynW
ygijr60LgCF1DZWVILsbitxc95+byLsNDAxEiV30IQAfjsCoq6ejh0PoYHUQ
RoC9sQHGzMDAzAhtaWZsZYhCW1qam1vgyDQPUytjaycrghfBBe8BXOui0OD+
qtraUvLyMoqKWkiEoTFWXVcbpKmnDYDLKt0G3rX0tQBzAyMNYwsNKwdtI3NZ
GxclIlPfmaxN9MH4R7j6sz39w8l+YTSfMC9vFtU7jMwMxzPCnQBzSrBpANcm
Ls0js5CSWUBKyXZLzXSPircNibCk+WKciEg809Qv3MOX4+rqre9IVvegaAX4
YMMZxoFOCCZWyQehQBdOsN/0k5bmqGr4SEhbiolFq+rtlNTSbJy1tfSk5BQk
5G+L3ZK4IS8nJnnjA8mbEhI3pcRvyt4QCjBnubpw8J5Xt20UCuJ6ZpBfATu4
LjF6sCRrqaVqpb0KGN/qqjkaEpyOtj2aHbw32vnxysQDcPORDhh32uogrgPm
UMn3Oxsht++11a/VlwPp4OarDaWAOZh4Z1oMRHTR29BgB/o4MJ7lQ4Ax14+a
zvBIJLnEE5z4JOcwRws/a2wik9Sem1afkeTvbIuUk2A6WTcWpC0Mta5OdMwO
1K2NNz8+nHq0P/biaBJ+Sr98tALR/d3d+Y2hmjCieRjJgu5o6ILVtEYqOWK1
3cyQDjgEGLq9qYEZBonS09LRVBFKQ1VLU1UPoYU1MrCzMneytzI10jc30qO5
24b7EJK5gS2lqasDNaeLbS+Pxs9Xu+Y6CjeHayCu99ckXx5NfHm5+fPn53/+
5ul/fv/i15/e/vqnT3/9WWjof//Dy7/+7vGff3P+b5/f/dMnR+DmPz5b//bx
8o/P1qCbP9/re306+min+2i+/ny97c3p5MfHE8/2R4CyJzv9IMjtjzd63twZ
fb7XD6Rf7vSAsx9NVm8OFIMRgwXvjlXUpfr2lnJnBGkN6f7dhRE1iUzAPIZq
zPEwiHBHAek1fHpfQURdIqM5za8uhdF7hfl4bTyE9oV24aJcqP+Qw7eHK769
XIfoDkHi8Ubf+3uz91dawcrPl1ugOICzw9hdErXeX9KWz17vLztbaLtaEVT+
YLUXGvof3hy/uTv3+mzh7fkS6M29ReEDkZ/v/fDJ3ecnc28vVp8cza6MNvbW
Z7VXprSUJdblx5Slh+fy/TNjvCN9XWODCSUpESXp3PLs+OI0vg3W0N7cFKml
pSivhNQzlLwlp6qmraamoa6urvnPDeq5qI8D7MC4hobG1bSbcIOXisoKwvuo
G0IK0NFB6iP0DPUQGLSh6RXmRqbGJvr6em7uTta2FmQ6hRXBJlDIlrYOcooq
QLeIdFklBU09XSQOowt+ADLSU0Go3Va9raqjoonUkFWR1NCTQ2IVzGxVjaxk
HQjq9BAs0ceQHmIewHHz4+D9w6k+V5gzw6hMFokR5ukVZkcNMWOwzFix9onZ
eMAcGI9NtsssInLibUh+SAeShj1Fz93XxCPA2sXXFB+AwdN1mVR9Ng0b4Wrg
Y6BAVrxBk70eJH8rUlkh6PpNX7GPuLdVwuWUva5JuUopeJjbqmsjxD74SEJB
XkxS4kMZKbGb16Tk5cQlb0pKAOAiScSQCGw3F1AslQg+ns8KrIqNaEmP68hO
GK/I3uysPR5uORxs3uutPR1tebo4cHew5c3q1NOZwbuDbce9zacDredDHcs1
ReMFaat1Jad9LQcd9ZNFGWP5qSu1pRvNFWuNZROl6X3Zcb1ZsZDVm/jhVZEB
ENdro0JLWb5Z3iSgO87TMdbDno93iic4hztahNoD5sb+tuY8Gr4sPrqnrGCw
viIlLKAkObo6O7avPv9gse9sffhwsev+1sBnj5bfP1768sny+4cL7y/m351N
L3cXpYd60G11mXYGblh1R7Qa0QYDhm5loOVgZmBupItDaxki1XU0FTTV5LU1
FPWR2lgs0sIUbWNpZGVmaG2i7012LsqI7ReUjbWV91enjTZkgI/fmWvbHq+d
6yrYmW54dT77hy/O/vPH53/7+e1ff3z1l+9f/+2X97/++2//4+f3//bdxz9/
8/z79/e/ennw9bPtH17s/P751u+frL7dHfhkf+B3D2a/OJt6tNYOyfzJTu/2
WMXuRA0kZ3BwqMDA2sVKx8ujUSjLHx+PgblDlr5Y73hxPHqy1LzYV7gxXH46
1wwxW5DDGqiMa8lm9ZZEdxVFFEYR8tjuUWQszUQumoRJ9rGsifeq5tPaswOr
+RRBundPXmhvYVhPAWugJGK6Pn65I/twrHK5I+d4oubl3sCzq+crfXoyBd4N
f/7JXMPGQCmcauDrARPvLIrqr+CPNKRCkhmqTYUT3XBd+kRzzsONwZP5jpOV
rvdP1n/7Yuf5yfTbi6Wfvzz/67dPf/ri/IfPTt9fbr64u3C03NMvyKkriqnK
iyzPCMuNY2ZyqYlhhPgQQhqXWZzMLs8S3tA1JTaM5GYHlQqpo6mH0FFVVZWV
k5dXUIJNWVlZRUVFTU1N82o+TpTSwb4BcNERUYwXujn4u64WAqmrb4BCGYK/
C39Bo42gtcNocLWJlsyZW1oQSMTQMBaJ7IUxMgHSZeEv0tRU0tZQR+rqGRti
rHBoKyN9M31tI20dI009Yx19HIQENX1jVYylqp27npGNnI2nCiUQ7UjW8vBB
+0S4MNnuPuEU3wi6H4fhw6H7CEM7gRpsRfLH0AKxoTybpBxPKOYZhZ5JuS78
HKeIZGtiEMLc87YpQcXZ38glyNTGC4X3M6LQDELwmFArBFP5lpfUNT85cX+5
m4HSH4XI3gi8KRYuL0WXuuEg8WGgtUlyeKAxzkhcRua6jPR1mVvXpCRuyEp9
JCkuJSd7U0IcNomb/1CKL4PvRQbG/3WPiO68lMmawmVB5UJjyXxD4VpbxZ3h
5gcz3Q9nux5OdT0Y73q7MvVksv9soO2oqxF0f7hzp6V6o7F8W1AFL2GcKc2e
K8/dbKpYbyqfKs0YLkgayI3vz+GL1rWK1sM0xrIrIwLz/L3SvPBJZLcEogtg
HuPpEOliF0t0jSa4BdhZUIwxVEvjABe7MLJ7bXbizkz/xc7s1nTH5kQbMH53
tf/R3sjLs8lX55OfPVr88sniN89Wv3u5AYm3uyQmztsu2AOLN9V0M9YkWKKc
TBA2aCHmNibC97MYG2jq6yohtBQR2kpolDYOp49F6xgZaBkZaDhYocMDyGW5
/JbKzObi5LLEoJb8qOG6tJm2/KW+kqPF1k8eLP78m7OffnP+H79/8fdf3v2v
n9797d9/8+v/+fHXX3/69e9/+OWHt7/7/NEfvnzytx/fQJq9WOq8N930+cHI
N6dT77Z6Ptsf+Pxk9O3h8NvjUUB7rjN3b6wagHqw2il8PsvBiPA5pBcLkOQB
dqD704u5y4Oh50cjd5Zb10Yr9qbrNkcqxuqTGzKC2gsiuou4dSn+bXmsomhi
EZcQ62UqmoLLD3cFzOsSvVoz/UcrInvygztzAmDszg3pygmequPvDxXvDhRv
9uTfm2t6vT/0fKv35Y7wYY5PN7vhHLI5WAZ0wwhNvKeUB2NHIRfOdUs9pe1F
vJq00LHGnIqk4LWBmoaciO2pxsmuvHsbff/21YM/f/3wy2dbAPvLu7O/eb4D
mH9xufXibG59smGgObOtIrGuIDKfz8yL8UqLoKREkHNjA8oyo6rz+GU5CWH+
FBcHc4SmsoK8tIqyoqamOqR1kMo/NwAfSAf7Fs23A+wwAuY6Ojqia2qimXZR
eRcRrX+1wQ58CHe1mZmZWV9t5pDfLSzs7OzodKajg6shGqehowuVXEZFXkFb
VRuD0DNFoSzQ+hYoPRNdpImugTkCY65naKZl44b2pFv4hDk5khBWnqquTD1H
qg4j3MaH4+rNxnuHU3zYXsC4dwT1Sh7UQDOKP8Yr2CgkxjIhyz29iJCc5xqX
YRuZYsWKNyeGICxJ8uYkVWd/tHMgzoamR2Aa0clof2tdiooU4SOxIDmZCHUl
X9kb/vIfhalJ+MmIeUmKWYmJYcTFfAi2aRk8FA4FEV1M/DqM14BnGanrEuK3
ZGUAcxHpItijiB4gvhcxJ9S/Lj6mtyBjtqFsq6fpYKB1t7dxo70SBD7+fGX4
cqn/fKztfKT9xdzIw7GeB6PdIu8GzGEH6AY3X6ktnq/IA2efKs4E2AeyE/qz
hD4ucvO2ZC7EdXDzmqggsPL8AK8MBhEwhxGUSvOMJ7vGEVwTafhUH6/MIOFj
VfO4YRlhgfwARmwArYAf3laaPtdbszfbvTnZvD7aAFbycH/o6fHIu4uF3zxd
+f7j7T+9v/ObB8v743XVyYFssjnZUpdkhcRb6APmYOjOloYeDle3lDEzAE9H
IVQBc6Su8P5RaH0NEyOEjSnKwcIQPo3kaBxAsY/y86zP4gxUJoKL9ZTHjwsy
7230fP1y+49fnP7528d//fH5X3548cevnvz41bOfvv349199/PWnj//6x/d/
+vbVF88Onx3NfHa+/Murw2/vLz2ea74/Ubvekr7cnLLbV3B3qvZyqxtiORTw
O1MND1c6zxdaH612PV4TtnLRxTXg/dPzWSjLr+9OAul3FgU7kzUHsw2zHTkt
uWFNWSGteeHDVfEVfEZrbmhlAr04isijmUR46PMo2MII99IoQmMKszM3eK4x
fqA4DDTbwJ+pi+8vDB8qi1xpz1hqzdjozgPMLze6H620P14VzvgdjFfdma6D
SA+NYGuwpCbJtyrBe6Q2uTY1cKIxsy2fW873a8+Prk4N4XpZc71seysSD2db
3t5f/Pzh6ruLpS8frz/YGdqdaX5yMHa02H6y2v14b+x8a3BhoKK7Jrkuj1OQ
4JsXx8jn0bOi6FkxjOIklvBKekECYO6Ft2dQ3cmezuZmWHBzDQ01RWUlKRlp
1avtf8AOm84/N1FbB8DB0AFn0SV1QFu4VOZqQl5EOgAOmBsZGRkbG5tebUC6
lZUVYE6j0T08CcbmZqramoC5oo4aYK6NReibGxpaGiJNEQicNri5gQnCwFTb
EW9KC3CAiO7JxDpQdF0ZSCeaHp1l68Nx92YTmNDHIa6zacA4k01hhLsR/I1J
/mhGKA4w52e4puR7xGc5RqdYs3i4EJ6JVyjKgapmR9F098O4BeAcqEi6jwnR
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
li/Vlaw0lB1tqTxoVY0UqQYs8gM6YbOcUyei1wppMLYq+HVCJmAO8m2fR4NU
TsUD5uYcTCkzp5iZoyWkG6m4dnP+Sn/L+fmDpw8NnJ0bunx0/P65+Zc3N778
8PTndzeeX1t9ug3Z8NiXH27+9OnVv767//efHv/5m3s/vr76zbOLn97d+OjS
4kCj0SLOMQtJAkKCgpHJz0mBeM4n72KeycrBMO3Knk7DJtMz4nOSw+lpkVR0
uIiQMFxrOjZcc3N98PnVxS/vrn//8emfnp37w+vL//7jR//1x89+/3LnwvyB
m8fHP728emam53BHZYOWC5gvdZXsLA0MlCqOdJU9PbPQbRFbWZmbw82TNcam
fLotD2tlpZeLs3uKhIfbClp1tC4zs9fK6y/mdZnZh9uNI1XyqUb1VKPWvnB9
oAzQPtRiONSun2rRg5Qf7iqAkysr3ZvTjYA5/FFPCW+iUQVCDITWKnCQzVt0
ZLhozLWoj/ZY1vsLTh8sgWx+fNB69IB9M5mTI6WbYxWbY1VnJ2pAxCGVA+bw
9wLjo3WKXhuvWU+rVea0GFkHikRNBo6Fj5OSEmWUdD4hOQ+XJKZgdEJmhTG/
u7Zssrv1b7/6+utPHvQ3VUKtTw9VGeTDTWW9NdZ6s2yipXyxp7FKxc1GeZOi
fKoUrKlW21iLeaqjcLLTNtFlO9RTDZj3N9tqirXVNn2RRS0X5REJ2OSkBCA1
IhIFmMMH9R8wRxj/h47c7l1sCOOIviP3siHN9t1p9N0bXt4fkTGosISYSCIh
SyTmaXTKApvFaLfuwti0+JjUuNSsVFQ8KgQVjIoNDw0PikoIDY319gn7ICLJ
FUMOA9OexUCxFZmAuUjPkhp59pVvZoHEzBYYyIz8tBxRJF0TK7SmSItTFbZ0
ax35Peashjbe9LxtdMLS3CYsr6LVNnDLapiQ0JXSZGaSF9V/H831A4a7IzfY
V5YexyclEnEhFCqKTgnnEsPE2REibDR8RLPR0dmZSXVVlWnJKaGBQfsc9vh5
ebs6u3zgsAd4B/ad9oN/dwRNB9P+6MThT84sf3n15NfXN9/dOPPjhxd/dXvr
+eYySDkI+menl1+eOfLl9gZgfn954tGqPZLfmhm5MT0EwRxMOzAOeRy+A5hD
QSoHrw6YL9baIJvP1xYfqjBNV5qQCTXkZjQQdBghmzeI2WDaAfBSJglGUHN9
dhpgrsOhC6jZtRJOuZChzc000LOrlLyptorlwcYLS0MfnV/47PoaYP7ziyug
p29uH391Y+3V9fW39zd/fnn1L99++Jfv7//+3Z1fvb72+aOzr+6fme2rLpLR
zMJcMQmtYuLgUyq0F1ZAxQooOC4lKy8XCjQ9nY5LomXG4ROCiAnBuGhfQpxf
qYLSDq64zwZYPbl4CNQcMIfR/vTDa8uPzk8D5neOT1xfHZ1stI5Umqabij7d
Xt5Z6r+y0He0p7pFxx0q054YaJppKqlX5nWaJR0mcaOaXS4masgJ+YQYax6m
QoKvkuPrFKQGTW6VjDhcKesq4A1VygbKZX2louWeEoB6rEE702UZrdcA5iv9
JYs9RRfm209O1M21m4H0ySb1fJcZ1Hy4UlIhzjBQo9qN1NlmzWyzCkgHrw6m
HaR8rc9ypMsEmJ8YLjl10N4HgGiwNliK1NKBgvEG5UCFaLRWeaBI0Gxgtlq4
7QWCCiVNSUtlZqCoqShKWhQtPY6RlZKXkylhUQwykU2vLtIqB9qahjqauhur
b54/sT43Xm1Rm2VcHZciIKaWKLg9VWZjXg4h2k/DyJpsK51oKzjUVTR9wL5f
3GxfLZj2wdbSuhI9qHmhSamSCdgsag4Rn5GRFhMXGxRiN+cg6Ajmdl8aGAiw
Iye/NO0I47sbUCDKvivo/5+YR0bFRUUmxsbgs7M4eQyJVKAxqnVmrUAuSCdi
olJi4lPjgyODwKsHhPkEBPuEx/gHRDj7hu8JT3RKyPRKwvtmsyJBzcV6qsTI
yi8UqKwSRQFXbKLzdARGPhocO00dlWdJ4JniRZYkYzXB1kitbGY1dgrG54q7
+pWN7cKKOiYwXlBKFiuTlLIUSQ6KhXLP83fjerjk7HGgermwEoLJCT4MTCAt
xUuWFqRAh3Ii/HLDfNND/QJcHQ2KfAaFyqLRA339oLzdPfbv+cDf1w80HfQd
HLurqyu8Y6+2V19fPPb19VPf3Nx8u3Pi3Y3Tby9vPFqb/mbn5NtL689OLNhF
/MTik2OzD5Ynn67NfbK+cH1qEJI4AA4nW4MdoODw5bn+NtD0Yy1VYNehQMrn
KgsnSgyjRephq3KwQAGC3m9W9BikyI1pLXIemHagG2mwQ4GU63CpZaDjWSlK
bJKFhitgEi0sYodFuTrUPt9TvzHReX1j6rMbx7/66OwX9059cWfjy7vHf/x4
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
wZUqJAg011ZRrbEUkmisgJBwZyd3P0/fqICwKP9ATFQ0Pi4GFx3GxiaVa3nd
1brJztITc11g2g9PtSxOt81Pthwaqh/qKGmrNgDm7XWFVcU6lYRNzcnCpqPT
Uu1rU8G3A7xIs313ORxwjazvQnjf1XTEuu9ijiyPQcL47rQagjmyGvb9jtDh
YRGhqPePW01IjElPQ5NJRKmQZ9CrQc1bWmvLKguonOz4zAgMNT5XhCUJ0kiC
BKo4gaVAi7QYhSlbqscq9FmGIpJchxFp0hSWLIU1W6BH4/ICAXO6JhZ0nKqK
ZBgT2fpkiSpVSo9lBDkJvZ3z9u/huTmyfN1I/i6EAJecACei+940J4e4YIcs
rD+Piy4wMprr1Y21aquRrVWQ1DKiLp+sV5A1UiKUWkKQ8bIktFQpDh3vujfM
xSE7LSYrKzEgzGuvxwd7vfa7eLvsd9pn78I5fOC81+mbq6eBcXDpiIh/dnoZ
kjh49V2jDiIOmF8/BHm8D7L5telhCONQ4NgB85WmytmqIgjjwDXk8YW6UoAd
1BxMO2A+YFL26/L7tArAHNS8js8specgDTcY7UtbczBAN1Ig63Zlx2eUcKg1
Ml6lJK9UxLJJ2SUyjlXKGGsvPz7Tc3Ku59HVlYeXF5/fPvrpbTDtc59eW3q2
s/z0yuKTS0tPrx55fffkd8+u/v7Lj7779Oa7T27+7u2Tbz67+/rx9UqLXPfe
n5vVQrNGrM/nq6UcrZxr0UqKjAoo+IDJhTQpj6oQ0XUyrlkrKtRKQesrTEqz
jFMoy7t2YvHV3e0fn915fGHNJmXkQppOikwM9PLb/0GEn7/zB/v2Ouzz8vBF
MHd23W93Sy77ENLd3J3AwIOsBwX6vn/snm8MKiw+KiLYzzvA2z3I2xUq2MsZ
eIcgDLKeFulLSgkDI8fAoEDW86nJNnlOk5nbVSywL4bpMEIeXzpgmWvTz7Vr
j3Sb1weKljp1m2Nlpw+WrPaY1vvNl2Zrbi42bY2XXRiruHKoGgp4B8Y3Rwov
z1TeWG68daT1w/Xue+u9F2eaF9stnSaOmZbCSwvlYmJYGXE5iRHoCP+ksICU
6HAIGmCdfTzcfTw8fby8Q4KCQ4JC3V3dAnx8M9LSiTnkhBR0cEhEoH9QZEhY
Esq+r2paRAQ5OZEYHykipVuldFs+rdUmnu0tWx6tmxqoPnSwcXGiZWW6fWG8
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
D4+QbdvWkIdsG+S1LWCbO8j66kLOrY5y3+K2eZ37lvUeWzeBewdBh0Iwjwjw
g/yLiwigRPrRw7YJYryspKhyKWakRDFRo55qME43W5b67DcnGx8d7X14pOfz
C2NQ4NU/v3Tg25uHf324+NO9BeD9q6vTb5YnX58b/+zcyCvw80v99+bar03U
L+7IG61QTtXqx8oU4+XaNhO1QUnIY8fYWLEClBcvzlOaAm7cn5XgL8ZFSIix
PEy4lBSnpCWqqPEaapyFhc4QYrOEuCwhoUTDLtNwyjSsahO32sSptnBb8xQ7
Ki0DDZmjXSWTA/X7+xuG+2p399WNDDTt2V4DmCPnILcUWxryDfV2bUO+DuJ5
Za4mP01mMwrTDCKzXqxScLhcMirBsd4EPPa7ao6Mj691xP230fN3d3teE3Tk
G5Ahtv9zruJqWl/tfneQHpcQC5hTaUQOhyISUDKsiuw0SaqKVpTGr82V2iRo
aoKznO2XnZY0tie3o12j1ERYsjCpOXiKyEeVgTHlkx153BBnyqdyNFGAOd/R
CxfJN4Sy1EEac6KMGYT3cBJv/TDNw1W1fp3W210aE4CP9QoM3eAdtTGZEamw
cJQGgVDOZotpDDGVLqJQhWS6mMqS0ul8EoNNYNKwdFwiOT4KE+wf6+YSunF9
4IYPQ103MIgxIhleZCTIs2kMUwJWHmQqZxS1KXYcKGwZyLDkMZBsDmqODJED
42DUQceROa7g1UHN4QqwT9YWgGkHBQeXjgyOg4LDtdum70k3IFIOBZgD446V
aEIGYJ7PJIOaA+OIlCM97UgwB94Bc9BxKzUFBB0cu2OHdhrGSk+xMvG5YkZj
umGktWphz87Tk3snd7YfHdl5fnbs+uLBO6dnbp+avn7iwOVje85Mtl2YaV85
3HP/zJ7P7xx5fevoo+WDDy9NAeav7i6Bmn9yc+mT26e/+OTKL18+Gt/ZUGQR
2Q28LDXTpqRZ5XSDmCxnY3hUlJSNl/HIYN0VEqZCwpZL2GDb5HIuYC6WMhQK
jlrBlHFT0jXs2lxtVaZcQ4ff9gRGtD8ueBsmyBsb6k+JjkIHBcX4+EZ5eYe5
ewS5uoK4+2ze7O3s7LXZOdDDHRj393CD8nN39fFwBdhByj3+hbnb1o1bNm+C
ct3s7L55c7C3Z6SfV0qYHyM2SJQQpMeFVUgJO7PEh+rNhxr0cy3mpe3Zl8eq
H8x1PDux6+XJQaD49apdB8y/uTH38/3jvzw48cOd+Z/vnvjh9tGvr02/vTL5
duXAm4ujr8/t/vT0wMpoxVil4nBL2qBdcKBCv9surZGmVMqxlRqyIN5DEO+p
JoayYtx5SX4mNhrQtvBxVhHeJiZYhSkZQkyuBG+XE/Ik+HwpucrAq7OImjOk
PQXaLruyJVvSUaDc25I73GYf7S4Hxg8Mto7sah7qaxre2TjUVbWzpbirKrup
2Fxv1wPgjQWOa4lNWpalBLNUmK3NTVfbUmUaFVcgoGGSUfHx8UDlaq+4z1rv
+tqJS2vdcf9tWO3dvWWQ6XDIHnFry9aQt2tHrDpgjwiNS4gGNefz6fCQybDI
0g18q4peauNXZYkypMkivBdgXmonT4znt7cpLdakvFJ6ej6ZpQjKrOBoc/GA
uSoTZytl83QxdFkYVxfDM4SzDcF0daDakiBlB5G8nRQuH2d5eqS7uvHfe4+1
bauSnEDChmza6uS81SkZG0qgJSfiUEkkNJaJR1PRKEoimp4MjQRsbGJyTFJC
JCoiONrHI3yrc8SmjZHOm8I2bYj2chGysRIFUaDHqe0sYWYKz5YkTE/QFhJq
dxgad5rh3+OY2jq9++aBAWB8dQGaY4kKBHNkNG2xtwEi+VRd4d6SjOEi28H6
komaYtBxQHtHlhkaYNqhDfK9tua01aSsUQryWEQox8pTCdcxj52CBa7TSRjk
2AXEsQPmyKA5kA4Fgp7DIQPmOTyyXUDPEdDsMm6BWmgVMES4hBKz6tBA1+3T
h68en7x87MCj5WOPlo9eOjJ0cab33unhmyf6b54YfHvv2I/Pzn16fQ5If7Qy
ff/S9NsnF39+c/fHN/ceXVt6fufccHd1vlmQrWGlSckmEckoJGr4eCkTzScn
cMmJIOhAulLE0Mo4Jp0406qz56Tm59ssFoXZKAELZ1FzMg28Upui1Co1C/Ag
6CmBLoRQwNwz0m0DMTKYEBGCCQlCBflH+3iGb3MLdXcJcXcJ93SP9P7nKtQw
321QoT4ekLsDPLb6u28J8twa6LU1wNOBvPtWZxfnTVs3bXTZtN57i3OQm3Ni
gDsrLkCLCy/gYbbbRNP1NvDYBxtNc23Wc0Mld6fbny70fXpqCHQcGAe7/vbK
wa9vzHx/+yio+W+fnPnTs7N/enb+D0/OgLJ/e2vu62sHob67PvX9jYN3Z9sm
G42ndhXtLpbNNafPNFqbtOTeLFFnllgY586NcVfjQ6ihm0XogGwJQU2NNnOT
AHCbCJslxhaoyVVmVm0at8bMrrXwoEo1tDItvSVb1lOk6y019NfaJneUj/eU
jW2vnhhsmRruGBtoHext2NlVtb2xoLcup63cCqm8scgAVZevrcxWVOVpa4vM
lQWmXJvCqOZKBBSwzWQyJikJFRsbCyQCsP+zm/1/vra980J8O8IyctgKtJEz
mJA+PbD08Jm1/WAdK1LDgzDJCUwmUSKgauVMo4KeaeBUZEkLLWwDP0FCDWST
PQrtlCOHayemSqsaxPYyhtWON+Vhi5okykw0RRZoyCdBSOfro7naaIEplpca
wbGEsrSB+tQENTeY5uuk3rY+z9fT5rJVtXETa/MGqp8rLS6AmBAUF+oe5OUc
6OcYdfUL8A6PCQuOCAwI9QsO8w8I9A4N8IoJ9ksKCUzy94t1c4tYvzFi3YZo
wNxlY4y/O2QcmZLGUxM1eVxJBlmcTSjoUFf26TOr2EY7obBR+vjI6PmhlqUd
9VfHt9+a7D832Lq4ve5MfzPIN4j40vZGuM61VALg+6vy95ZkQTDfW5IzVJAB
gIOIA+CdaVpogL5DA4I5iHg+h1zApQDm6eRkpMMNFNyxznR1BA1ZWg46Dl4d
uM5kEjIYeGhks0mg5iYCKo2GBtghnsvRMToiulApas5OOzzQM7G9dXJn66mp
oXvnjjxaWbh+avLszMDy7M7rR/vvLu55eG7fs5WDn9088vXDpe+enX9xc/7q
0tjr+2d+fnP/7bPrf/7h1c9fPJ4e6W0pz8gzCNJkNAjpKi5WTHXsJKPk4jkk
FI+SJGKkSLkklYiulbMNSr5JLbRZlJnp2ux0rUkjUImodptyR3Ppnp6aLA1X
y0lho8PI0b64sG3JQa7oQJfkYI/EQI+kIC90sDcUNBwzw31dI723JoX6xAdu
gzZUrL87tOEa5esa5esWHeAVFegT5OXhsdV568Z1bps3erltcdvwfnKEv5FH
oIS6arHB+mTvG2ON46Wq6ea0o13ZF/dWPTjaAyYcAP9yef9XVw/9dHf+nwp+
f+Gb2/Nf3zr67Z1jP9w/8cW12d9eXPjDs3O/vTj35fWZ3z09Cbx/dX369fK+
JycHL080T7Wmn9ldsb/evLtMNVCqaUwVGCmxWmK4jhQhiPPRECPtMrKVl1So
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
Ar5aDmmdr6UxFUS6jEhTkJhyrFCBUhgSwTA09Rm270/PriH2jOoqWqjZxQm5
BSgW1zkJ60Tlb4snbkpguOc0yzomc/edb5y9vGPybPf4fPvug411Hbbufntv
f57Wgqlu0ujS8GoTATAHHR8tt+2ryoRgvjNXP1yc1mVTgFdf7XzT9mUbtmca
gHFw7FCg2kAxMkMGNB1ZrgIKnsci5jDwoODQBikHWQdFtpGTs+iOQXNEwf/P
ovJ/ncKASDnS8b6GuRWfAIynOcQ9EdTcQsSm0oiZHLqFTlSC+rNwZWZZlVXZ
bDfs7644MdoCoRscOwRzIP3qse1nJxpOjJafm6q/ebzn1sL2cxMNZ/Y1XJ3r
vjrXs7SvZW5v83BP2VBXSV2RvsAqtKfygXGLkqqVkhDMBYwEwBwhHSw6n5HA
oTmknE6IoOEjGMQoFkR1GorPRAtYKVwWRsDFGTTwC2DMzTQ4jnRRcM1impZL
AJBVLKyCgQGoAXaQbygxGQV39HxSqpSRJmNa5HQ1D5ep45akSbrLbJ12Q71R
0Jej6U4Vc/03auK8TvSUvlgcObun4fZ8PwTnm0d3/ec3t0HQwbEjdn3VqJ/9
+u7x7x6c+vHx2c9vHnu2PP3943PPV2ZByj+/uXDn1DgADqQ/XZ4G3/7dk7Pf
P16tJ6f/+Pry37++/R/f3fvHN7cgp0M8f7Vy8Pz+1sN9pUd3lR8fqt5TawPf
Dowb6dGZopQiDa3OJunI1+2sTt/bkj/eXjrSVjyxq/rgUP30cDN4pP39DasH
qZS21eX0tRb2Ntm767M6a209Nbbu6tTOCmN7mb63JhNMe3uZFdS8pTQV2TSm
OFtTkqO3Z+rTTQqVlM+kkpLi44IDg7w9fdb2d3qXU/9/vdZiOGCLMI58/r91
p8NP3/0ja5iDmm/d6urh4enr7ePv5wOYx0aFkrBoLpMg4Tp8GmRzjZRskNMA
85w0YX6OWG1OMRdQcmsEhY3iomZRbh3XXIyXZ8Rq85Kah007pnL2LFQMHysv
6pRJs5LI6jCGBcPLoJirFGXbc2t25Bc12ezVlpI6m8bChcDOkxHpAiyFj6MI
8UQBlshNwBF9o2LeD49zEunC00vxhryYjDKUJt1fafLC0Z1i0E7RGCfXUCeX
SCeaKTanU2XvEXdMZew6XDIwVz1+rHXPdPPhk7smZtuPndxZ12K2l0monFBP
f6fZpuLZpsLhwtTphsJD9QW78gzj5ZlAeqtJ2qgTNhvE3TZ1b4YeMK9V8avk
/4zhQDeYdrgC3chCFbgPdMMVMfMFXErO6gnmJSIW2HWI5MgkGaQLDlm3giCP
/OifK1nwiVZiUjoxEZldY0yJN6agzITkNCpOkRybwaUWyvkVBmmlSZopoRXr
+fCbtjK3a3X35uk3t+eerRy4trAD5Ht2VwHU/O5SQB5M+5XZrvNTLZcOtl8+
suPUoV6I53u6iptLDKXpkvw0gYafAvFcL3FgLmahBXSHaf9XJXDpMWxq1Kpj
jwJ9h8wu4afIRXg+EwPFpaMBc5tJVlGSWVWclWfTZmiEVjnLJKIaBGQoIBp4
B7SVzBQowN8gosIHrEpOqoQF7QwVK0vLskrILdmawUrrSIV1oiajVcewYoMa
VaSLgzUPj/Tdntv+ydmRL2/O/vbp+b+/vQGC/vcvr//2wjF85uhaf3Tqy1vz
r67Mvbkx/2J5+vH5yR8engXMv7l78vWNY3eWxl5eOfz04szdk+Mg8b97ufLL
82UQ9L+9vf2fPz38r1+e/PtXtyCkf3Vn/rOrsy8uTiwf7JruLTrUXbAwVH2w
s7A9T54nw+tokemC5HwlucoiaM5TA+YjbYX7OktG24tGukv29VVODtRDKt83
4MC8r8OBeX9HmYP0xpzt9Znb62zba9N2VJt7K83dlTaQ8uYic2ORqaHY3Fhi
qS9JrS6yWA0CnYIj4BCJuERUbFREWHhocFhIUOi7XL/bQ/6vfVkdMRzJ4PCB
8PDwwHdeiLdHet3/22gaks0B83/ZA/iBr+Msy2A/dHwkDZ+okTrO09TLWUYV
K1XDTjfyslNFYNoz8ljGHAJFEhCCeS8w2Smc+F4s/eNE/mauKSirkWEqJ2gK
k1MrKeZKcloNw1jF4mTi+TlUcS5Tms1UZXMhhuvTeRoLR6wg8iU4Ji+Jwklk
CHE8OYWnovEU+FQbMy+fnV3IaNmur+2RVXRw82rx1T3siXn7qest8xcap07W
tY1l0Y0xSdIgXTU3o4Wb084v7FS0jebtmqqpaEubPrHr4PzOZ28up+dKt25z
2ujmtNXr/f1l2ZOVOdO1hVBTVfZ95TlwZ7wsezDP0pepB0HvTFNWypg5DEwh
j9ioEwO8iFEHW16jFEADFBzRd0ToAXZgHMrRQSdh12kkpTIuMg0GJBuZ8gpc
ry1bQxhHlrcA5iDiSAHpqx1xENIdQu/ou6NhbWAJGNhUekqBlDVUZT9/oG9l
ZjuI+KfXDr68OvXJ8n5oX5hpnx0sOTZStbS/Htoz/SXnp1rPH2q/PNc9vav0
9KGumeG6obZcsJH1+erSdFmGlmOUUvVisk5EUgqIQDqI+CrUMTxGLJ8ZB6Qj
ph3UnE6IhHgOH6DjY8mYSEJS2OroKr2swDo20F1dmJFjkNoUbIuEDiynAu/g
+sSMVDnHpuKD0DsaGgF8JtsotSoFgHmelmcTExoz5adH2vY3ZP2/hL0HWJtn
mu6vOHGjY3DFBmxwofciepWEkJCQECpIqEtIQiB677333ns11TTbuODe7TiO
05zESSbJzCSZMzM7u2fPnmvn/3z6EtY7u3v+up7ru159yDhW9NN932+tEkfm
0bEV7IDZQuGzyeofbox8ebn75UrLZ9d6vn0w+fbB1B9erEKO/pc3O8A72HiI
5xDM//B843ePVr7Ymfnm/jK492drg5DQ//j8yk8vt59vjL3YHH++PvHh1sRH
V6Y+vTH7u8ebv7y6/vuXV//56/u/fHLj8zsXP7s9/8W9+Q+vjj9c6702WXux
I2egLKG/PGGyPm2kJrkqmamM8YtwM+NHuOSISdXp3JYCaUeZqrcyqatCPdiY
0VcPlQWY9zQiqbyqUF1RoCzLQ0x7RY64KltYnRlfk8GtSWfXpMVVpokqM6Sl
qaI8VVxGAgMqRRajFFLVslgeMwIw93Szv2B9Gly0xSlLa+tzu31r724Igy4/
QQfIdl09Os8N3aNVe04a0umOBnEAHeCGF2p3fYdbR9COdrDtBka6JoeNTpw6
csbqlK3tGVenc1gPewjm7GgchwoVxosJF3KIMj4Z2RdOHpWkiaQy7QJJ5icd
Mca2GHMfjJkXxiHCAMc/G8y2cAzXdwjTc8AZOhFNQgS2EXIPe4KFbZiFB9kG
S7b1I9vRhUECBYkvjaCx/Kgx2HgRXqaM5ooIUBwBLoLqEicKCiNZiZNCl683
/u3vT2eulOA4p/KaqJm15KntoiffzD78ZmH5UV/5UGqYwMvE+YMgro1NmKFX
9GlRDqWwNbl5rKpjvKmitcQzyOPIqcPvHcAc0N+vf0hvKC2hN0ncJuc2iVlN
UnZrArdDxe9SC1sUPCAdTHsBkwiYp5GDMighmVRErNGFKiDcOXQitEG7AXAQ
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
mGNnMUanMOnF1JXrLTWdqrwqYedIkSyF7odzuOByUu/YB4ZHDxw03qdraACM
6+kbA+O6esb/GXMjKF0wRjq6qJS3yuLg2p0k6tVI4NqujK/i04F0ABwKAC9g
EsHAA+aANiCMnoQIvh3aQDpcIbOjC9ZQ2NHOdu3UuPCEEC+Bj5M00F0R6g1X
PtYx3tsB7kAJfZ1Ffi5if1e4D4zDK0U+rlIfN4AdZF2gTe48XxeevyvR/jTF
7Twr2C09nlqm5neVZ8x119xcQrZzvLM2eGu1/9pC1+Z0y9pE4waE05nW25cG
oL08Ugs3F4eqe2pSm4oS2svVPVUpo825cz1l873lU12F/Y3pDUXSwlROWgIN
fDuHFogIeqQvheANdFMJvtERAXCFdmSoJ8BOCEJyOrrpBHh1dN77bu+cdkWb
PZ9FyEwSpqt5AiYBUkBkoBOQHuJxBkinBttHB9mDlMdFuucm0LrLExfac25N
1Hy40fv5jdGv70x9cx8pCON/eLHy6c7o53dn/vj66p8+3/nli9t//PTWt882
/vLZjb9+eg0wBx3//Obk23vzL7eGn6z2Plru3pluAsChNgYq51vzhis0PYWK
zjwlijnE877SpN4SNZAOjbWh6p35jo+uTb7cngD5BtLfPFj6/N7Ci+2JJ1sj
OwudSKfHYte1+fYrM9DoWR6uXxiome4qG27J76nN6qxK76rO6KrNAswbKlIb
SjWNZcng1ZuKVa2lqs5KdV2OsCqDV6phab06ssdjjpIBjj1NHp0kpqhFVI08
Nl3FVYqYdFKYv7fr2TOn7GzPOdjbApVGh4wBc2Dc+LCprq4uYG5g8Ovh77uw
o4AbvvNAYQd+UUEHnNE+N7QvDkjfHUNHC35qefqk5Zmj1ueO29tberid93a/
4O9hi0Psug8pwIUa4hEbgY2PDpKw8XIuET4eIm5YgopE4bi6hBrjhdb8Ik9G
tjUj91RcgTk9xRjHf19ZeJ6nsRBlOmY3RVITbAmis/KSkJoRcWk3J6uBnFIZ
7k8zxJIPeEe8X91D++qfZvJbwnROYyJExqvP8jZeFkkLnAjsw8GUQ8EUUzLn
jDTVr7ZT0jGcIVCFWjnosEXhUbEB4SQfKxszzH7MkZOH9up88A7jvxY83b2j
o2uoo6sP72FvkrhDEQ9SDpremSjoUgtB0xvEzLI4CkK6OBbQzo+NQEfTijlI
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
fn4LPSnp+8fLQPqHmwOf35x+vT3+eKXnzlzr9lg9GsxBzdtzJC2ZwvoUQXdB
Imh6nYaPYt5TnAikr/RX3LrYeetix/WZlpsX2zfGahd6S+AKefzJlbHXdxYf
bIwsD9VcGq1/dm32mxfbnz/euLM+sjLWPNtXPdJegnSwV6S2VWc2VWdWlySX
5ymrCxQ1BfLqbH5ZCrssObY0iV6uYZSmMIuSgfQY7V7NtIwERqo8OlFCVooo
oOZqKUfCY1AjkQXmlifNEMZNDhsfMtU1NNincxAwR/qQtJj/Z5BR1Tb8r5jD
TX19XSB917qjpEPtjp6js9l/XcliDqn8jK2tuaO9hZfb+UCsHbJIwds2HGsX
g/eKjwoU0UL4lEA+LVDOwSfw8EJeCEvsG869YBW45xwR4y3WwSbsCUndg0vD
0PM/iM3bHy7FEGV7SApDTu55WaWvG13HBo+xw2HMPDBYqh5ZZMFNdIDojQ3T
CSQYR9BO3X3We+N+R9dQ0sdfL9x81JNfRUkp9OyfjSuoCyKxTV0DMNMrBUsb
DY3tqcaHMZj3MXr6e+FfZ6BnfPiQ2YEPDhkbngDMUZZ/5Vr/INRBA519ege0
pbNfX3e/vj449nYlFzDvUPFBypH5b4IYEHQw7eVcahkPMjgk7hA0mJdyozOp
4WW8GHDp6JRXdL9H9IwGdGMoEHHw82DmQYuFvq7KEG8gXR7oIfV3Q0vk4wyY
870cUNIF3vYo5tCGV0p9XCCbQ6FTXvnIHnH2dLcLoefNGL6O6fFUwLylWNNX
l7c103ttYfDSROvaZMvWdOeV+a7t+d7NmfaVkaa5/qrZnqqx9qKZ7srl0Ya5
3mpkFkd56mBDDtj4gYZMZBvSyuSeGk1bhQqCeVkWD8VcJUY6VMVcIoceCjhD
yo6NCgXASWFIFxzYeGSfAcjpJD9t+dAisdFEbyCdGOqs3WfGzsfNJjwYvgGC
ovCBkWE+pFAfYpBXKNYpxN2G6O8Avp2Jc5fRQ8qS4gaqMy62F14eKvloowMw
vzNXC479s1tjn9we+/mzy798vv33P7/+vz+9/PPbh//20+u/fvfi5a3VG4sD
Xz9c+d2jlY+vjr19sPjmztyD5Z6XV8aerg292BzdmWm71FcBv3OmOXe8Jn2o
PLkf8nKmtK8ktSlDVp3E7y1LGavPHanNnm0rme8q3RhtgLq12PXJrQVAe3sa
6XNbHamDMP7RzvyjrbGlwWowSK/vrrx5vPli5yK8w3P9NYD5dF/1cFtxX2Ne
f0tRa012dZGmNFNWmiEqS+cXa9jg0gsU1PwESqE6GtkxJpmRm0jLUCCYIzou
IiXJokHN4U2OiQrBh/qEBfqGBfm7ODtaWFiAJdc3MIJsjthO7ccV1fFdxlGi
4Q6K+bvZ/F3M3xV07X5xh+GXo+PmcBPqhNkRC0szC8DcxvL82eMXrI+5OZz2
c0ccO6h5uPcFapALj4zsBsAmYTlkH1kcPlEYKRSEcOR+/jHmJ7EYp+i9BM3R
sCQdYsbB6PyD4poT9PSDxIQPyHI9ZpqFrNSDkWHvTtc/HYiJTb2gKPNTFPux
1PaiFM+w6ONRLKvgyKOl9azXbxc//93qtYfdDz+enNuoEqg9cquCxSnWwqRz
idmewSTTK7c7qhsTjI9gdA0gjO83PgT/dB1kYpveISP9Iwf2I+No/4g5CLoB
0kYY1/0V816NqDMZRJxdyadWxFOqBNHlvKiCWHxOdHgJm1wnZjYA+yJWZXxM
FZ9RI2Si+8KhO8lAu1bCrhLGFrLI6VGhGmJgEsEfCkRcFuQR743sxiz28xD6
uPG9XaCQGW7awxrAycd52ENsV4R6I73rfi7abR5dEoI8NYQA+AZgOp2N97QX
+jrHednFYZ3Eod4h1sfpXnZKGq4wIa48VdJZmbUy2nF9cfjB1syja3Mvbi4/
vj5/a3VsdbJttrd2tKN0sLGwtyF3oKEApGe6G/lYtpSklKYJkJmZNcmdlWoA
vLlEWVsoq8wVlWYjpj1bzYRPoJxPBN/OZ4ZxY4LjaMFsGrK3AKAN8h0ZBsLt
jg60xZD9gfRoog9aoOzIZLlQt0Bfp9AgL0KYb7C/e6CvaxQxEDlCxMuOHuGP
97WjhbuLaUFyRmBxYsxIXfp8e/bOdNXt6bJ7s9WPV1pebPZ8vD305d3Z71+s
/9sPT//69sEvX977+Yv7P725/+1H11/sLIJtvrvU8+Hl0Y+vTT7bGn25Pfnl
g0tfPlh/vj2/Pdtza2loe7proacaWO7MVzVlSNryla35SXXZiuoMGVyb8tWt
RZqeyqyRxqLuiszr8wMf3Vy5d2lse7YPyT5rk1dmu1dHG69d7Hm5s/D8+hzE
nFuXRl7dXX124+L9rUloX18ZWZ3sGO0oH2otGW4r7azJ7qnPr8xWFSULchRs
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
LQoeXHtTEyCb96TI2xNFgHmlgFEljIVrtYgJBdkc7Hp+bCQUSnp6VCg0lGFY
jrsNstbMx13g5cL3RFafocX3cgKxhgwOmMsC3OWBbmgpgj2YDqdF3vbKEE9l
mJfQ3yXW/QLN9SzV/RwrwCXIxiwu3KtQxc1N4NRmK2e7a8fbK64vIqkc6IaC
xrXlYfDwoOxg4OeHGsc6K1D3jp7cBwa+qTS5Kk9amimAa3NFclt1KmAOUp6V
zMlJic/W8FKVTIWIIuFFQskFUWIemcfEA93AdQxYd0ogFDTeZRza6NMogg9g
jg/19vNxjKHhmurLxoa7SovTJaJYHhNMAk0eTwY5K00TDDbkLA/VXJ9rfXVt
8NlGx7P1rs9vT/z00eW/vrnzz18/+ue3T//pq6cI5m+f/enLx3/49N53L0HQ
r3z5ZOvDq1M3ZjsuT7Qu9CH//Jur009uXZ4b7Zsc6pkeHuhpb2mpr+lubmyv
r22oKGurq6kpzS/JTS/KTq0symmoLG6qLm2sKoGC+1XFuVB15YX1FUXw08Ks
lByNAr4NBttr54c6F0a6l8Z6ZwfaZ/rbLk0N3lidXZ7oWZsegm+VO5uL11en
1meGgfTh5pK6PAgF8vo8RXESJ1MSVZgYU50ZX5zMyJBGquJCpOxAJURyGSlZ
TlXLo4FxjSRWxCJFhnpjXW0hmJ87Y2F24hgAjm4Qga4ntbS0PG1heezI0XdB
RlmGBzT+2y64/0c2B8xNTEzgF546eczaysLG5rSDrZWTnSXW9QJgHuhhB6RD
Nif4OEQHu8fivEDK6cj0GA9ZHF4lILKoWB4zMDcvbuVGkyw/IJx7LEpxMpSv
607FhMTvj009xUqzzusgpTeQgPGyPuHgen7jWMLYZsGDtxOVg6KAmCMRfIuy
bkbDKL9xhF/Tz2keE09s5NX0S9snMxuHs/MbVPdeXx6c78gu1ADg7+/FnLE+
vef9vSamx4yMju3da3jwoImOjimQrqdnqqd/CJ0VA9INUKPpG5VveIoq+Ht7
PoCbVtbnHJ1c3D28APNmBatFydZquhhSOZh2iOdg2luV8c0JXCC9TSVslHHB
uufSCEA3mHYolHSgHhJ6KikYfDugDVc13i85IgDuAOYgxzwPB667fZybHVx/
W2SKFKg5MA5oQxiX+DmDoKvCPFKIvqpgN6mvAzK87m3Hw9qJQ91zeZS2LMV8
R8Vib81AVc7GeAeo2I3FoS8eXfni8dUHWzPg29F4jgo6iPvGbM/mXC8k9Inu
KhRzUPPWivTGEk1zRQpwjZ4JUp4jrciVFWVJ8tIEmUlxmWpuujpOo2CqJLQE
YbRMQIWSxFOFcUB6BJsezowOjaWGMCgg6EB9YHSkP5XoB1e0gHHI5uHBHkC6
n7eDm5O1gBfT193U3loJmKukbIUwJkkam6FgFyZzO8o1K6N1NxY7BmuUC11Z
T9a7/vTZ9t//1yd//+U1YP6HVzs/fwKO/eEfP3v4h08fQDz/4tHWy9vLT7dn
Hm+MP1gZfnF1bm28vbU8a3m879raQlVRfntT/chAf0NdfWV5xfDgyGD/UEtT
68TIaEVJYVVpYU15cV1laXVZUWVJATTam+rgpkYllwq4yUpZWpJSJRNBZWgS
JXGxRZnJTRX5vc1VUwPtE32t470tl2ZHrq7MLE70LY/3A93rMyNwXRztHWyt
nO2tK00VZUhiarJlHWXJTQXykmRmmjAiS0YCx57Mxyl4oQpeOGTbFEVMupqj
4kcniWLFbAo5zNff09Hdxdb+wllLi1NAK7prKzpx3dzc/Mxpi5Nmx9G568is
F7ST7bfHPwym/0q6vs7/I5sja9xMD584fvi05UnA3NnhHPw/AjX3dj6LdTrr
53oBMCf6OQHmMWEeTLwXi+DNJmGlHJx2FnRgPCtIkxINmFcPChKKfDmpF3BC
I5/Y9wgyI3GxYyjflKI8axPy3ln/9ygSu6ZxVe2gePF2zdaLrspBCV3lIMzF
qkoDRDlu6lJ/WZ5nWjW+pIO1cKN+YKG0uDlx9ebUq2+eUuPI+/X2GZscOnrs
xJ739x89dgq029DwqL7+0QMHDh08aKxdnGIMXCM5XZvRD+rqoBkc1BwN6YA/
tOE3AODBIWG+fgEOjs6lccRCJq6EE1EvjQG6u1NEAPtAphwiOZA+mKnsT08A
zMGxl3KokNDBpVfwY4BuEHGw66DgoN2qcB+I4UA3JHQ0kgPsgDmEbokf4tVB
vqEAc2SfN6wTFDptBgowB7suxDooQ90zIv1TcVgx1i7e/YI00FUe6sHzd2T7
O/HDPUVkP+TQtIbCK9M933648+LG0uu768+uLeysjKK9cFAg5UA32HXI5mg3
O3rKNth1ABykHOJ5fYm64f+j6z2DGsv2bE+q0ieQeJLEe++dhISEkzACSUgI
ee8dwnvvvXdJAukzSe99lvfu1r11ve3b0z09HTEvesyLmE/zYWYdnSpevY6+
xIoTW4cDKUh+e63/PvvsPeaC0Jgdsk/128b6LKO9ZjDe5pA1W39cZdRhFFl0
AqMabs6H9EqeRob0XnmIORoiXqmwjgnS+TV0blVRTUVBZWluDbuIVZoPQ5c0
VA/0thxc3717e39xfnhxdmigyz7a61ye6kSfc29/7tNnl754tvfN8/NfPd34
xavdP3xy8Pevn/zzty/+l+9e/+v37//16zd/+wb2/f4///LDv3335vefE8Pd
nz298ss3t796evWj+xdf3Ny+sb2EpL02Nw3GJ8bG9/Yuzs8D9JVXL9978fzN
1SsHb15/sLN9fn/vwuW93Y311fHhoY721v7urqnJ8cXZmWaXs9lhn52Zmp+e
0mnVVRXlNezySibdpJb2tzUtTgyjBNhdmVudGtlfW7i6vXr1/PKd/c2DC2v7
KzOX1+evbS3tLk1eW5+Y6NT3WsWjLcpBR2OHnoPCfNDR0G+vH3AK++yCZkOt
SVYBTIzKKruh3qkVthjkJoWQx2bS84nCPC4qMoCYmUYsJXFYmwNbfz8f4E8+
kgbYSdJJQwfmPx+O+x+kEzH2v8Y8PDySWBnSPyA4yA+5PTk5OjcrmZKXXEbL
ZhSkAnN6ThLp5tXUNHZBYiO7QFFLV/DoOnE53NykqgTmel35wnnrwmVD5zxH
aI8ulhxnyI8Lm8Oa5mi6wTzTCKNIEJBX60fjBw+uybrm+OfvtV59Ody1JKIJ
g4WO1LZZtn2U3j7HGt7gazryeheFX//l9uiqfffO4mc/vF8pZHkc9TjheTo0
LOrYcUQWX8jbO+jIEU8Y+slTCOTuR02JxWDOIJ5DbqxPk6GdrMQhtPGDV1bV
MEvKsrJzY2LjI6Nilq2S863a3Q6D+56aEm4O2GHoc3oxRN43R0m+YlWTAuCg
G64NtMEyHJzcQhG5HfW4kZmnKcokb4KTQ+gI7cSUNlqee25bLmSgZukKM1CD
W5m5JnoWvNtcnImjjpKiykuwM3NaKqngXUVNFuZES+kphhrqRJNiskXz5NLS
3797+3/87Vt43L/99rPff/rss6fXXt/eQVyHiZOkH47CXd2c2F0aXJ/qXB5r
XRxpBuBjncaBZvVgm3agldi3a7TLODlonxp0jvVaB9r1LTZZq13e5lC0OhQt
dmWTReYwSWyGRr2mXqfmQ2hAGiVX2lgp5JeKBOUCXkltdRGrLLeMmVVZkV/P
ZeJTIl45t4rewGfVVTNcDv2NqzvQ5YtrV/bXLmzM7KxOHFxcfvPg4ldvb/3u
i6d//+Wrzx+ff31j7t9+ePHvv3nzw/s3/vbV07999fIvX73+9tXtHz549Oev
X0N//PIleP/jl88/fnTxg7sXnl1Z++zJ9UdXN8HahdW565f27GaT1Wy7fu3W
9Mzi/NL63v7V4ZHJq1fv3Ln9cGdnd29vb6Cvf2xsbGZqenx83Kg3tLa2qpUq
p9O5ub7BYDC4tXWlpaUJcfH5uXnZacmU3Mzc1CQJv85lNuys4J9Y2FyY3Ftf
uLqzhvIfurmzCsavby8fXFi9u7sAzAccsm6zEIm9z1oP0nss3E5D7ZCr0aWu
QmFulrOk9XSnUWDV8c1yXq/TaFU3NtaxFSIeq6wYmEeEhUdHx5454wt4Abt7
Tgvw9jt54hhZrYeFhQF2YlzuxAmS8Z9PlTl0dm8fL+K28pmTaBCkox4nlpkK
IfdEJYoC4rU/cjswL8xLZ9KymJSMCno2JSOumpmP2pyaGsEvyYWbq7gMlOfS
WqpdU4vaXNFQrJGVmU2VfEVagyXVNVGh7sxIq/QQt8fAys2TFPNEcUC2Ryrr
BNeYvnrT9fr7TYEpFYauaqMV8gIz2Kdg9FxzvGGAOnpBPLguVHcUajsZu/dG
LtyZ+ui7Zz6hxNMoZyPCPH18vc/4Qz89aPbjmNvRYyfg8oHBQac8jx8/SdxD
h46f8njnyLth4ZE+vv4owwE4Cnl4t9FkwRFKz8iiFtFrOHWXe607bTrAvmhu
BODwcZA+rRVMqYUzWhEwd4sgfbPJsNtuIzdBBteI5RAw7+SzUI8DeXKiy+ET
Z0AeL3+coO7G3FKcBxHz3IoywLi5ONtISwfgFkYWhAZ8HJi7ygu66ph2doGZ
nW+tLXIISqda1Remu17f2vr1xw9/++njX32I49PfffL0+/fv//mbN7/98sX3
Hz/6/NUBYAfjt/fmr29PgXHEdXg6eQMdvAPzDou410WsW9JuFXfYJHDwnmZ1
p1PRapeCcZDuskqdZikAtxvFpEjGIYNWYNI3gHSVvBY4czl0fh0DpINuXm3x
4ctSWiaDkgY3ryyn2C1q1OZ3b126d/vy/PTA8vzI3tbc3WtbLx/sf/Lyxg+f
Pf3nH9771Qc3X95c+OLJzm8/ufNPXz/7j798+X/97fv/+PO3//3vP/z9uw/+
+s17//LDx8D8u7d3v3p54/NnV18dbL+8sf3k6ua1zYWJ3naU2BNDQ3KpzGyy
iyXK5ubuucUNo8V1+95Trda6uLTe2dFbVVXT2dm9vLw6NDQyPDyq0eiam1ud
Tldvb7/L1ZKfX1hWVpGbmw8V5OVnpqYU5sJj42kFuSW0wg6nDeX8/Njgxc2l
K+dXb+5uIsaDcfQwl9bmLm/M3Do/M9qm6rE0tGhrHLKyZhXbpaoA5oB9wEmc
bDXxnZo6tbjMrucblBxYuV3VKOVWiWorRXU1lLxsVOboYcA4MntGRkZ2NjFP
xs/PB4k9jlgOIjI2NjYmJgZ5nlwMCowfP378H2FO3Fn2OXWIecCPC8qFkJjD
zQMDfJDbExMjgXkZI5dY/I2SzsxPrSkp4BTnlOYmILSruEwRK1/NY6oFTDmf
rhTQdbJyg4qt1ZTKTAUja9LmiYpSiU+VPkjenVRjDelYr1IPFFYZ45Wd9JFt
zevvt15/t8nTJFPr/BQtlAy2Z2ShB1XgyzHEGgZozTNV9jGWdZA9sKL59DcP
hhZbYjPCwXhSRprHO0fdjPu6Mf/xsRRS+CGOnzyGmt3H39PH/9Sxkx4nPT1C
wvwjoyMA+JGjx3HNudBwoM2p5QLtiMjoY8dPNojEFazK6Jg40A0rv9Jng5uT
U+CWrbIL7cYxOW9CWQ8NiTndfDY0JK4j5sLpxAjtI3I+TLy3oRoinZ1YEcLN
NUTeUAPsxBPlhRmQtiBdT8k0FmVDYFxHSbMwcsD1T5hn2EqyICsz01mWY2Vk
NLMLnFUFTi7dzi+2ChmT7arVEeejKwvfvX/n158++v79u9+8Pvj00aWXNzfu
7s7Du+9dWrqzv4CsDsDB9ZWNcWCOxI56fGW8DYKhz/Tbx7tMg626bpeqzSZt
sYjbbPIOB7K6grBym9JllbsdXGLWiyGLQWI1SvVq4c+lVdYrpXVSUTUKcH5t
iaieJRZWNgrYDfwKAbcMkgjY4nqWQlIna+R0tFqvXzn/6NHN58/vwtPvHuy9
fHzj07cPvv7o8fefPPnNVy/+8v3bf/vdB//y69f/9N2z//aXz/7vv3+LrPL/
/u9//v/+4+//599++NOXr3/7yTMcf/PJk2/f3Pn2za2vX9366NGVz17cvXVh
dW1ysNmsGxvs7Wprt1sd9XxRdQ2Pz5c8efIGsD98+LKne3h4aOLG9dvDQ+NI
70ODY+gKlpfWHfZmV1ObuFGOY3lZZWkJq662viC/iMkoT0/PzMrIpFIKstNT
MlISw0OC6murpkb7x/o7V2ZHN+Yndpan9tfnLm8tXtlevL69dP38An7/XRah
Qci0SEp7zLzJdgUYb9VWtqgru8xcYN5uEbQY6g2KarOqTiWuVAtq2kwadQM/
KzEmNTYalUI1i52UkJidnZuYmJyYmAio/f19UYgH+J+BoYPNw/2OyQ/YPQz9
H2FOhnaAAsxRsRKkuyfDhYaGk5jj24acDYiPDy/ITQPmJdTM4vwUME6Ino3a
nMfM0daXoTZ3L+Bf2sgpVDcwgLlWXg43d3ZWjm8qFC1Z8XQPoTNW3pXCVPnI
ejNL1KHmMfbYrv7628n3frW7cMlq6GBwlLFUrn9axYlU1rFyZUQ2x7OxOVfb
WyJpKWLJ07pndSIDy/PsO2D8uOeJY6e8goLDCMZ9zpDVNzmrza0fZ/cRQ+ne
xz3PHIOVe/kcP+l59LSXJzCPT0hCDU6jMyAWuwq8I6uXllWwK6sTk1LQXrFJ
SZHTY8j75sStc6d23aEhZ8igKh+WcHGcVDUMy3gQSnJyMgyEkhxQ2yqoJOnk
s+Tk/FVVQRoAJ0ViDis30jLdbp4NB0dch0jM7aXZYLylPM9ATTYXp+uYabry
bGVFloZTMNGhur458vzm6gcP917f2X52bfXVweb7d3be3N6+v7/46Nrayzs7
5K20+5eRJGevbU1eXB2Bg090m/tg2Q454joYRyU+2mlCRIeJw8q7XRqo06Xu
aFIhqANzp1luN0oB+KEMmgbQrVMJNAo+AJc11gBqIa8cRwiYkwLsYF8u5shF
1YrGGqmoBrldp24cGexYXp7c3JyfnuhfmB3Z3V549uDqd5+9/OtvPvvXP3z5
r3/87PdfPvrv//ItYP/333/yr7/+CET/8/cf/eXrt7/+6Nkv3j785tWdr1/e
/sV79/7yzZs/fPHswwcXt2YG7+xv7C1P97fYDQqpUaNklZYx6EyzyTE4NC6T
6R49fLkwv763e+WbL79//83Hmxs7W5sXbh3co1KKK9mcwYFRjdrQ3tbNZtVI
Jcr0tOyaai63TlBML6UVMZOSUjIzM/Nys3Oy0/PzskKDA2iU3NGBrv6ulqnh
7pnR7qXJge3F8Ysbc9d2lm/urNzYmb99YbrDxDOKGA5FOUrymS51h6HGIi52
KVkt2qpmNafFyGsxCC2aOr2sWt5Q0ayX2xRSvaRByqurr8YvrcGk0+u1Oja7
KiUljdxbgXwYHDB6nj6O0E4+YH64xwr5sPk/wpwg3c/zEHOImE/nHwg3J755
UHBQoC++c0zMueyMRDolvbqMgtqcx6IRKzbTsgQVhZWFKcR287V0o4iF0C7j
0ayqKgmfKqjNa3Jyp5a1+lYqXx9L4Z2UtCbpRwtkvRnZ9SeimB6Zdb5sbcrk
nvXg7ZTcUVAtic6v9EotfTep1KNMES5tK8ir82dKIpUdpY4xkX1YmlMe6+FN
rMiKKgPv88RJb2LtFxJzovr2do+zeZFDbUeOvevr7xN01h+kI7ejvjntdcLj
HQ90Y3Hxidk5eQWF1NS0jLT0TBh6bl4BSOfXC5NT0vwDgsC+m27pulMBNyfn
v4FxwL5qU4FxFOZLZvmqTbNm1yK3LxjlAByJHUEddJMzWgE4ynA7qwiYkw5O
zmpTUdKBOSpxo1tmWo6NkWtn5uFoLc5BOCcEE2dmwr4hNPCyqSQbmJuYGcBc
U5qurMgw8mlLQ5bdhe7HN5a/eu/mrz6+Byt//96Fezsze7M9F5eGkMnBNYn2
1mwPivG5QSesnJwCB9KHWrW9TkWnVdJmaexzqYF2VxMwV3c2aaF2h7rNrnJZ
lc02VZNbTqvKblZYjTKzXqLTCLVqgUZVr5RzZRKOWFQlErIbBKzDM5LGaqm4
RiGrUyv56BDUUo5BRXQIMHSDVtLZZpuZGVlenr569fylvfULW/O7m7MHl9be
e37jN9+8/dc/fvHnb1/8P//bL//2PTGQ/uevX/79+w/+25++/cPnr3/48OmX
z29/8ujqxw+vfPPy1h8/JyauP7m89smzu6/uH2zNT5YX5VOyMhgUSkVJqVQs
y8kubBTJW1u65meWVxY3drb3psdm1hbXr189mJ9bnpyYlYgVRoNV1CCFg8PW
G0Uy0J2SnAH8szLzKIX0tNQs5Pb09PTExPiExJhCSm50VGhKclxvV/NAd+vs
WN/ceO/y1ODGwuiFFXj69MW1qf3V0ZvbExOd6iGXpN3AMYuKDUKqmpsHzJHe
m1SsNh232cAF5ijMDfIarbRWwmGp+HVtFtNQR7tFrSlnMpLjE4IDiVEyHx8/
coNycmX1cyEoz30ON1w4XKX5cOz9v8QclBxijooV8oOn+wWQu6ATS8GFBEKR
kcEpiVG5mXE15VRgXltGKS1MB+biajq7IJlDSxOW52rrSyUcipRbZJKzRHUF
tewMk5Hd1lfLqAuolIYKrPGS9hRpd5q8LyuY4hGQ55HEOq3uZW0/7N992Mfg
hSTkeyQVepSKg8MLPGiiAGVXkbiVxpQlqro53YsWjqrkaIDHqaATIbGh7xw7
ftrTNy421cPjxE+h3ZfosH7EnBAiydHjx5DDkU/wQyGloxJPSk4F14AasTwz
KyfkXFhWdm5UdCxeSmUKBrMUiT347DlcA8wR2m8O/7gv6pSmft7YuN2im1QJ
kNtHZVw05vRSaFwhGBBxyLkxsHJg7qykoyQH5qR9k6vBkENwENp6WjYR2gvS
IQMl00zLstCzcTRSM2yMbEdJLuzbUZoNwC3F6WZ6Go5WWpqJltpUWeCoLnDw
aS2Ssh5z/eXVvg+f7n/26uqnL6+8fbjz4mDj+fW1V9fWnl1Zubwygnx+fr4P
XO8s9KMNXVgcmB1wkEJWB+nDbTpyYfAuuxJBHep0qjqcGpJxCIy32NXNDg3k
smtAus0ktxikGpUAmEOgGCxDoJsgWttA9gA4GhC+dCLypURQAdKR4Qlzl/C0
KlF7u6Ory2UwyCYm+h7ev/LNF29+/6vP/vrbL//lT9/8+1++/fbD2//0yze/
/Og+fqgH+4vg+q/ffPC7T1/+6cu379+99PzaNjD/4un1Tx5efu/2eWB+fn5s
a3FqY36qgk4tysvLychMTU4rotD0OnNXZ7/T1qJT6pvtLVsrG00Wx/72rkal
z80pZBSXKeSaBqGETivh8xrg42C8sIAGzFNTMqOj4tFOiE8pLKRmZGUmJMWH
R4RkZqUmxEeBdGA+OdY7MdI5O9azPD2wsTC8szy+tz5xaX3y8sbEg0tzM716
lOFOZQUAV9Xl4uhUEEU6/L3bLGw1ClqNDa1WiVnFs+lEzXplh9mkaWig52Sn
xcZlpaVnp2XFxyaEh0fCq8ndD4k1ZLxO+/t5E/L3J9dpB9fkyNvh8+b/yM0R
2knef465e1p7SHgouoxg92ycwMS48MzUKIR2ZmEai5YNzFGbS2qK+SW5NUWp
HFqqRVJlllVK6qgI7VppmVxULJfRuI2JpfzgWlWUsZ9iHClkm0KZ2uCEynfO
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
I5Z4ohPLRJgYOcbibENxhq4oQ0NNAeD24iwnM6cJER3FeHEG4dfUFMhGTwPU
zpJ0NKz0ZDuoL0k3FyWaaEmt1YXGssxWIbNLVXN+vO3W9uT9/cXnt7Y/eHDx
/fv7b+9ceHN7+82NDYT2+3tzj68uP72++ujK0oNLC9D9i8S40OZU+/JI00yv
ebxDN9qmGWvXTnTqxzqNQ53GvnZdd4u63alstcsJOVRtTgJ2qKPF1OYyuRx6
m1ll0iv0GrHNpjGY5Gq1SKESqlQNKo0IR7lSoFQKcQZHnNFqxRqdGNfgpUwm
kEvqpY08cC2XCw16lavJ2tXZMjjQjSMC/P7+5uefvP31L7/6+19/99c//uKH
b99++dH9T94cfPH+vV98/Pjrtw8+fHz95e29j54cfPHq/h+/+fCvv/rsq/ce
vXpw9b0nNz96df/GxfNri7O3r19ZnJksZ9AqGIzc9PQSenFWSlpGUkp6YnJa
QhKUEpeQFBOXEBUTF0XMGo2NjkuIA87EuuQRYZFh50JBN85HRUQTa6iER+GI
a1CUp6WkJiXGx8VGR0WGRoSHeJ48MtDbMTrUPTM5tDg3ur48tbk6tbU2fX5j
Znd7/sru4sWt8V6XXNdYoqkvUtQSid3WSGuSldrFTJukrEXHU9aXmlTCzlar
TMyXNtYrpY1Oq0WvVjUK6itKmFRKQVUlq5JdkZSQGBMdGRkRFhTo7+V5Kjgo
ICI8NCjwfyzRDEjJTczRD5CeTk6b+fkDLCTvh4tKkc+rupeP83PX9T7EAnFn
/QODfIOCfaNjwrIz4ovykspoqXXlhcIamphTLKllyOqK3VvdAXC2trFC0VCq
lrGl4hIBn1ovyhJoYnKrPCpkZ8rlvikVHhShJ0MRlM330g6V9m4rFN3F7QvC
7uVGoSWz3piSWXIqJvPd5d3Ohe3O0tqM0wEeHkc9vAO9Tvl4Hjvtfez0GR//
sxA59cXXJ9ATnZNv4ImTXgGBITgD2EPDoo4eO+XxzrGQc5GJSelyhTYnl5KU
lJWSkpOamltaVpmbR2GWVFCLGBmZuRKp8oxPQCGFnpySkZiUlp6Rk5dPrayq
RQP1+JJFOmcQoSR3z2slRteR1bdcRvj4gKgOdHfxKjvqWO21xOYLLbXlrjpC
Tk6po5JhITY/JR40U1PTQLqelgnGjYxMAnNamp6aCuMmMXcri8TcUpQKwF2l
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
mCO0ozxfmGxvMgnVDSV6calRxICQ1aEmZbVTxRGwCxQNlZIGDp2aV8upVChk
TocNpIPr9raWocF+nVaNuK6QS2Hi9XyuXqcRCviweBTmqNPPEZsUB5GbppH7
K5G2fgg7OSJHPtVCevfpn32QK0Merv1ILPYY6INODkeQfjbEPzo6mEFJA+Ys
enpteV5DVRFIF7DyuaXZDVUUGLpMwJQKmCTmCO1yLdPYxsitOl5Qd9IxVty9
Wl3UcEroihvc4Xeu1Kayjgxuym5/NLd9Z3D79vjWjQlTm/Sdkx6nvd8NPud7
7MS7xBL0xAqtx7y8AoOCIk6e9D9xwue0py9cG797uPm5sNDQsAgAHhEZC0iR
yRHCYccwcSCMM2S5DXjFEkVVdR1Ognok8yIakyQaVg7e0TOgE8D11TVcRH2c
h4kjt6/Y5DM6YgUJWPmEsn6aWKdd3M1nW0upZmYhGAfpjgq6razI7t7YFFau
oREbE4N0HT0bmINuUkR57sacmN5Gz7T9JDfpBOCAHeqoLGxnF7Sxc0m1snLI
9N7MyrGVpgNzNT3ZyWd0Kbk74523tqdvbk0D83uXlg8uEM9ZX1+buL46dnV1
9MrG+OXNcXC9tzoM7a+NnF/sX5lsX53qmB9xTfRahtp1YJwA3CFrs0tabBJU
5S12ORI7MO9s1nUQI2/GrjZLZ6u5rdnc0mRsshuIxG7Smowak1ltMCrVGolU
JgDgAiGHJB0Nfn01j18FAXa8hNAQCupQjJOGDh/HEQFeIhYgtMukDWjbrAZ8
W7THRgfu3bv6+cfPnz2+/Pju7vsvbn708tbTO7sPr20/v73/4vblT57f++HL
93/x6esX968/vHXx2aMbzx4dHFzfh5vfvHrp5dNHOpU8yO8M4jpp5YAdERD1
ODCHJZw8euzEkaPHjhw95bYHsAxDdw/BhYNxhHYEdWCOxvGjx46+e+QkCkJi
P2xPGHpk6LmYiPCws4FMGgWMT08Mr6/Mri3PrC1PbawShTkwx3FrbWqk12LV
EtvPNev5rXquU8m2SVnGhpJWPd8oqeSyCoScEgGXxWRQazhsjUYFrru7OmDo
VZWs0hIGoMaZWk41rYiSkpwIZWWmI72jKg85GwRDJ8M5eQeNvGlOjsa712sl
nk8nMScZh+n/V7mdqMrJ/Y5BN9wcAunAPDIyEKG9hJpcyciEmwsrqSAdmMPN
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
kpyQUwu5s7rOYtGYzWoAjmhthaHbDA6n2WjSaHUAHLaOCl2iUIpVaqlEKiQl
lghEjXxhA37twJxD3j5DJgfmpBDU4eM4KuSNiO4QSMc/4XSYXS6z065aWhi8
dWPr4e3dhwd7B5c2bu6tEeu0HFwc7XYZ5YKF8b79raWttdkbV84TgXl7+c7t
69tbawc3rz64f9vVZMvJzvQ8fRIGDddG6vbxPgMTJzFHYkcLVu7eZucULBKM
gyO4ZEJ8bGICaA5H25uYWUqEZNTC54KCYyIi87Iy4eZVFaXjwwNT40PkENzY
cM/ywjjcfHF+eGd7fndncWKkw2lqUIsr4HrSeoZZTayWKa0rrqClgPEKeiab
mc/jlElEXPyKOJzq0vIS1OYOu5VTU9UgrLfbLOLGBm4dB7U5zB3pvZJdgdyO
t4FkgvdD2PpPmx3/3M1xJj4+PjY2FhU6MD/c9/zHnY/d5n5Iuhe6OG9PYI6j
95lTwJwchfMP8A4K8kyODc5OOVdelCpAnV1VVFeaC8YN4kpuWQ4MHT9XfU0h
r6aAW1sIN6/mZsnNzKvPxvRdZfWmVHl7bmKJB0sTsnCg1fZSVZ30vkVNdklk
BZ/uG+Lt8Y4HyudiRnlySmZ+AY3DEVZX13M4IpnMoFJZamoENFp5bFwyam2B
UBwdE0esORty1tcvAA4eGHQOSR4Uow3LRlAH7ACWx2/A9wTa8Gjydjn6BCR5
cI1kDvsur6hCA70KugV8Cg1cg27kfKuenB4zrRUMiTk99axufgWOfcLqjrpy
VyUTJTkpsk5HaEdJLslJxlFDyVLmp8tzk5X5qQTjRRnklHUDJVWbnwTpC1Ng
4uTdNBzJMXaEdldpTkt5blNJFtCGSMxxtMHZK3J1tBQDM9PFK2mX1PTqRduT
3W/vX761t7K3MnF+YeTC0tjaRPdMX9OFuf7nBxc254e3l8curE3ubUxDF7dm
r15YvLG/srU0ujLTPz3cNtxt728397QYiKdUmjRtzVoIWR1qcWqbHZomt1pd
JpfL2NRkIuS0gEFgbrbo9QYV0JbJRaAbAteNYvi4AGeksoafM05iTlbiIJ30
cfLmGtgH46Bbr1PiqNMqkBOQGZxOY2e7eQVZ5fLqzWsbNy9v7K7PLE30QRN9
reO9LUOdztW5kfnpoZGB9q31uZ2t5eGh3hvXL8HNYeV379xcXJgBL2AZCBN7
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
cku1k+6P/4Q5rByM/4R5EDDnVVEqi7NBenlhcj2rUFRN5ZblCCsL68qyaiuy
BRwKr6agqjy9ip3JFWSbOv5/vt46yrH7zvbtSWI3dxcziZmZWVUqlYqZpJJK
WIJi7KpmZmbbDW67227HzI4ZYjuGOHYcOwxOJpOZN5lZd7331rt/vH30a+t2
kpvb67tOfjpSQTv9OXvvH5r60xJfkOOfMp97ZPntnz5x47mzHSFP50gr1bvO
pbF4XCi1TKoS8KWVFbW1dXRwzRPwBSIhfsni0iIGHmRMRh2dVlRSLJMrqcMb
KRsP1y0rKq4AqhWV1bhDZ7BIDCeLUPA0AMi4bzTZyIAaQj0sPQrIkzlyRO7x
oMCVTIvV6kxwAtD3bZ3elXYPqS2t9VMNlphJDZkmebxfKUCB8eHstLcBFXy7
2I87ch4qoBQE1SIwHlQLhiWsETk3oubHtEJUXCdK6IVJozikYo2q2VEtN2EQ
AOoMYDeJkwZhQidImyQTVvmEjXoOJIyiiEEQNPAXel0Rr/rMlrFbJ7ffd3DL
hy/f/s1n7zx769KDF48+9/2rV84f2jqX2L08fuH4jltXTrz4+PUbD5y6fP7w
+dMHLiCnnzxw7ODuwwd2Hju85+C+nft2byP9w3P4x5mJQLgBy+RkAqRk0nGq
qw2ROUENjqOAMypO3aEqO2hOVSQWhme9k9MDQ6QoMx8KkMJboXAwHKU+GaXG
4Ebw3chDIzRKOQR4bLQRqHEfP3p2bmJxCZl6Bo3JqbFduxYXFlJbtkzimhrz
z0xFkT6mx8PRUO9Qn6+92R7yd8xNRXFtbbIOD7a2tDZ2dLV293bg6vU1OFxW
EEQKiokyWYwaHbXXE5PNqq2tptdW0GpKaVUl9NoyVl0Fm1HFplUyaRVcRrWQ
R1dJ+QatzG7S1DtNzR5Hu6/epdfa1Epc2+sdQ+3Nod726HBPanQAOSI52hca
avP3+YZ7m/o6XF6XxqQROIxylYxr1MisJrVBq3DZTfVuu1wm0moUBoPObre6
XC6TySSXy5VKpdFodDhsLS0+P6Q8Gg4GA+3trRYL3pUyGDSxWIhHlkwmodPr
yEg4sKaCN9WhgCS+KavvArGIh5SxaeNaMkxWUlZagchRXZNfUr5uEzVb/+4B
NaLmqLVrV+Pz69bfi4KgA/NNm9cC83qrurPR7LVpXAZJq1vf7FK7TcIWNzVi
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
wcDvBun7dq/s2Dq7uDgO3cxSBiWdmpmdmJrOgHRSkHUU9B2FiA2tz4yPoZLp
sbFUIpGMxxJRYuCJcOfQzvn2rMqPZJ8VYVQO87FkBKRPTqUg30tbZomOz8yO
A/NlSsrT8/NpML6wkJmdTczNjc3PJiYyoYXsKP+25fTCbDQSaI+HuibGhmDd
/YMdvV1Nbc31vkZHk8fucVscVp1Jr4BnJmUza5w2Pe77Gl0tTa6eVvdgd2Og
vxmFBmmH/R3Rka54qCcZ6U9FB0hl4kMT8eHxSH862B0faovgY32+0d6mEK79
rWC8y2dv85h9Lj3othvFNoPEaVIAcyGHwWHUiXhsIZeFq9Gga/Z5OWwmis/n
KxRw7wYArtfDcmgaGtw+nxfyDdhh6cE4EXen065QyGpqqohXr6qqQIHukrJi
RFW0Id9lxXmMuko8VoA5Ggx6Nax+HWJJZXVBSemG/KJ1mwtyan7XmWv/J9Nu
UgpUAppNI4Kg2zQCt0kMNW9yyD02cYdX29dmBOZaaTnUvL1REQrY9h4NPPXa
wRtP7pjY0ja+2LP/xIxcz1p1z6o6Vg1PzC8qKy0sLWNyBTV0Fn6l9ZvzINYA
HC4dzx/INxjHHVC/Zu16YA6lhtBDynl8IUj/3j2rEdvLKsoR5CUyqUKlxEt8
Eu+CdHwYAZxMdYOsl5ZVI9FDx+HJyWYywBlaD7Rd7sZ7V68fGAz4A6N4AiCt
Q8dRE07zmFkb0sr8ShEYR4NMdQPsvXIeWXBKuXc5jzroUC1CPPdTjp3arJVU
SMUF5gjj6awPh0aDdETyjI1aYZqxisdtSOIS+PaMQQTSkc3HsuGdSuV66lil
oJbvNwjCjZoD0/43bl946NTO79935J0Xbn7/yqmvPnnrjecffevl7//w9aff
fOmxJ29eePj+I7evHP/+jdPXLx19+OqpR29cePjK2cvnj507efjsiSPnTh49
dezw6eNHTp44fPzYwcOHd+/du7xt2+zyMpWICeBQcFh3gAyi/7FAOql/xJyg
jaieq7tIH4n/Td6/wzgKUg66wTh0fHomQ15uwe8zm4bHAOZ4BIFxCPrk+Ggm
NQLMt8wn9+6aWVlKJiO90+nAtsXkVGpkZiKSTvhjowPRUH8iMjQWHY4E+0aG
OsMjvSF/NxqBwQ5c0cb9RKgvONgcG2lLhrsSoY5ooDXib4kH29PRHrzEzUys
dzzeRzbLIqfIJUZaE8MA3BPodA52OP3d9aF+b2SwFUa9w2uGlDe59U6z3KDi
6eRck1qIVK6UCEC3VMiTCLh8NgN23eVEPJegVCo4cxscO+x6IBDA1eVC0jBC
uxHDwTiuEomIw2GhjWxeR608LSE7u5J+NjRwh4z4A/PaqlIuo5rPqaurLoOg
U7veMOogiBU1tfDJZVW11Enfdx2FTAbUoOr/DHMD8ouIUW9StLqNwNym5UHQ
2xqoRStZ3y6zahlOI8vrEDa7Jcl449Ri8/S25qmtbbEp7/aD8d1Hptbmrapm
lBaVF0qU0loGvbK2rprG3FRQDLyLyyvWrd+IXw8go0Ei9tp1G/LyC6HyaKPA
Lx4Cao0On6E+WVNdXVsjlkqg4zKFHIIOx26x2vEoQzaHcGf762TZ4TYGjy/B
HRSiPYy6wWglw3NA2+ny2B31eCaQHaXg0gE4rlG9EnSPqCXZoXAZHDt8e4+E
A9hh3f06KWAH9WSU/B8wFxDMAXjGIqM02iCiNF3HI/tFUIzbpVN2GUU60Nbx
w0o25e111KbN1CGJas6git2vZk90Oz77wSO3L+x/88mrbz51/dTeudefuXn9
wpFXnnronR888cl7L7358qO3rhy7cfnQ7avHHrx84ObVE7eun7l1/dyNB05d
u//U1ftO33/hzIXTx5HNUYcg6wd279u7Y/fu5e3bF7Ztm7/btBM1z/l2EtiB
NmQdtJKEDrpR8bEYadwdyQnvBPlve+SGs6E+QDrciF2fmEyiwDUUPPuQGc/2
D6Sygj45M5NaWZmGlE9NxRHM5+eT05ORuayUryymd22f3LKQmMmMLM/Fdy5n
Fqcjy5D7ychMMjSdDs5nIlQ7FRxPDI+FeqHO8ZFuyHQs0IVrItiTCHbFg61j
o23pCKBuHwu1xkaacU1FOnDF/VS4HfcTwRbcj2crFW5Nh1riw43+TntPi7Gn
2dTbYu5ptiCMUzug2tX1VrVVJ1FLOAohUyvjSfgI/hTgCgmV0OHbgTnpMNeo
lVKpVCJBDNdYs38g6xDxzs727u5O+HY4dpLHqc0os1tSAvOKirJcNkeDHM1A
SXlpYXVFMaSbQ68C6RxmLZNWVVWZ7X2nFrqUl1TWwCdnj135m3FzMgvun2Gu
FjGBOUx7k13r0IlMSha1sK5Bg787SPfYhFBzSLnHxneZ2LHR+mDcwpZ/z9XK
nt8xNL89qLFwCsrX0rk1hWUFbD4Pv0ZVHQ2OvRj/y2QB842bqINZ4TFAK8I1
uAbvCOOEbjykYNTRVqo0xNLjccYT8EUSMSxAZXUVEjqk3GpzwNIjuYNiyDcR
9No6Vh2NjdxdUlpJhtvIKHyTr620rIrF5kPEuTwRHgigPmU3xM2aUZ0cIj6s
EMKxg2sATup/DZSrRETfR3XSEY3Ar+Khvt16XQjMqWCuF0CdUWNGYcIgQDCn
xsvMSOhUFxzVC2cUJA18MB7TcGMaHvJ7RMsLajh+FcX4oIYzoOedWoy/euvs
Sw+ffezy4ZvnDwDzY7vmzx7e/sk7L3789guff/jK2y/ffvjSoSundz90Yf+l
41uvXzx0/7l9Z4/vPHVkx7njey+dPoxcvnfHyt6d23ZvX9m2dWl5y1zWKk8h
CKO2LOPlXM63E9hRRNYp+U7Fcn1xqDvDask4Cg1E8rt73nL9csS0h6lgjofD
CAqajjwOnAH13xXUHJWlPjM9ndy6FZqeTKdHwTjBfMtiGmq+Y2WSmHbo+I4t
6ZX5xJbZ2PJMbGFidC4VonaYHxuZGqNs9lioOxPuy0T70R6PDUzE+iDN41Hq
nDiADHIzo63J0ZZUsDkR9I0FmuIjTWjj/ni4DfdxJ+pvBNpRf0M66ptItGai
raODrv52U5ePmv3iscub3TqHQQwRh4JrFHzQjdLIhVxGrUzI5bHoXCZNLZfo
1QqdVk3mwDjsVp1Op1QqQTfiuQ9m3etFJO/oaAuFRoaHBz2eehLPdToNdBlF
MCdbt+EKwCurSisqqTm6IJpWU86mVQo5NKmAJeBCxivBPpXC8/OohSgFxdT6
0rvU/O457f8MczGrSsGrVQvpFpXAqRcbFUyQ7rXL2jxq/N29DrFeXg3Akc2t
Wlpg0OJr52usxSt7/Ndu7ddZWKu+t4rOLtOb1MgO8OSAGqGYbOUEN46XAHz9
BuqYJ1AMVBGxYdrBO4QbLh36DhHHfQRw8I4C12arBWpORgnr6DR8GO9KpHJY
fZFYTlabgm4wnp09y0Qb1EPEK6vqgLZGayRr1fFrGE02pUpHMI8aVfDq/RIu
akDKg2RDxDuFTDKDHUXcOyXrKgEwD2qFd2EuCGc70O7s/pT16hBxYJ62SCYd
irRFBMwRzKNadlxL9cKN6WHXBdToOVK5AV6dCykf0nIDRmHAJrm8c/L8npmn
r528fHj54XP7X3786mNXz/z6i/d/8v4PgPnXP37zq09fe+3p608+dPrxa8ce
OL39xSceePzmeVj3+84devC+UzevXrh87sShvVT/275d27dv25KFehpuGYAv
r8zn6Cb97TnTDrRJNr87mFP6Pp5CpTJJuHdgDjUH0TnTjgZe4iaEHt4+mfX5
MOpgHNfxiTEi3ETNc42crE/PpKDmSBOQ8njcPz0dQ42ng4vzycXZxK5t04tz
sZnJ0K6VcWAOTV+cDM+ng3OpkdlkgNRMcmgqQXGdifRMxHqmEn0zyQHU1Fjv
RLx7MtoxEWnNhJvSwcZk0EOuY/762LArGWhAOxPypkKNaCcC9biP60i/ORGq
B+yxkfqRPudgt7Wr2dhcr2mwKnQKjoxfBxGXCdkiLl0q4OiUUpVUaFDLkc3L
iwsAO0iHjvuaGm1Ws8mol8vlAoEA8dzpdDZn/4B1RHKDQedwwMy3AHm8RDaH
b4ea19ZWQ51JsIagU+69DGGXmr9XVV5UU15Iry4F5iopn1FTVl1RCJUvKS2g
jk2qxIsyYJ5fWHD36UtZWV+bHUX/32MuZFTIONUiRjk03WNRwLTrpDSPVeI2
CyDoLfVypbDUoqkD5jYdfaBHb3czOgaUx87OHD+38J3Vqzbmr2JyqiQyIXgE
reAL6gmfvGFjPlQYmANw4E/aEHQyrIacDsyh3WgjuQNkPA2y61aotYIsDptc
Ec/BO6QcWo+Pfee79yB3Z3fh5UO4WWyBVKaGuKfSk4jnSOsgnUx2BfVkYYun
sRmk4y1q6otKBIq7xWzCMuimIrmUC/km+g72UdmprVQ3e3bNqYDqNNOLyEDY
qI6XtspQkG8AjkiOiuuh4EKoOSptooqoORinTLuKA8zxhcA8aBK1i2tQY83G
22d23Tyz+8krxy8cWLpwYPnhS0duXj7+7itPQM1/8dm7f/rVJ5++99yLj913
89LBB46vPHfr7IPn98O3P/zAycunDxA1P3/qyInD+w/t2406sH/3vv279u7b
uX3X8uLy7Mz8BMiFPwfjRMSJacfNHN3kA7kC4NBxKDiIJsPlZJQc2p27A8yJ
6McS4XBkhIyjkbXqEHSCNtx7dlFMJJWO4Q4R9KlpyPf43FwKmGcyYTC+vDyx
smUcpn3blnGQDsy3r2SAOXR8djw4mx5ZmgwtT4SWgHw6MJ8cnk30z8T7UJlQ
R2a0fTzcMR3vmk/1LaT7ZxLdYBwIZ0Ke6UjTJGq0MTVSn/K7EsPOdMCNa2LQ
Hh9y4E462DARAvWe8IB1bLRhbLQRmIf9nu5WSs07m81Nbq1GxpLyahUSNnRc
yGGIuCwek6ZV4N841+Oy11WVV5UVw7fbbRb4djh2NDwej9vtNpvNEHRj9k9D
gxt0w7S3t7fCtzuddkR1qDlMOzkIFWijcc893wWVuEnPblZFMV5ZUldZDLql
PJpRC4fK5TCry8uKqOVm+dkjjsvKSyuryqjFOdRJTLlZcLm5MVSf3MY1ZPUK
mR7D59M1YpZKQFPy6yDoRjkbmNt1fJuW43PJUcjmZjVNLS7tbFLFAp7OVpWz
gbN1z+ihk9PORum/3Lsqr+helVZWS4MwM5COq6rpUFhgiGgM4QbjkGz8crDl
KMB+z71rCPLAHPqOm5SCc/nUIVAF+BtUxhJxPLLw18ENNJBHyFxZcgYiniHD
/hA8udni2LS5KEu6ymJ1FpdUQMfJE6Crux8vgbxKrUdsh9zfu3p9dl8IEYnh
QJsYdRQYh12HyhPSUWhTB6JpqB0k7hxYbKB2kIgahVRlV5+BaxQAh6DjCuQT
Big7D3STgpqD8biWcuxQ/xE1e1DF9Ov5XUrGiFWyLdTxzANHn33w9LPXz9w4
s/f6mf23r5x88uFLH7z+zJcfvfGbL3/4h5//6MfvUKeZ/4g6dOzE49ePIKE/
dev8049ceuTamYfup9T82n3nkM0vnDl55vTx4ycOHz6yf8++nctbF6dnJ1Lj
8b/rUb/Tz0atP03kRDwn8XgrM5EG6VBq4thRf5fWSZu8zE6PuTOgRogG3dB0
UkAeRSQ+K+V4yIzBtE9PJ8bHI6lUaHIygngOKZ+Zii4vpODbgTl8O1L50kyU
2rYu6V8YHyGMZzEfnBsboDDPntie1e52oD0ZbZuKtVMVbRkPNowH6yez14mR
etKeHPUkAfiANdZrjvaZ430W0o70miZjvmTYGxywBfsdsWDTULej0SV3W6Uu
i0IhpAs4NdBxAZuScqVEKEUkF/Pp1eUahRSY06orxHyOXqcB406HrbXF193d
3dLS4nK5oOZw7O3t7SYTFc/7+nr6+3sBe1dXR09PV29vt1QqVquVIpGgvLwU
PhyajgKYXA6Dw6YJeUypiHq88Fm1InaNXMBQSnhI6OUl+dQU/bxNiLQIwhTm
1KEtRbnJ7bkVauvWrcF3W79hdQ7zouLNAnwfAR2MowC7VkyHabdquHYdt6Ve
iWzuc0ltOqZJVdNSLx3utvR26ppa5Nv3xbfsiDk9iu+uXlVZU0hj1MBdw0tn
PTMD9JWVV4MvAA6EgTNgB6egFZwCZ2LUIejEpRMdZ7G53OxUOZVGXUvDZ5Fh
8EGGwWTETXyVRqvX6Y0QcXxzIIwwnl9QKpNr8HO1OhNchE5vhmpDxG12N5n4
Sj6G5wDuD6iEKNKLTkinRFwtHlFLcowHFCJSfgUfXj2g5ga1fErNs4cbUucb
mkQjCkZYwwHXWdL5hG5UXA9Z55KhNFxRYBzZPJH98mEls1dB61ez+3XU4Qtn
lhKPnNn9xAPHrh7bcenQ8sXD1CYSj1w5/eLj19984favvnj3v7758uefvPbl
By/+6pNX3n/hwTeeuu+FRy++/NTVl5689uSty4/duHj7xn0PPnDh0tmT50+f
OH3q2LFjRw4fPrh3/56VncuzSzOT05lcAM/xfrdLzzGemzkDwHNF+tvJiDkZ
Oid03zWqDsDDZKwcjANqasZdtqDgADxn2klH3MRkYmpqbHIyBikH5hMT4dnZ
xPxsAvEcUj4/HVuajwNzOHZgPp0OTCaGZsb888nAQsoPzBdSQxTpyX7qCMix
vqx8t6dDSN+UOYdXn0LQHqlP++1j/eZYnzHWY4j3m1KDVtxJDljQjvcao70G
3B/t0gbbVEMtykC3aXTYjQoOugN97navDox7XRqDRiAR1IEyhHE2o0Ym4utU
Slwh5aUFmxDMWbQaMC7ksmDaG+pdbpcDpOMPGG9tbe3s7GxsbISmA2rQ3dLi
g45bLCY4drfbWV/vEgh40HS5XFpZWQ7AoeM0Wu1GanVqUbZ3vRZ5XClCaqBD
zYG5VsbjMWvKivM2blizefPGopLC4vIyqrIrWcgyFvLn24Vra6j5MhtWA3CC
eXFJnlDI1ErYOgmLlF7KtKg5LqOo0Sb12MReh9Rl4gJzks07vMqQ3x0ba926
M5Ec72OwERDurakt5/O5CoWKxeSVl9UI+NLiooq6WmZRIZ42JYXZaTCr16xD
PAfO0G5yDCKkGfch4pBviDgRdLwLDw+vzmSzSspKkT42bNoIuPEQwH24fa3O
4GtuX7N2IxA2GK12R8P6DflkQiw5aYWMqdkd9YjnYJzB5OKZgGCOdm92NByk
U+PjWczJSjQyuDYo46P8ciEYH5YJBqWcQTl7SMEaVrIBO3VCsZ4PWlEhFSuS
ndGawxxXpHJS39p1HuI5GI/ggWAUwbH7Vax+FaNHweg38Ob6Gy7tmHjk3N6n
rp08u3f+9N7F0/uXj+6cu/XAqeduX3n+satfffrG//vvv/i3X3/0p5+986ef
vfWzHz759YfPffjqo++/evv1Zx586tbFR66de/jK2WuXzlw4e+LUscPHjh48
dOjA/oP7du3fvW339qVti3NbZqHpMOrUgHi2qy1Hei6M5wI7Efrc5PZv9frO
bJng6Ai4Jm0yLy4bz2PZL4zlipBO1ByMI55/a9fBeDKdiRLMoeaoqakowXx2
OgbGQfry4hgw376UgmmHmlOHvsWH5sb8CylK0LOyPkxIh1dHQcdTwSZEbyp9
Bz0TYe8UrPiwPdFnCndqRzs0KDRQAB83SQH2SJdupFU52CTv9WmGe+0AHDXY
5fA4FEY112aQKKUsiYAu4jI59BoQne1XV1KbzEiE1WVFyOYCDtOgUcrFAtDd
2dHW7PO6qbEzs91ub2tr6+vrg6xbLBYX8HfaEcxxhYEn82Sg42w2E8G8oqKs
qqqipqaKrEepqCwp2LS+uGBjZUkeUrmAWQXMNVKuQSkE5rAWeH/zprXUDldl
1Og0ND23VA1/vt1JhhpT+zvMoeklpfliMdusEhrl3CzjbLOSm2Vc7nMqHAYu
4nl2NI3T2iBrtAuA+VSm+9Ch6e2702PpgVXfWcVgVdy7+jssFksiVnDYwsqK
OqFARqtjA/nKitrKymoOh6c3mABpcUkZiAawoBttX3Mr0IZmQ6bRIINlxNiD
ceg41BwmnRQeC/i7QdrxhXyBhKxLzc51R6IvI+2KylrwjuQOV08WswBtiDju
ky1oyLyXvuyM1m60ZZSa+zUSqDmVysVcFAAH6X4pv1/M+hZzJggNajhANWKg
lpwkjNkTFrKAEwVHO20RTdllkzbphFWSMYsAO9QcsZ1at2JAxueM6Hl+I69D
TuvRsucHPOe3ph+7eOipa6dO7pw9un36yI7ZfVvGH77vxAvfv/bxO899/eM3
/+ubL/77T1/8f3/52f/9p89+8+mLf/jJa7///I2ffvji2y/cfOLh8w9ePnHl
wrH7zh4/d/rYmRNHjx87Asz3Hdi7c98uCvPty/PLC7PzU9Mz4wAZjJMhs2h2
27f/bTCnMnvWsRMdJ/4829U2lut+J33vuKbHU1N3evbGADiZJIMGXoJuYtdJ
xzuuxMOn0pHJycTERBSMA3bSBQfGkc3JuDnF+EoGmC/PxecmqN71qbh/OjE8
mwzMpf3zmcB8ZnguPTSXGUxH2sZjHeOxtlS4GbE64nfFRqjEPT3aOOV3Zgas
yV4TaqzHGOvURdo18S49Ci9xM9VnTnQbwm3q4WZVbMgz0Glvrtd0+kwjA77O
ZrtawmLWlQq5tZBymGc+m8FlMlQyqU6lFnIp685n0XgsOkjXqxXQd0RybyO1
GdTw0MDQ0BCMekNDQ3Nz8/Dw8NjYGFx6Z2e7z+cF6VarGdR7vR68hGkH4IWF
+VXU4cTlkGBKyiuKayvL6qrLEMnZtErYdZWYbZDzwCY1liegIy9QS3Ky427A
HHk2d4QiGlkp30S62Qnm69bfC9KB+abN68rKC2Uy6luBcZLNgbnbJPZYZR6r
xGnkQdDBeKNd1N2safPI+9r081NDqWRPItXf0GgE5gIhc/Xqe5hMtkgok0nV
tDpuZQV1kEVJcQUne7wsnAz4hY4D1U2b80E6gF23fqPJbAXagJp0ymW70KUw
9rDuFpsVpr2iqnJzfh6uEHQ8CshDQKnSIIAjcZMlKpvzitUaIyiGRQf7uNPZ
1VdQWIoPkH1f8QQg+0TJ5Gpg3i3j3qks5iSYw65DxwnmgxLekJQ/LOENSNhB
tWBEwwOhwW+lPGYSxs13jleAcANzMueNzGMH5mS4PIc5pJxazKLjDykYQQM/
aBG2SWu7tOwtI80Xd01SJyw8cPzcgWVgfnDr1IGVyesXjrz+3COQ8t9//f7/
85ef/48/ff7fv//0zz97++fvP/1vX7/156/f+epHL7753EOPXz9z9dyhiyf2
nzm699jhfccPH6AY37dnz77dUPMdIH3PDsC+uGVufmEaMFJKfdcSFZLWc7Dn
6u9sOTHqhHQS2MlbuI+XmYnk32EO9/53mBPGvzXzsex2FqMoYA41h2+fgnWf
jgHzrUuZHVvHt25JkaG0hakwJeixYVKQdfA+kxyaTQ2i0pGOTLQ9E20F5omQ
JxpwR/yO2JAtNWgHyKAYRANntIE5iCYV7dDiLfIBtEfatAMtlg6vudGuaqk3
DnY3tntterVILmZRC15qK8E4nDlEXC2XGTRauVgkE/LkIh6bTh24ppKJwbtO
qzYadND0ttbm3t5egnl9fb3P5+vo6PD7h4LBwMBAH9RcLBbC8SqVcrPZKJGI
uFw2dByOvYja6bGAdLMj7yMjCNh1MO06Od+qk9m0EkqCVSJK0Nl1VeXkIONy
0nOV62DP7R5DutmBOWXdv8V8c976ispihUKAb2WQcTQiBtTcphE0WKReu6LJ
IYeUN9olDVZBvYXf5BQ1uyU9LdpwoHF4yJOZHCkuXbduw7/A9sNFiEQSg94q
k2o5bHF1FZNB5+bnlbBYHKi5QqHg8YXZzVoZiOpI31BzACuVKfASRbaAQ+Em
xBqN4tISoM0XCqhtpsQikI771NFLJWVGkwWeHGIN1QbdfIG0uoYaOIOBJ2cu
WKxOWHSyBQ2sO/QdL8nGj8C8U8LuELNwJZiTAbUBKQ+Yg24COCoATVfwqZkw
Oh6puzG/c1hSdog8rmfHdCxcx4xcoE0qO2LOjWnYkHI4/LCG2yuuGdawAya+
T1zVZ+QfHB+6fWbXq7fvf+HmpSeunblycg+C+cXjux+9eubzD14F5n/53Y//
53/++s+/eB/B/Jc/euGr9578y8/f/u1nP/jJu0+/8eyNpx++AN2/fOrgyUO7
Du6jBtR27965Y8eObTu2b925Y+vunVup7Qu3Ecwh6KR3PRfSyTx2YuNz61lw
hxjy7Jj4ndnsJJXn5rST0bRvB9Yjf2faiW8nlRtWI5hnXyYJ5tlu9gQ1mjZO
7U1H1ByYQ8q3LCQWpyPI5sB8djw4HhnMhAfSo/2pUE96tHc82jsZ750e659O
9k0muoB5ctRHMB8dso1Shtwc69CGW1WRNnW8U5fo0qMR9MnJnWi7BneS0PQe
I94dbTdS/85dukantsGmaXTo7AaFSSdtcJgEbDqjpgIZHHotEfABuFqpAuzA
nOqFq6lEmXRqWHeTUe9C7jYbHVTuhi1vJCPmcOxyuRw4I5K3tbUgpLe3t0LT
RSIBMep0eh2uZKYqHDs8fHUN1XtPr62AkQDmQNttUTVY1A69zGFU2vRyuYgy
7kWFm/H5ymqqmz13fmKO9LsxX7vunhzmlVUlSqVQL+OalXyrWmjTiOxaIdSc
OkLCo22wipDNm5wSh4FtVtf6XGJg3uxR7N83e/G+w+s3rqqsKoJjLyoqEvAl
PK6YyRAwaEKRUAn3XlVJq66uzc8vrKykIC0sKiFLVMB7Xn4hYjhu3rt6Le4U
FZdC0ME7GT2HyjNYTDyvxFIJm8uBrAtg2yUyPB8YTDb8AMRapzeD4qLicgaT
B9MOqGHawXJefjGgrqyqQxt3Gr0tkPLaOuamzYU8vhgiDsbbhIx2EZNg3i1m
dwgY/RIu1bsuF8KxZzHnjMizC1WoWalcFAQd2Txn2rMCfSePZ307O6vprKiG
gYppmQA8qmZFVMxRFYtg3smvGFAyBnVsr7Bi2CY5vzL2g4dOv/DQ+dv3n3j6
xvn7T+4+dWAFmF87f/iz91/6829+DMf+199/9tUHz//mk5f/+3cffvOTl3/7
yfO//PjFz9956r2Xbr3+9PXnH73vkftPXjix9/iBHccPUWtRd+5YWV5eml+c
m16YGZ+dzkyPE1+dy+a5hSqw7rkiy9NGqbMY/GQxGlQb8p1TcHCdW6eGOxNT
+LaT45MZOHx8q+w4Gsnjyew4Wiw7hp7MOvZMFvNktr89Mzs3gWxOHPvcXAo1
ORmZmYouLaSQzYE5TPviXAx2HYwTzNORgVSoLxHojvs7UMlQZybSNRHrWZz0
z6T6Yd3HQk1jgUYK837bSJchM+ykFLxDSxn1Th2MOkR8xCeHdqOg7Fk1t6AS
3aZwl7nbZ25qMFm0Yq2SB+mElCslPL1KopQIkMoh1kjfYj4Pgi6XypQKGUK6
XMKHpvJ5LJ/HrZCL4dj7+3qGBvth2hHJW1tbwTiCeWdnZ3d3NwB3u52QbwTz
wcH+QGAYDYGARy0kL6GWpOVT+11Q+9dBo2uqy5m0Ki6LUnMRr04r4zhNCmDu
NMg9Vk29VQtBrykvLMxbX1ZaiMcCKrdh1N0bP2az+Z1JMhB0aju4vA1VlSUa
pQjfwCBjOXQU4yYFB7690SztaNQhnrc2qLp8ereZZ1BVd/hU/j6LyyHcvmPy
7PlDa9atYjBrsvmi0mpxIo9XlNeWl9VJxMryspqaajq8BYPBEghE1OLTqhok
6/UbNpVXVAFzs8VGprhD4iHfq9esw3MABZwNRjOeVGvXr6uurZErFUUlxYjq
ZGxdKJLgC8EyTLhWZ3K5G2HFyR5xZFNHsQQOgY77JaWVRpOtsKiMmHmy2qVL
zGnl0Vu4tE4Ru0fK65ZQmGfVnKpBRHVcpZxhOSeoFoV14oCaHdCwUCNa9igc
eJZxCDrV/2bMrjw1iWJgX8PKDp1zx0yI4YyYnkEhr4WUM0fk9CFJXVDJ6RHV
Dqk5TdwyY+Wa2X7X6zeOv//0/a8/ceWxq6duXzl59sjWE/u2PHLl9LH9C1//
5K3//OMXv/jxa//68x9+89M3/vTlq3/5+vWv3330j1+8/M1PfvCz957+/K3H
P3n1kTeeuP/5m2ceu+/IpSPbLx7deXjX0o6lqeXFmcWFmdnZ6enZmZm52WgU
eTlO5sbEs8PcxLFTE96+Rf7upanQa3ANfskAOtFxMrgGwMnMGVBPZsThOjYW
p+jOpPCsCIWoKe7j49TSGNyhSJ8ch5GYRmiYzkxNUZ2BExPxVCqcyURnZ5Mz
M2OQdaj5lsU06WlfWUpuX0ltmY0sTo/iOjseSIQ6YoGOsVA3NRc90hPzN0eG
msaCbTOJ3lx/+2S4PeH3hPscI12mSJch0KLwe6XBNlW635IesuHOoFcGlR9o
lIY6dMlBe6BV429Rj3YbB1v1PW0OT73BapSZDBKDRiyXsPmcOha9En4cwRyM
w6GDcTadVlNRrlYp2Cya3WY0m3QMZm1Lc2Oj111f72puburr6xkeHgTXID0Y
DMKuky73cDiUTCZGR4NNTY1Go95mszR569tam6hpqyXUvlXw3cUFG4vyN5SX
5NdVl1SXFXAYFWoJB08eiLjTKHMZZPUmhcei8jkNHqtOJebWlBQWbFxXWpiH
p01FCbW7O9lg6s7uMRtA2EYk4k15VKcctf/t5vWIGGIBW6Pgy7lVBkmtQUKz
KFiNZnmTVdlolDXb1a1ObYtbY9Ew27wqp5WjVpVPTXexOJsTSf/ufdtX/cuq
gqLNm/M3wWN/7957QCvceNaQM6qqaVBnYs5JAIdMZ4+V5uWmtuJKRs9zS1AB
Mpkzg0+iDbnHTTL1HffxGTqDhecANJ0y9ll7j1KqdOvWb9YbLGQSO7QbgCOY
g2sAjgcCngC4AzP/zzDvFtB7Rcx+CTuLOQsF0gNKTtggCBv5pAjgcOwoSHks
Ox8mN26eLU7CyMxhjpcI5kE5c1hK6xHUDMgY9XX5bnrBbJf9+r6pFy7vffXm
qfeef/jJG+eO7ZrdtZTcvZQ5vnfp5tUTv/36gy9+9PIXH7zwhy/f/tev3vzz
V68D83/9/MW//uKNP3z20i8+eAY5/SdvPPraY+eeuH//g6d2nNkze2hLaufc
2NJkfHZibCIdTyRiyWRyfHJiYiKTmw9D1Dw3jE6sO9menSw2R0HBCeNokPmu
uJJsTsSdFAGfEvcxYDuGK54n+KH4ccAZ13SaYp+8nJmZAulAHr8Gtb1MIkg2
gJqaik9MRKHmi/NJMA67vrw4trwY37oQX5oJz036UfFge8TfEg20JsMd6XAn
AEchmEcHG+PDTUl/c3qkORNswTUV8KX9jeEuQ7zXmOgzjXZoBr2Sfo/I36KK
dBtHO/VDPsVIhy7Saw60awd8ij6fqsOr9tXrXA6N1Sw3G6U6tUgmZgl5dBSf
QxdwGcBcyGVBzVEsWp1GLcf/Gk0as0XP4TKsNqPeoLZazV6vBxT39nb3Z//4
/f6BgYHm5mYkdLvdSsbRIOK4IpjLpEJ8Hzarrhq5vGgzpDlv472o0oINUGoe
q0rMp2mkbGDuNisarCowDtLdRnmDWenQK1RCFr2itCxvY3HextKCzYC9hFqk
vmlzdndbapLMug0oiCZIp+6sXZ23YW1NRamIy8TTQyOuNStoRmmdTcVpc2jb
nbpGowLV47Vku+MkLivf7RR0dmpnF/qdDZKuniaLzViCKMGkVddWAW7oL0K0
zqCXymWAkfSzZcHkkNFziDhfIALR99y7Bh/o6KQOXyDYks0lgDMeCFB8ZHCi
+Pgm5LmBl7hPVqaDazQkUrnTVU92e27ytQBk4ExEHLzjCuTxtFEotUwWr7ik
guz8TDBHEczxkmDeI4RvZw8r+AGVMKDk+RVcFDAf1fNHDbw7peOG9TxSwDya
RTv+N7BzYgZm1ECP6uhRLRNqDsxHFMCc0cYqG1KwuiV1/Wr2ylDj5e3J28eX
nrty6PrJnc89chGO/crpvQ9dPn7/6f1vvXL7yUcufvzOM7/78h2o+X/86r0/
/vQHv/74mT9/8dIfP3vx1x89+/MPn/nlR8/95K3bL986devcjvsOLx3fPnF4
Ob1vy/jupYnti5PzM+Pga3Z2dnnrCoHr7jlvhPdcJM8ldPIZouBkEjvpaiP9
7WCcdM3hiocAmUVDdcjHIigwHo9HwTWIBtcAH21COn4BWAvcx6+EZ0soOBSP
jwBzCDoYR0JHMJ+djs1ORhDMl+bj8zOjO5cpQZ9I9s1PBTKx7thIS3i4Cddk
qD07Zb0dmKeCrdQ09YCPVDrYlAn5JoJeEE0NlA/Zwp3annpRu53b55EE27VD
LSrQPdySrXZ9l0fms/Ga3TKbQWTUiw1aCRhXSDkCbq2AS5MIWWxGjYjPUsnE
SN/I5kjlQi5HpcQ/bZHBqG7wOMG4w2kB5rl5bkNDA8PDw+3t7R6Pp62tramp
Sa1Wt7T4oPUul8NkMtioaXL1LqdVq1Ew6NUV5UVgPH/T2sK8tWXFmxg1ZSIu
HV4dmCtFDJNa6LGpW+qNLS6dz6EB7CDdppVpJVw+vRaCXrhpfd76NcVQ2PxN
BfmbqeOismNp2aOE1yELUye+UtivLti0Hrov5rE0YpZZxbaqGDpRtUnGaLVr
uuqNrXZdm0PvtShMSlao31NvF5qNDJ9P1tapamhS9A+2rfrOqrKKUmrufN5G
kE5WmsBjI0dDbQE4mAWeFZVo1BKiyZQYtCHNQBvM4jMqtRZvQdaJGcAV98lb
uE8EHdKP+3iJYI6XRPdJRz3uILPDPIjEctCNPI4HC3gnx68gxZP93sk5DqC7
jc9AUYBLuHjZJWJRk11FTOg4MKcWo2UZJ5hTo2BadlDHCekRzP9XQcrh20Ex
SCeLVkA6uAbmET0th3kYnl/OGpLQ+0R1reyykFEUdSi6VfTFYc8TZ7c9+wC0
eNdDFw6c2rd49uAyGD+8c+6lp69fu3To8w9f+o9vPgPm//bzd3/z6Ys/ffv2
v37+8s8/eOKbL1799ScvAPMfv/HIcw8evXZ86czuqf0L8W3j1MjyXCo0k46k
AW8Mohmj9hzPyjf4JfNdoex4Cfn+m+Uq2c8QzMmkVrIJJDAnw2pkEI0UsfT4
zjDwkHWY0khkFKRD0Il8g24i63hJMM+xH42FRgIDyeTo5GQiS3oYvh2YT2RC
MxPh3TumFmajU+P+PdvGgflYpANqPpsZSkc7I35feNibCLYkRxHGWxNB32S0
YzzcBhEf83sSww2JYTcaaX8DNc+tWx/u1MOfoyDlvQ3iNgevzysLdur7GhVt
LhF0HFe3nt7kBN0chYwlFkDB63jsaha9HNFYxGdwmLXI4FqlDPEcmBs0alyz
QixTqaVNvoae3g5fs8ddb+/oaAPjkHIUdLynpwcijnjudrt5PB4UPBgMIJVL
JCImk+5w2GDakejptCpq3LtgY0nhpsqyfIikmMfQKqhOfhTU3KwR1VuUTU4d
MM+SrvPaNMjpdp1cIWRD0KHm+RvWQsqB+d1qTjDHlTpPjdrOej01/Z5Zp5bw
smNzbKuSqRFUa4U1sOsdLn2Px+pvc/c2WS1qTm+LWa+iGXT09nbt1GzfmQs7
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
AByaDt5NJpPRqIfVQYCSy6Vr1txbXl7KYtYVFW4G5oUFGws2rwPm+AXgH6jx
erUIjx2VjGVU8x0mSYNVAdOOyKyV1EHTG8xyRPXeFnenz2VSSxk1FaVFm4uQ
0PM25W3euGnjerJb+72r196z+l6K99X3bFj9vdK8dXxahUnBt2slNqXAquQ6
tXybimNXc5utClSjUYJri0Nl1/HxPLEbhWYDv63V2D/gWfXdVaVleZXVZfgP
UVCUj4QO9w7A2VyOWCoB7wCQmPbsmBoTlEHEs8peCctNwjjeQhIHwmAWirxq
1XfwHMBDAPJNutbBPl6SsTN8LT5GsjkMvEarx49AAw8ESDl8AtQcIo5CHodd
h4cn3W4WqxNmHuDjd6BOTObUkWCOgqajyMZQYByCfmdLdhkblT0MUUjGzUkv
XK6nnZJ1DSeSXWZO9pSApifJYYgmytVTO0Gp8U2Y/WJGj4DezafVVxU2scub
uGWSvFV7El0I5s8/sO/dpy6e3zMzE+66cWbvW8/e3L2QunRs12PXzyGev/rM
zd9//eFvPn/7X3/54R++fPvD1279+tOX/8c3n/72i9f++s0n//HbDz9649HH
rxy4cmLp3P7po9vGds+Hdy1EgfnKbHxpOrE4mwLm27ctLSzOzMxOTEymcjPY
yVQZ2HhyBCrpgkNjYLAHTp7Y9bsHyql+tuho/2Cff2SY9MCTY5hAOt6FTINx
FJFsvx9edYAEdth4FBq4Pzs7PTc3Q3X0JSkdB+bUsYlx//x8ejTYPTsdQzbP
JIeyZzQPpWO9E2MDE8m+Ub93LNwCHU9FW9KxVjKDPRpwhwbt/i59oNsQ6bcC
88xow1jAOdpngmnv82lAd5NF2GQTtbpkLU55vZEP7XaZqFXVZhWEkmXRcvUK
mphTSq/aVFORT5wzvbYCRc0nr6sE19ksTi3xhs4qZXyTXmExqoxGZVdni6fR
OTjUC8DxXwyOCIxDyhG9EcN9Ph/yCa4I5jA3oJ6IuNvthGlHu5DaB2IT1Lz8
2+Mh8NPZjCqZmKORC7VKgVrO0al4Fp3IohNYtQKbnl9vljQ5lAjOwBxp3aIW
mdRiFNS/prIEag7GyZmwxKiTP+vXrlu/7t7V31lFqyiipFwtajDIjVJms10J
Nbcq2SiHiiK91a6CoLt0AjDutStaPDpvg8bpkKUzfjqzZHPemuraCjDO5rJK
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
LIaPtALzzJg/lRggmMeC7dGRttCwt7vNPNJf7+9zDHU7hnvtoQF3ZNgT9TfG
Ap5wvzPUax9uN/Y2KVGAfbgd1OuH2q0djboGixiAI9ICcJhzAbOIU1vApReB
bgGrHICz64pYtGIOowygVZeXVJQUwkfzWHTS8wbYIa+w63IJ12bW2C1qnVpk
Nsi9Xltzs7u94//n672jpKr2fd8WUHLoHKq7unLqyjnnnHMOXZ27aZqcFDci
IIqIBAUBFSQJIgYUEEQRI8Ztdif3O/uce885b5wxbvjzvn/e+66a7N6Oc8e7
jt9YY9asVaupcn3m9/ubc645I3DsaLKyuaTbYwfF0WhYLpfClg8ODjocDo1G
43Q66/U6rLvdbvX7vTDtKpWCLPDYS+vs6+1qaaYmmeNvIcA4QipkGzRij0Pr
cap8DlXApYp4tWGPJuiQey1ii5rrNomBudtMDbfZDQqcDzPQ2rKCYD5//t97
2hsd7Avvn7Ns4f1tix9Qi5ghizpkksatcp9O4DdSmKd8hrTfGHUoAHg+ZEp6
NHDyDr3QKOdYdANuuyaTDLBYXfT+zqXLFnD5LNDdS6fpjTqoOUz78uYVMO1I
x0Ef2AS8IBHa2tjRjEGQJP1y4BRajDLEmsx8A+ZQbZxPKIaUk1lzCLK0O1mP
gqwwg4/gUvgsecwN6Tm0G6k3XDpYVqn1QpHUbHEgT49Ek3IF1Q8PKQfsEHFg
DutOZeVyYUE5QBaMorx6IxqbKM3GPzBHAPOKkllTs0E6MIegkyXgENTTphou
1e2m4JQUXHiD7AArJWBCyoF5kNXj7FmRkPR7uR0Dy5v2ri5+cOHAGyceufv2
iQuHH3lp//bje7Ye3rH+2V0PvnjosbdffvHaq6f/5c/ffvf5+2D8u8/evf3W
uX/68eN///OX/+u//eWP39z8179+/h//9MUfvr5+5+oLUHOk54d2Tu/fPgXf
vnm6uH6qAN8OzDeuHl69cnDNb0ScjJuDa0g5knRABxGv1qiNj8lcdxzh2KmM
e3oSgEPEYdGJduMlmcRO8Af1sO4w8+AaOEO1y+UiSAfUZOIrFHxoaBCxdu3q
rVs3w7GjhkoZJoYbE9pn6vXC4GB2aCgPzFdOVqbGilPj+TWrqqunS2B8bDA+
UgvnU/ZyxlVM2XNxaz5hLacdg3nPcMk/UvaNFr2IwZQ9H9ZmAqpcSIVjzCmL
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
DHPpxLGTWa9k3JxayVnGg9Mmo+cAvCHlgpKMVW1MjwHdZLh8SMeDaYd1H22s
CUM9S67mEMYHFUxgnpP0Z8X0tIie4NNiHFqY2RPs7/L1d1q7lgd5PVb6citr
6aaq9+5bz717Ye8Pt89+fOX5N17Yd/HInheefPjp7ese3TB55+1Ld65f/vWH
Lz5+98qXd64jQ/+f//brf/3z7yHrf/3p019/+vDnb278cPfKt5+8/vE7p984
u/+lZ7c/f+DBI3s2PPm7ldvW1taP51aNZBDTI7mpkfzEaHXl1CisO/iaXjkG
cR8Zrg4PVfK5VCabgF0no+dknsymzeugv1Qf+8gQNa19kDLqOAJ5SrLBeDGP
fBzAoimAgifTCdSkMknc54AaOk4GzZGG454H3Zs3b1y/YTXeombjDNfHx6hn
06amhtasGgsG7XCGYAeMj4/mCeZT49mx4WQ56y3n3NWCF7l5KmyOBwwkS4Wc
UbMx/Tpql5CopZR05EKmkE3mNQkDVrFLz9NKejm9y/nMdnANunn97Zy+Vj4D
IHeLeDSEWNAvFtzDnMvqZjO6eWzqoXIRl4WjdICnkg+QcTRgnooHhmrZXDoE
xx70WVNxXzYbTqfDUPOh4QocO360ZCoqFHGRm+ObIgFHMo7fSNr4D4KOfLy9
vVUsEZiMepl8gMnoRVbeT+9h0rvbW5b29VBDaQJ2H4/VLeDQlFKuVSdxWain
aRymAZ9dTi0lHTGhZcuETcCcmiSDFs+jj/stiZDNZ9dqlcLODmqddjBOuXWS
nlOmfe6Cefe1LlvAobVFHfpKxA41j5klYYMo7dbBtyNCFnnIKk37tFlkBJYB
mHYkO7hyzG8Nemxd7SvQFrW1tVALz7auWNGyXDggWLBoIaSczI3ppvVQD6lw
ePPun4+sGQINz9zY84iDSrK+K0QcL6HFZNEY1ABwZOJkyUeINUhHg3DfnHkA
HJ6cdNChTcAHyYR28oQarkAWgUQNjz9A62XArsvkanh1MA7wLVYnKkE62dwc
7UCE1/+fBX2AnRSxoONgPC/h4NiY5kptvkDNglNSpCPprqs4iCE1FzGs4aE8
oqX63PAW6MbLxpy3vuxAV1rYkeC1x7ntEXZniNHp6Wt30FrUyx+w9q5Qd873
iNpfObTlo9cOfn7t2c9vPHfzlYPvXz52/tmdex+cOvHktlOHdn9y4/Lr5058
euutP3939/MPrv/p+8/+9a8/vHnp5K+/fPmXnz75f/+ff//mzmuI7z5+88ar
x157af+553afPrrzwM51e7evenzb9GMPT2/fNA5Bn6jFh0vR9dND62ZG106P
TY/XG048mU2FcQMXc8mx0cFV8PCTIwg0AuuQPUPWxyneJydGIFjlUg6Wvj5I
TYutVYubt6zPZZOwqaumJ7w+J5ilHr2Ety+XSpXy4FCdPNgySTn/0XwhjfPB
+OgYFHw6lYzgytQG62O1bVvXDFUzYKdSiNdK8Xw6MDNVRW4+VIuPj6SqJX8p
76kUffGIMRM3F1MO3OSpoCHqUTfufB2od1skUHm/Q+E0ShwGsVUv0spZUkEP
6JYI6b1dy4UQa1a3VMSEs+Uyu0R8OqOvDUelTCATc5F3k2nkKMgGWAh653KV
jMdj0lRSgVpGrcWkVYl9bgsyi7Gx6tBQMRh0+nw2SHkmExkeLhUKiWQiXK3k
cbTbjAG/W6WUFvJpt8tht1m8HpdMKpbLJColbAKfw6a3Ny9jMmgSERdo07qa
mX1tyBdY9HZGbzNaIZ2CC7pthgGYEGQZBiXLZRa7jANOA+y6PBU0lZIu/N/E
Eek5amCt434TeId1l4j5yJeXLl+yaAlU/IH75jbNmdMENad1tlGD5l3NEZeh
HHVVQpaiTx81iZN2ZdqpDhhEXi0v49GUY1aY9mzIEHIqqGt6zcmoB3nEogfu
p3X3LFu2AoYEyTjpVwdoIJGMiYNTINygm2kwmmHdgSqSbo1WT9aOAOwI6DL4
xVsKpRr14Bdn4jRcBEQ3Nc0BuQCZjKyRndfwEdh78qwKmgK0IQR/MkEOjQnp
Y0eSnkhmwTUshNXmIivCrWhGliFE5W8Zvzd6LuYggPmsoJOe9sZEOKDNI4D/
FnMEyqM6AbVZkpoLwAF7Y9pbf2agPSVsTvBao9zWCLvdz+hw9bXZelostGYX
u0PRNs8j7gDm71144s5rT9195+itVw+9c/EQtPjwrrVHnth6+pk9r585evrZ
fd/fvX3j9fP/9S8//PHbzz67c/Wn33/07//lDz9+88FPX7zz+c2Xf/r0rT99
+c6X71/+9MaFW2+efO3MwfPH9z77xNYdW8Y3rSqvmyw2NiUpbJiuQdAnh/Jj
tdxQKVXKRfPpUC4ZRlSKKSL00PeJ8aGZVRNAHuCPDNdGR4BspVjIAGrcuqVi
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
GH7SUMDJ42QE3sKV0WJQM3DYXIVSTUbJIeIQ9Lb2TjKbnTzVgiOoR6qO0xpP
qUjAMqA2GBw4MhgCq9WrUBhAOo3GnjdvSSpVAvsRQT9ScmLdf6vmoDsnYyPy
1OwXVkHGJJiTMfSsqLG3QgNzZOVBDs3H6nazuuz996Rc071M1bFM2rWY0T6X
3Tf/gTlN164efWhbkcNrcnvplUHNY3sqx46sunzukU+vH/nb11f+44d3//LB
pS9eO/bJq0dund//2nM7jjwyeebpzfu3jhzZtebkU1v3bBrZMJqcLoerCfv2
dUPPPr7luX3bNq8sHd2//bmnH3npuSfeef3UjTdeenbfw49vX3P84KMHH996
6ujj2zeNb11T3/O71U/t2jg9nJ4ZzYKI6dHM7ofXbF1LTW6Hrq2bGUaWOqvm
MO2Nvf8i8VQ4kY5AzYlpJxad0I0yLCuCUI8jTssX0uVKvlTOIsiiScC8Wo4T
zCu5QK3oq+W9yMoh5cMlb73gLKdtwDzh0QBwUByyyaxKlkXBJJoO3iHluBth
L8txO8H8Xm5ej0/UokjJIejAHC3YrJpvmBlcv6YOzMH4pnVjEHF8X1h3YL56
skT1Ok5Vx+uZVZOVkcE0/nlDg+mxkfzocI5qlMqpcj42VM2U8jGUV00Nw7dD
zdPpcC6bCDZsDAQdKTl+ChyRhiNNlCmkwXBApVEuWbaQw2O2Q7vbV0AGoeAI
eHXQ3dm2lNrPpauZ3tMM0y4XM4XcHk5fK7WaBJ+GILN2QbfPooBXp/ZHa0x6
AbxgGVJO6CbKDvmOOtUo4y2cAMxh7JGtWzU8m05s1orAuJDVpZXwYNo9Zh1y
c6tK4rOoM357PmyPu/WNLVClGb/epxMkHMq4UwPnoJfxWpbdP+++po725ra2
FvCr0WmBHqw1MIdphwojSQfgwBzsw3srVErATjZQw0vAC5bxEbfXA8MPpQbX
+Eiji45LjAHObJpzH6BG/o4PItAakDPx1vwFi9o7utQa3YrmVqlMsXjJMkCN
Aln8jWyjRrr4Go+mCgbECr3BWqkO2+weFMwWp8sdkMqoxDwSTY2OrSyWBlVq
A8GcorvBOJQdmKelbII5GC8ouARzskZrg3FIOfU0eozfF+L2BNg9PuoZtA47
o51ivI+SclXXUmXnMnH3Ygm/ecGCpm3bB7/6/o3pdVFPmC2UPzA8aYnEuQef
Hvv8zvN//OLiTx+e/frqia8uP/fD9Zdund335omdZ57aePKJdS8+vvbgw6PQ
9GN71u9YU15dDW8czWS92p2bxratrj29c/2mqeLpY3s3rCxfuXj8/Av7b711
Fjb+yUfXP/3YZrCP8rb1IyD9mSe3AfaRUnjzTG1qOLV5zeCe7eseXDc6M1Ge
GsnPTNWAOeRseLgA2apUs8A8k42nsjEEGId4gW7c2NBuQjcKQBtvIfBylvH/
hDlMOzgqZkPZlLteigxRI91+YA41B+bDJTcKMO1xtxpSDop9pgHouMcgdOsF
CCLlCNj1YtSK1gCmfbjkXzWaXDVCpecz45kG6QmSmxPMoeb/wHz9CDDHV0Zu
TjCfmUAKX8W3np4oD9eoNeGh5sB8ZIjK08uFOBhHeg41B+nUrJ5iKpOJFAqJ
WrVAPYcbDaCJww+iN6jxg5gteq1e003r4gt5Gp166fJFyMqXLlvY2hBxYtfB
OzDv7aZWfuvraeaxusWCfmAuEdLBOJfeJuJ0yUV0EasTpt2s5HnN8pBDgyBT
1gGvSycEyMSZk9z8t7wT3w7MkVwbFSy7XuIwyWDapfw+o0Lk0Csox24zek24
ph65eS5kA+aN9mEAJop6+NSMK6vsWjGzp2XhvKbmpYtYLAZBj9rLuJcGQgnj
CJKMw3jj64FQsAy0SUoOwImNx/lGs4n4dnwcgXOQeuMiwBwfB9H4CBoKcI2L
EHGHgac8fDcNCJOVpmDLSbe8wWgmy0yRbnyyQgUZqhNLlEDb4w3RepkstsDp
8lttbplcA9gNRhtgR/Ku1ZkJ5qTz7e897fe64Ihjz1GTWinGMwN9KSEtJexL
NVJyMB7m9IJxL7PLxey09bVZelth13W0FdruZlXXcmA+0L24u/u+Fd1N//1/
/fIv//3Ls2/sPXRygyPMtHhpvghz75P12zef+eXrV/71p+u/3r382aXDt049
fv3k7osHNx/bMX7+wJYDDw49tbX+4t51e7cMPTyd37Yy99B0oRjSb5zIbZ4q
PLZ1Amp+9sS+asYLxsH725eeP7z3oROHdgJwaPq+nRsA+KNbp6DsU/XkRC2+
fqoEIrZvmdi2Yfyh9WOwrxD0kcEM0nOkpcC8VsuVyulCMY38Op2LJzNRUAzf
jiA6TqjHEaTjSN6Cla1UC9VasVjKzpp2kP5bzEeq1LYps5iPlH0jZU+94C4n
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
JsoBL1gG9cCWy+eRnS/w8PgqMnWOL8QHRRIxPD+xBAii5tRqOhqdbFwl29bI
RjY2h0cKVpDaUCCanM9IzkdGDwD2gTOcwLLrJ81QZSgQuINA48bBNwT1ktXn
Z/ZCuBHAPEgVfeokpPtGOpur3a5Lua5nowqMd66Tdq4Vt69lrF4i6WllbVw5
uHrJ+pYWJaP/m0sXvjp+8NujT//q1JF//vTyP330zp+uvv7a0w+/+NidP1w+
/+6pJz+7eOyPn1z8+cq531996U+fvPKr1w9/dv6x79986sf3jnz+yuPvHL/7
9SN3PL9v80Pb0scenoMdePSO2nOPbrt/e357I5ByCSntSzgSLi0EHUQ/vWdX
KeqAdsedmrTXkPLooeBzlQR6AMAOWd/SSBeTrkLKlU+4iylvvRibqFKbszIJ
Lww2MM9kItnRGBgnuXmumCZSTrJvIuiE6HIlDzOPl3gLOk6dlFrO1RtlYN4Y
K9+I+Vg1jdx8spaEmsM8Q1g3NSIw7cB8y1hkPOek+E1ZwTLoRgMvJ7IOtPGv
A+NgHzencq6Zgmey4K5n3bWch+TmSLfJvDnUHOQiPScLYDZN5SDowBxXyD0w
37m5sGksPlGLzE2lQfrMOHWecjJmrdeijXosl/UFfHqTQQg19zi0HofebJDL
JWy9RgrfTqP1sNlDcONw5kAbiblQxBWJeYCdyaJBzcF4X1/b4GAnMB/obUNK
Th/uEvFoCKKqIE7CHZLxaWLugEJAI8dJiBjdUk4PwCSLW4JWKbXjW063KhhO
JRPhVrM9emoSjYywEetOMCfj6vNmnsyqo2FRc2DaoeYi9gCH1sUd7hExB9Ui
rkkpcWjlLoMcmPtMMrde3PwU12WQSIWM1nUr4diBcEdHG5S3s7ePxeOLZPK1
rRvbujpB8eBgP5vN1GoUcC8w7cCTLG6nHm4GmRED48CO+HxwjSDj8HgLDoFG
Va8eQjoAD4+uAD0AHlu5ehVZ+k4WyVDD+M1D1si6VnJ6C5AnhSKJRSe7V/AY
hJ7UewfgEG6CM66Qcog4OgfE/Lvzjp2Mt1OpenONepDZ12R8XtC7qPJutOsz
aMDc0LcRdn1+JYyir71vSQtr/XLa2iX09SvaF7QMrV5yYOeWv331/Lv33/3r
k899tH/fty8c/cf3L/3d+69/ff7EF+ePXT7+5PdvnPzjR698+/rxH985+XfX
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
kQ0m0F/kyFBqckYS2IQoI5sm57PgJXoDEIoG5BhvEQ8ASPERcrYavpP0DCT7
BuZI9slZq7i/ectWsisN1p3MmKMnAeZk1uyvzM3JaNu8b7+elbMH7LQuElZa
p2mwTd+3QdO9Vtm1Vtq5lrl+CXfDSmDOXre8f3GLsH29Xyb0SQWIuFqRMWjT
WvWoQZcz6lNq5aTTXVBp60bbhNm5PRDb7A3NOH3P7brj169f+uTU8x+ePPb1
pTPfvn3u/fOHXj2+99UTe5Cbv3rotndfuPfL1/f/8MGxH68+98OV53599cQf
vjj77XuHr116+p0zD7906Pa3Xtxz5cITLx2668m7pm6fSs2Muh7cXsm4ZHGr
EJhn3MqkQxbQ82M2WdwuN4kG0z6dW8cD5k4lC34emOPXbDRkAuYhpyodMnut
Cj9+98JWj1Plc+nSSU/AZ/S6deGwE5j7Aw6Q7vZYIO7zmMPM5/IpiHgo7APm
jbEKVQsuk0JA1vOFTLGQKZdGx8aKMzP1SjE5MTYK6z41kaMObqvGEeOV6OxY
HJpbzzqLcfM85kjYm5NfKQBO5dfNuTBccR+Mg2KwvH0qs2M6iytIB93jeR+x
7ngLLyHlk8XAeN4D+Z4suMF4I2sH4wTzSsoxXY2GXUok5uWUz2tVwWMDUqtW
xOpvc+plGhHTIAOqAu5wF7Ja6tgjCQt6DU/e27m6r2sNABdwBkb6WpELi9n9
vJEuXPVyjk0ntGl5kG+PWYQUG8m1U8cKWIUxF7pWScAscOu4QDjj1xejlmLU
mg3oE25V1CEH0Qi8hTYwB+OgHgFxB9cAmcyskUx8vsYO7s+PvRPMtWImfLuQ
0ccZ6mQOdiJDJ24ExkPMH9HIhdRiAAlvZKgbmK9YumDp0sWgA0Z9waKF0G6Z
Qg7HTta0QMdJCThk6GwuBw+AfdAHbIEYGFco1dBcSCoYBOxQamALfskCVHIE
Eng0ma0er58cu4D7ZKs4OcEc/p/sOQX+YomMLIyBlONhfIocu7Dv0cfxVeTg
Y/w4dA6gmyxk/euH4MLU6tbh+SVwYNzN7HMxqDKtDkaPbaSL0vH+VsNgm7Zv
g7yLMuqc9tXi7g2s9csHltyk7O+KKCReIdcn4gckwqhcmlQr01rt9VBrCjpT
xWitme3jFuek1Ttt9895gpsDocdn5z49ffK3l9/88rUXgfl3V85/ePHI22ce
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
oiULgTMwJ3NqMLcgHYyDa3h1Gn2ELFud32NOVYFoii8ZiIOjBqdgFhSTo5DJ
rk8y7UXOQyTgk+Qa6o/GosVLgT8p50gG1cngOYSbjM+TujFokC2oZL0cWZOD
jwBzMsyO+Osxv27aOUOhX0ba4dhh14G5abhDN7gRjCu61yh610q7VnE2LmW1
r+J0re9btWhozVIjdwT5uIPDBONeHsfH5wYEwrBYArQjMllUrkQEhSKwHxPL
E1JlRqkF5hNO72wgeE+tck+jcuK+3T+898r/8sO176+cu3z+qY9fpaD+7u2D
37z5zPfvHPrxg+d/d+3M33/9yn/6/o3/+z99+X/96dofv7746RuHP37t2W8u
P//F28feOfPo+ad3v/j4LUf2bH5sV+2Oyeh02tyIGwt+JTBP2ASlkC5hF0PW
U05pE3O+U8OERkDNkQlGXQoEhAC/JH6b1KblAHO/TW7T8312edRrsOqFVpvC
7tQQzK12DZQdph0RCLqBOVJyqjx7Ogm7nk5Tpj2ZToD0YjlXqRXJVtZSebRY
oirAE1mv1bITjfzkWKFRpfa5T1SiwJysUZ9tJAjOuP4rxv9DzOfH4oia/0J6
dLYSIotmgflY1gXMfWahx8i3atgg3U0VJ+fbdGKLRgi9pvWsEY10QhMtCvhh
JmRayumR8/og03aDAGHWcAC4CmmyimXR8aw6Kg1HPwn0XHouJBhaDO8dsgm8
OqZbQ/PqaREbZ9QnLYWVhaB81CcpRlTlmKYS1wLzSkxfSxgrMSPZdZsPasD4
jZh7DdyEWx22y6kSrEYhuVLrYFUs/L9GbTHTUlPtZFAO/ycaJCPoppBrQNCB
+UhfG2uoC14dpDOoY93YQgGns2vjwoU33bSwZenyJUTHcQXsCJAOIuDYiXUH
1LDuZM84KSKBl2S+m1RsI2CCUDKcTua5QKhao4NG4ybSbXKwKd6Fb8+O5nGT
TKBD5dEnkPowpBYEWMbDcoWKfDMReryFbgHCTRbRwe2TtetksTq1QuavxJw9
hADjwV+WxMxjbqZ1EszlPWukvWtEXSuBOX3jCnrHGmDOalvjlPADcrGNRXdz
2V4uL8DjhwRCcB0WyyISeUSmQMDAJ1SKuFwRk8kTMnlaqcrr9BWzacztrLut
e6ZrV04f/PmjV798++T7F55+//yTn732zPdvH/n9x6f/6bvX/9vvPvjvf7qG
+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
X5bAUaTTu3X9G7UDG5W964UdK/lty/kdK5gblwyuWUDfuKpj2U383jZIuVPI
t3HYHh7PxmC4WOz5cHO5uOnl871CgVfI84l4QbEQAczDElFCJkkpZKN6TUDM
vasx+s2bZ3537TWQ+8mlw7/68MyPV0//5qNzv/34JfD+j9+88efv3/rtx+e/
eOPoe6cf+5iS70OfvHbk52uv/JfffPTHr9744MIzb5985INzj507cPvZ/buO
Pjj31gsP37c5/cSd4/dvzZVDqmJAUQyp024J1ByYZ7wK2HVkfKQkMrJU8jtv
kFJDtcGmP4QDJA0kpxAys4Gv0/PNFpnFKjcapQ6Hxu+32h0Gciay1+eMJ8I+
n6dUKvj9/ngyFo4GgjE/VUQuG4OaF8rZci2Pl9D0Wr0IzBHAvF4r4ooMfbyW
nmruEEfMjKXIhnHE3ETmRgMPwG+eziKo/H0iicz95ikqbZ8b/xfM/5WBJ5jX
M7bZamCm7CvGDFBzarA9ZPCaBC6jQCcddugFHpNMxunn0zt1EhaQJ4UdcAXp
WgG13TviUBSi1pRPF4V8m4QWNcum5QDwkFMBxvGdUPBmpUr5qFeJ/9plJN1R
HTCvxrT1OEINxqHmuFbjqnpSM5bRA/B6Sj+eNc0U7TNFx8SoZSJrG89YSXmN
ctRUDBsI7NmAPhPUp31a2Aa/SYj/s/CXD1jF6KIpG9Zc9dqcOudohUMCejtn
cCOX1skZ7qD1bhjqXjfc3zYy0EUb7Ors2NDX27ly5XLwi1972PWWlgWgY34I
7kbYEetbN5ATE8jmteuJ+fAQMe1ADJk4gCVDZOQm1Ba8Q5qREpCaTghyTgoZ
eCeFHIE/nkeQ+ThS3wkfRz/g9QXInheySB538P2w92SA/aYFi1puWgi0CeZk
sP2vxPyXsq5gfMBD73PRoObd1uEuUuFN2dsq7VnP71rD7lg50rqctm754MoV
gs5u/QjTwubZOFwHj+/i8h1srpXJQNhYTMi3k8ty8dhuPofSeiHHK6Sk3Cfg
+ZsREQljElFGq9qWjj6yefznD17/1ZULn7z+3Nfvn/n2gzNfv/v895dP/s2V
F3H9/NIRmPOv3z7+649f+ua9FxC/+/zi//rbD//8N+9+9c6JDy489clrh4D/
hxcOXD7z+KEHZs8+dcfRR7Y+de/0A9uKu2dStbihnjCWQrqkQ5JwSoImmHYx
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
fI96DtHVOd/dtdjbszzQv4D8fbRvtkueWXP++qM3fv3R6//8s3d/9r0XP37n
6V99+CJw/uiNR37y3tP/8vO3//UX3/nF958H3W89e+f3Xn7gd5+89u+//i5u
+M7zd7/yxGU4eTD+H59+90dvPAr1//0vvvPkXbVXnrj18bv2b65sX65FLxY3
CpGVzKZj20vWP8bCpi2fNuych4hvepeRqqNEnczmYnYsIWPK13JzMm1mcUg7
0wvMTQtIz8cg6MuzRNANzCljy4tTFsuy1aLXLM+ZzFpous1uDIW9MO3APLzq
S6WjYDkW3wL7wPzoGHK+i4CyV6rIzRPVSmG/VkagsleCey8yBj59UM2AdKrp
tSI5kfywEqeYf25ufljcgqBTzOk69AuljRvK6xdzvqO0C5gfppwXs54bcl48
JcgnnPtxBw0wnvDNp4NLUPzchm7bM7XpnkiGF1OrSwAcTwE42I/4ZpixsIXM
hhaAowTvmQ1dvef8JOZ7CVct6d5PefcSSJ1c4L0cdVfj7mLM/plwIijj5JA4
ZOUhEzDfXNGgWYamh61TPsMoYCeML/bYNb0gnRlQ64dj1072asZ6F4a7p/o7
x3qVPR18mHa5hBziJha0U8zlMmFba2NjwxlgTlalfQnMgcbp06dpXkz9M+iD
sIJWqDmwpToOzOnQGNgHp3Srdsh3/eAVuvcUXoKUg2u6JTvquF9n0MPS11uA
kbFRJAJoT/DPQdORlUPEaYf/fx1z+6DS0ic3dksNXeSYcmBORsxlvBkxe0LC
gmO/JuVNan6Lmt86IBcOKkTDCvGwUjKqlI6qCddjnfJhhXS4A6QrRhFK+YhS
jvpEJ+rSya4OCD0qU2olaRYGeqe61XhpolM2qhBcyOz87uP3gDkY/x//+OOf
f/DCT7/7LALK/sErD7365G3ffvTm1566/en7Dr/38pW/+9Grn3700nvf+sZL
j13+zvP3fvIusej/4x8+hIJ/59l7/t///ukvP3jxruPU28/d99Ct5VsP4vfd
VLxU3qmkAoWYB2gD6t0tBxScLlqhuTldmAnMIeXIzevj5mCcGZYlmxpZlsaA
ORjXTJPdFYC5dnFCvzxt1M0jPdfrFg36JYtZZ7cZbXbTisfh9bkQdEuZ3Uxi
a3ttc2t1J7JRKueYk1mS5Uo+vRvP5dN7e5V8Pnuwv3d0uJfPpauV/MWjvXwm
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
BpPKatfxJtlQf5/TPPzQ3Zv3HS02UvaxlGMi7UKMjzrJw0PTadSdBuWg5hTC
2Lt/ohhAENEI3GmVQyL1pOww8GxtTNxKefetAahBt4g55emEeQNqnmHL5pvZ
0GQxNllINHKxsXxqopxbm51amm6tzk7vbq1fWF85uLh9uLdzeLCLNBx0g3EE
6Thhfnh4YW9vAzq+tbW0uTm/sTEHum+KLYq1zubqNOXmwByCzqx7uwKxnmok
2c6daqxZCtcLQQQaY+UIGrg/WYuDLzzsjKfZhGASXLOdO2AfFBdTXtyp58No
IHAf/QOewrU06gOVtG8Udh1Xcunk4cWpMZF3IRyvNARHV3wtUnNhpN0M0n0O
HQu7nlVsthtY2Di3zWwx6XhO28WcE4rC6WR0KMMdwJw+kdScVrtRERiaIKMD
VmhivVqtUkkoWgBPK+XOC3Whb2X89mF+4/mnX3jx2RdefO7G889cv/H0U1/+
wj/8w8c/9KE/ft/73vfWt751fn7R7fYCP4PeLJepjUaT1+9xex1qrQJ6bbbq
BkfOwLfDrrPZNCNbJ0MnrEnkg8OSAQToNttNvMMMnMmcg2g8BO80uYabEHqR
erfPzgRdwF9lQB+hGFFKR1QjRoterhoaHO4zGaWcftBhlrzp8WuPP7RfS1ib
SUY6rhRM33Oe5ihU1TUOfS/6pypBRKscQIiYA+da2oUA4MAcQeyTuKNN7l0c
Z7spyLezpbMC4yL7hHkz7W+M+hqZIAR9Ih9vZiIgvZlLzo9Xp2rFTrOysTC7
OT97aXNtd3sDCTukHaQjJSfMKY6Pdw8O2MgbdHxzcxGMr6/PQr6ZUUdKLjAO
Wb+wNXeBnd08v70+A8yZb+80KJZnG7DibBNuNTZeiRLmYBlX3EQ6jDaeysbt
uYQDvKOdDFrYvryUFz4fwoo2uAPXuEOOGoEGUQ8qa1k/xJp2j5JvpzydcvPe
EMy8VTDqjlsn1Mi04w175tSg6Txh7nfqIeteJ+exmzx2/juI+eBpbn6+50xk
3AfgVJmZlBpyD6jxmng8Tita6dgFYE65+U2YiyN7twnzF198Dphfv/G15194
Bpr+3PWvff7zn/vEJz7xoQ/92Xve8943fP+b5maXPO4gb3bYrG6jgbc57DYH
b+INsNY6o0JIw2Fchhxujs2vOTmwD8yl8mGVBmouB+bQaIfXTkvdSLJxEwoO
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
TaOXWW0Gl5u3OzgTr+I4BSsYZdHA8iiVA9B0r5d/x0/80Pt/7m3ff/f2fDFY
C5mAecGnz7jUoL4cNlUi5mrcwobihUG5KcG3A2RIOTCnMTdx8I1m00RxJ8Yr
KQfRTTPjpN00gQ60AXjKZ0h4dEmvPh3g2Kx6yskEseAjcEgo2QZVdCC1OMV4
JUrgtyrJqXqmlE9WK/n21Nj62uLFi0B7HXHp0qawDGb5ppUwBPjqantlZQpX
GojbFFbIdAFfaQtVagXG58ZX5przU/nZyTTUnJV0EDDHtwS6ac5aHPGmiexc
wkYWmhaZUwM4Z/CjpT0k62gjRNJ7Tbs4e34r5oKUM8yF30b3d0K+XUwf2JcW
EoTRsA25OZn2aEDPwm+K+MwBD+932bx25gQdFqvVxJk4HQ3BAXOOk4H02435
rdQTR2hTCUcafgfgdrudtqEZjUYLZEmlOnv2LOw6TaPfYcxFxoH7jRsvIEA6
a19/8YXnX3zu2RdA+l/95Ufh3t/9C7/y4IMPT7QmA6GggdNbbCaXx26y6Gkj
Khy7sP90hFXw0Chh19VazeDwgFyjAMjAHFAjaMCNNB3ID8kGScqRpAtr2odg
D6SKIfQY8AacSW2zo7tQa/USSr6AOWCXy89D2XHzh9/8ut/9lZ/8sddfu9DK
NiI8YT7qUBb9hkLAUAway1EzG4ofZYvlWt0kPfCymNOAmzihBsZppRwxTlyT
duOKGPUbEWA86lRHHCpcAftoyMQ0Me+tFf2NcrBZCY3BGFTCuNI4tlioilR+
rBQr5hLFQrpRL8G6b28v00qYCxdWbl0JA7SXl1tLS5OLixMItLuj7qvt1eUW
S8mXWrQWjla6Um4+M5EhHSfHDgFlu8ZOp62Jbih7Nm5NR/nRiFlEm1w6WXQy
7biORiwIiDvBjqAZcxp8o4oQ4tqY3uUxopoLXHt7/QMlCNSBUFYOxoVgsCfC
HCIeNMWD1rDfFvQ4Ai6X3+l2Wm02M2/iDCLmJrMMpN9uzHuf7cUKAk0Hr4gl
ZTiOoxrO5OQpf6fU/vy37+TT/13MBTEH0c/feCnA+LPPPI8rPr785a9+4hOf
/Ju/+egf/uEH3/nOn7vnvns7szOhSNDhsiLgsamOK524BCnXc2q5UoZQqJRD
I4NSlYwmwWnrClvFqmXD74CacnZIOTCnRXEAH5gLjp3Vf9YbZdBxo1GuVg+x
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
TNJwxBZPuJpjmVo9NTtXd7p0g0N9bo8BmKs1/fi54O3h6j1OjbAqVQdvgJwd
nZ5Auh4pP6uyBd8+6oCO92J+SrpLzOVJzQlzqPmtmLMJNYfVbeNp3rwXc57X
ssXtkBedQiobQmIOzAcGz94ZzPEUWCam1MIHGv1CiQkIOjFOuTktlfkuwVz8
uHHjhqjsN2688PTXrn/2//vCp5/81//yZ3/xf7z/t37gjW8+OjoulUput5sw
1xvUVHYPV/zO1RoZHXJqMHYrcFLZfKliiJ07r2PLWRGsXpyBDcqxw9eEZByB
XgKdg5rtR2BoO5wmysrxAtxn9kB5Ppeyv+un/t2P/uDDV3dmVsbTs5XoWMrV
zvprwa6gi2peTToaaTepOVl3Wv5KtaR6C0mNVfwQdEZ63itsi+5OKtGAM5GO
KzCnkWdqMEF36+FjHQ6d3apmkzuaQYXinFJ+Vq44YzJKAT5nkODKAw2ryu3U
u91GvNhmQ2qpcXlMmUy402msrc0IhSLnV1c7C7PjM+16e7IyPl4cq+eq1RSE
tVSOIao14JykNm6KUa7Ei6UoJDiTDWTT/mzKh8gkvaPxbscS9vNIt9ERRYNW
NNALAVU8W8qFUzFXLOLweLhk0ptIePT6EXz/Gs1gf38fGuGwHZ1PLheWy89a
LCqeZwvPeKMUn45E3mljTgaWIODSsHVrPZjnYlZW7n70pbgV85fNzWHaR8MO
EfOgx+ZzWiHlLqv5JsytFiMwN5lY7UdgTkNwdxJz2mlODZVKBaNO+0+pAiR5
eAL2G9d1/E6pOTC/fv36qZOnZTPPPfWlp2nZzM/+7M8/9tjjCwsLfr/fbrea
TEaoucHIelSdXgkHpVBCeUElO7aS/gS0fhWh0srkGqlEOTyiGJKpJRL1yJBs
gJV8//p0nqAG9VBzBJ41GJVGToUG/s0yKedb3nDfL/3MDz18dWNzpjRXiU6k
3FMZXyNsbUZsiFqE+fZK1EqYQ8pFzGldXHeP6injpOYi5sLMsuvW9Lw3SReV
HR4YmazTqTeZ5FotevUBlaqfQqMZ1ujYgnydgR3lqdVL1NphpXrQxKu07NT4
YbNFnRwNTM80hALvnY2NueXl9lynOd2qAvPWeAmY18qjpVI8XwgjQDdwhpcG
zoAabQo8lc74U6NexGjal4y7AC8AT0QcxDVSadhsSDB4D3g4TjcMTtMJT6UQ
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
mo5Nej4rYFGIEbs0wAEPIBTcphFeeP9hWtDEOZyNuXycxsJnolSHIAZYpdJT
0Oahny/7+XbZmKm7g7o107DlOlTenSQZxw/0q3anZDSLRqOgVymoToyLYLvQ
4C6JZ+eov9XTbDvPSyFxLcDhUdW8GBNKczN0IxOEZrlKmBcKxnAGrGPkc6no
NKWqYxSGI5nCfSwKwdvLcqRO5hGU8rd2O+Jusw3PdTJ8Y2OeS2jG/wD58//K
Ic/862cd83vvvffUqVO33HLLF77whUsv/dRb//ydr/iNP3zWv//xpcVN36sY
uqMqJnwwnH5ZHN4QATunn+hTBv7ieX63mG7ahRyP4v4I7CQZWmeQxBWbG3am
55WUoiR0JdmuOMu90lov2O6H28C8Yx8M3LUmYc6lsFDoFIefDY4vlSmntlJj
Dx2MH1uFQm/SquW54u5qfdiwJnQ63HMAvrZQpXDcYh2Mz8+UFucq7bprm8mM
2OiHPx7mm6Lh2lXgpOSU/HSShriC9MlEJJqdzJoJ1U0pDo2SG8ecDW8uepH5
Ne5D5zI5WQ7HiTMunGOPnttRYe3wDw8b8wXRikobGEWyj0ZKinUPaYhYvcqb
GZO0pF4M7jNpYDLN+CpRWYtWCZRWSQfjQ8zbnti3UljoFh4B82bBbITGKK0G
Kz3n2znXyrpu3vFw7Cg0J1DP0p+hUE4NHq0mDiUaKyEwL1XsYtkqF0z8GbSf
xTWUfDYWnYI9h3fkdMynEpOQs4V5ZnTjvUuyLf1xhrlsW+MBsCD9+uuvv/LK
f37vey5545/8xUW/8NInXfiUeq2na3Y+R/aZKA8cEs2Ac8UIP8kKXQKOwxv3
knR8Cz8AwU+yKQtVTkUyAnNcOXDugLmjxjsla3NQ3h4UgTlXyKy3NFHlTuXu
MN0h20KhH1+qQo4t1SGw3sE7ZdI32lvzpb21BjezAPNhP8tyA3Y7OelLDehx
ML40X+21YLcD63QcPGZSuHR5RBj0EK7RtJLJqGmcRVPJyFQ6ktZjup+xCipt
PBThRPavZYk7u+Sygp1nTcDqdn2LmwJkaYGcn8lpONn8wgY/gAU4TDcwh0CD
xxOTQJsnbANwnj6HB9RhZOQNl0b5aVygEigFJ1ML8v2aKTGHHqe9xqLt9IyY
lx4MtsNoh6EOgSr3fdV2c2AcLIvDRJTHCIVumEx62jCzjHmhZNZoRYtFu1N9
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
SxldB90svNqApiGpSRBnZKdKTna+5m51wz1Ixzk58I93nYOWvtNQNhv5zZYC
zOGhr7aZdHO9azHmKx0bAsYXGuZ801zuuqu9YLnjLXTcxa7HY5R4WtpsB6a7
32sF3WagK/FEIpJOTzmuCsxB7nQ8QkgmJrlYhWPsNBtNzFSRwxjZzucXC8yB
MHviIJoj6tI+xzOw2DmtxqqcE2qygo6Tj4w2W/I8b4pL5ob1Bmqe5jWJWhRD
z7uODoUO1Uz7SWkVGjnp3JxSK1HPKfvsPPONh0HhFIWTApecVLmdh4BuXZyx
eNWM+ekigi1ZDrbjS652wJ9RDOyCa4auFTimpeVBOrQ5BIzHvpmtK2eF5Ue4
fbOYH7mdbayP3niqjMQcdvt111131VVXffzjf//Wt/4F7PYfec6PbW8d1Gud
bEaDNofikWPtxzGXU6HGrD5x/YuYG1MsO7KlPz7ekskajbRkPq7lotSzVrY2
2v5+r3DQC070A2jzYx0TpO+39d2ODtN9u2ettQxJOtT6GgFuQVY67hHM59sO
MJ9rubNNh/o0G1a/7rDp3m+HRV9RstPJ5AT+dx7yANMa1jvPVWbLRE5e5VkQ
0oBn2Fmbc4x9OBQrF5fCmh3f5Yw5/wB9KXyZ4Sk3mhIpR1KwrS4xp7lSYjaX
quBjSOLedYxS6JQLNhR6UexIOkI6vmQ5gvmwJMbMQmi7ijJ8OWfCnHe+c1oN
x7jnWxDb0kLPDGzdtw3GPJOIPoH5OYk53TPmcM/vvPPOG264TvSlfvpd73rX
H/3R6372Z55/4QVP7vfmVcXR1OFg53HMuY1lOP9tLDzLI0kZZLmHSPrj47Ne
5VGgUQOUSa6ilinY+V7RWmsH+70iMD/eJaP9RN+BHO/bB31rt2dsdfW1trZK
YrCstPSllgmBQl9o6EPM+/5Sx5nHM10HsM82h5OUOhWzW7eB+aBTaFYdy8Bh
NQnTPZePJ1OTuOyh1rk7jPtApRLnJznRJo12xh+amnPiUNYyzM76nZbJKklW
7qzugbysh2HGObnGLgxrdlkxOJzIIVqH4vEobSQUK6I8V+w98XR46JBiqDLp
7KdLxmmIBBzzEeZgnKpb9bScEsMn1ZkwHzfmodmD0AkLrueavqPDaHdNDaTb
ugInnSPtT2B+Tt144Cvu4ZsD87vvvvPGG2/48pe/eNlll73vfe9705vefNFF
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
7iKY825WY7bpTU5zMrDmNIK7rud1WqMiV5OTrZfnAv5OkzUdcxTA3MEJTt4O
YucEgbUB46CaBKPJxzJ+kzpm19fGHVeV+f5W7b+5Vf7D3WpmD3165YTXP5n2
zlebZ0x+5/Enbmx2Z7vS65pGOzfMa1cTbled16ZBXl1VsLbM07AqWNc0kRcy
x/O4koSzsshbVeAnmIedJUGhNOqimAPjKczt4YDdYlGr1VIw180WMh6Z7Eqw
6OimQtoTSuevqlND7WgXOantEW11bNfCOBtq7XqYY024TJwrhfU26VNe0xtU
6aDXZPlcytoHO4FY7PB/ZzVzrCEdcxzfCpj73VxqbaIhbQMyARxgB3HwRtFu
NwDpvElP6mTILK/6mAOkYphdiY45fv9RoaPivlBooRTFHAgWQ/GXxBxfEx6H
VTTwXmBg/ddhjj9eQaJ/z/HLL7/8+OOP33333dmzZ8E3R20Ovjlo81mzZn3w
wYjne7169x092rb4W3lBRUEwke8PF3j8CbcbJO5yRh32sM3qZVm70cDr9Ba1
RmBYp4EH0n280291gQDjQLrdxAtEfROxs+ChC8C7m+N5tSxqYwpdhpoI367S
36lB4I72xW89du26qW8fXj127ZS3Phrw2Oz3nhvy7N/vaF96Q/NE9xZFrco9
HWrzmpd7m5T7Glb6nPZcmzXHZJTkhdiKIn9lob+mKFwZ85UHnVUxH8E8z1EQ
FkDyIw4QYDwSsIX8Ampz0sHNMqTSTJlD20nSm0owd4ZnGjGj7SdkZrX2V9NU
FGSyU2a99i402nPFFpgLl0xhSQxiTjvQ8WFwfcD14iCg0M0WBo12i0VLhkuY
NA6biTTVMrkmvdxq0bidRp/H4nGZsN/c7TA7BTNcDcS8m8VuNQPaIDYw+8Fo
IRPXdWI9bTIXQIKH4gABljXrdBq5WKMOX2MFljwSA1WGuh4D8ujFo3Kn4ThM
uqFyv8yB5i48GaPx8CNG/OC2RCJB/Y68YxD/z4k5Hlea4984LoP57Nmzhw8f
+cqLfR+6/7HOHa5pWNqgOJwo8IcLPf5Cp7vA6QTJdzhidntEEAJWq5+3+Tir
y8S5TTavxU4w55xwBgHSAXMQh5kwjgK8Oywmr0kTs+kqAmyrEk+nBsHrm+X1
ur3l5P499yz5YO/S4ZtmDdoyZ/C2+e+P6fPg/V1qbmtTcl1dAvz3To3jLSv9
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
RqEoUeVub63HB1Lj9YENX+EPlPn9IKDZwYwHnx08d5BClyvf4QCrHtR9HnAN
Cp3nidisYOcn7HyEVTSN8zfU5T93V/tZQ5/dv2w0YH583bgjq0bsmDdgw4y3
ln748rg3H3y3181vPtb9pfs63dyq8Lq6eItyZ9vGoQblLkHI4u0yI5fpzbMU
lnlLSkMpzMOVoUB1JFAW8xVH3YA5SFHUg5iDQo/n+YoKY8VFCa/PCQYqabaS
ZuYq5fWVaaryvN4MN/ojzaOhM07L2tMF43L4q3plrum9qBhvp++VLHzVKrCU
HVQ5bpTmsN5VTKgB5k7BTFtXwHTXqqQkS8goQNeDrQ4PQ8zBozeRLDlR5XAG
c93A6MgmLIsexEji7SkPnZSyq7BDLb3SNSdV7IpNK0A0MA6OPDw+vewNGccb
2N12mYPyTo1zDPfBm+JgCmmqhOb/K9rpx+/EvN5xpTn+jeNCzPfs20u0+do1
CxcvGj9h0uAhH/R+9Y0e9z18Xcdr2jRo0rSgpDYcrfUB5n6QGm+gxhdExgt9
oM09gHmR3QmAl3q8IMUuD2r2uM0etVojHBeyWMIsG7VyCbutyMHXBCwdyj23
tyl9+7EbVk96e8/CD3bNH3p0zbiN09/aMuudxWNeHPHK7e/2umnU6/eN6H0f
kN6lNtilUaRZidCmSaS63GnhJYInV3Arg1FLcYW/pDRQXOCpKgpVJ4JlIXd5
nleMtIuqPIU5MJ6I+KJhXyIajEVDHq8DXFHMB2n1GhnoZ1HkCpkogLw8Xa2n
Y64UdxbQDjUsa0cDuB7juHbKKFbFYCUt7S5PL3ZNb5zBSw3YANi0gg2t4J6D
+e1xC2CHk7w5Z3Q6WZfdAqY7qHW/x6bTyVVqqU6v5K0G7GUDox0wFydIKI0G
LTjmgDmY6yYjYxe4lDbX0AZzLIRD2GneHLUqVrih0w2Pgf83k8kAdns9JY6Y
I/iX922pZkfM0ThHEwIwz8jIQBf+T4h5vWddaY4vfmCRDJbHfPfD99+ePXPq
m6+Pf3Hi0JHDO/bs3rRl8/LVq2bPmzt52vRBQ4f1faPf448+dWPXG1s3aFYb
L24Qzm8cKmgcTjQMxqoD4XJ/sMjvz/f54gFf3Oct9nhKXZ5Sj49E4z2+Yre/
0OnNt7vLfCEgPY/l45w1xrF5RiZuMZU52C7V4TZFXI9ramYMeGrvwhGnPp1+
dNX49ZPe3L9oxL7FI2YOfuqDF2+fMuCxCe88snDsK0/e0vy2q0qvKnV3bVXU
tNrP8xKnX+HJ02stkliBtaDIUVbsLi9ylSSAaAGkOOosjDryIySPlh9xIOZF
iUBhLBjyu4D0vKDPYbfpNFrwI+FLStI5Wo1CpZTlyqXwl4Q/MuE9F3iHG2DS
Yyks9o1i+B1dcrDGcacYqkW6ZxCRR7cX/Xfs04eXooItvXgbfyUaFeQdwY/A
BcTYzYqYY3JNPBtJRI43AstAtMtpdbqsnM2k0ZOrhMFM0nAYnIfH46QINNrx
zJkYEmw3gt0O1x/ioWu0ubjFCS9TmENHm5y2nabvbE2lBRViMzJeFXPTJVep
yPl1SxolmobX6vWtSCQShmGAdLiBiXWE/fcY/+nHhUGAi+L5m4//r9bmFPOf
f/4ZMD995tuvvj4FmO8/fAgw/1TEfNb8uZOmfzRw6LA+b/Z77NGnbrr2ptYN
6xomympCBQ0DiXJHsNIdrPCFK4PhsnC4KBzKDwXyA/4itxswL/P6y32BUm+w
xBModpNzhLVFCOO2fKsQNTAhnapc4FsnfJ0rffd0KB7f54Gjqyee3jxr38IR
O+YMhfPm6QPXTnwT7p868PE5w56dP/qlqUOeeur2Vo92b9Guwte2NtKkxu8N
qKxeGevKASkqc5WXeSrLvZUlntICR3FCKIjbivKdRTFnQZ4dC2PANwfS8/P8
oM39HnvA6/C5nA4rb2QM4IaC/gG6lKkwtzRHLmIux68roAdfZtq0gqqW5OBE
ZY37nTExhzl0AB9gwe0kyYES6L+LUAO/AAUAotaq4IwvflHM4SnJvfCMGkgH
YMGAB36xmYWM2XTw4LnDmRenRFoFVqUHbz8LjA2WNwkOHkP0FHOMvyHmGM0D
xhkDoC1HzFFwuRJOeMN6NtCu2VIJwTw3k/o1oiSvVKlLYi6OGQEhHU2XwJyS
dSHmOp0O3hXoRq2KKv4vzP+N439SB2B+9vvvEPNjJ47vO3Rw++5dGzZvWrZq
JWI+ZNiIN9/q/48ne93W/bYOTVvXFVY1DBc0CiQqnaEqV7DKEyI4B4JFoUBh
KABn0OCVvmC1P6/SHwHMQZsD46DK4XbMKoRNxrCJiZn0xTZLq0TopmYV11QH
Rve+9/O1k85s+/jLTz46svzDvQuG7543bNbAJz8e8gzIhpkDQZuP7nt/70c6
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
8uF1E0G+2jrr7J4Fp7d//OWmGXuXjd6x8INP57y7eEKfj8e89NHwXndeW1EY
yrHxklih0puX1bJT1BWVxSrMgXyt1ZnJWSRuqzzk1EdcpqDb7LTr9QawKiV6
fa6BFHlqwQ+1iUPO4TsMTqhKLVWqiGqWyiW5WqnOrAJR6nJxNTnmzgBw8MdB
ecENtU5mtGjMnE7L5CrUmSptts5AjHbwZNE3p3VuqL6xmp1ST0kHkMHjzszO
ACEl6yQjT2rhkgE3sQgW6MYiHcK7WNmiE4vnwXqHFyTj4MQtS4KdA50Lr0kX
OSXXtSiltPENMUfbntj56ly9TgUKHWDXAoKyzPRiV7UGrlQKUZWTxnZ4Fs59
wnlQpO2UUfM2C2CO2TqskIHPDM4FaHMQHQOGil4L7yHy/ptGuzw155ySLks1
qqjVanTPUaH/2TBPd8xlf0qjHYvfcNPKt99+Cxb78S9OHDx8aM++vRu3blm9
ft2SFcsR849mTZs4eQJgPmHkBxPeGyxi3n/BwAHLBg5Y8FrvZW/2WfDKcx/2
uPvd2697o3v7nnXlnWO2jsXONiX26oD26trQqulDzv3zyOkDaw5vnLNvzUf7
1kw9uHrylvnv7Vk84vDqsdvmDNg+f8i2he+f2jX3l89Xgt0OHvrX2+fsXjQC
fPM1U98GxjfPGzp71Av3davKs0kM2ZK6an7jhrHPvNAtv0Ibq9TlmCTRckOs
zBSKadxOWdirifmMUa8p7DV73SbOqtYyMoNBKSbAcxSgcJU5eh1apMYcmUSa
I5FkEZEqM7QmpYHTAulm1kABwXA66HGFOgfsc5vD7HBzBrM6V5UBpGv0OeCe
I+bogKNRjTdowQziSdPfWdJMFIAdFTfWyaS3xdGoO1HoqasHjpEEwD1eh9tj
Rz+ddo+ih24w6SSZEsAcE2rJUj3xt6SkDUwLpQw3y4M1rVHIwGgnk6MsWsBc
rHclZe3wL8LJ7eTDiyutGbJohxjwJAhghquJHFcz43RKjBxiwU8qHQnXHQ0a
8JfCPCelyunMCnwkjc6BHmfEA35Lx0qkg4aIXVnM/7QhuHoLlU6fPg0WOzjm
YLHvEptWVq1bu3j5srkLF5zHfOLY8aOHf/jeu+Pe6Texb59pfV6b0+fVxW+8
NuPZf0x54uGpT/b4sOfdb9/U8bGWFbc3iNxaF+/aKHhPl+rODUMJW9brj994
7qttZw+uOrh++val4wDz3ctGHVg+Ztei95eNeWHDjH67lo44vmXGya0zwW4/
uXnG4TUTDq4aB9b7+un9j346dc7w5zo1cndo4OjU1PvSo52/Obr0+IlFHa+N
O/MkjjwJH5J0vq06XKR3B2TRCJMfMcUDxqBD47VrfB6j18+6/cQNJwYqKC+N
QqnKIfPYxW8y4ED0uCoLRK7J1hgVDKsBIb6tOGAZHHPAPFdF7HNQ+qDKAXNe
AKhIpB20ud6YS0x3o4buTqI3sK6VTpUBSxtcbFJbQpYm59ZLmmNEDhlHS57a
86SrRSyBw7g9psaAcWxFQQ2OCCeNB3GJqkyVg/03cGbE2hjU+Ig5iMhfJmBu
NGg4crnQ6BkFYI417SgYYQDGcTScTtylhRU4YNug74+YJ60O8R8FehwECwix
2PXymOMml/ThFYg5ZtwM4I4YjdjGUo87GpG7UpjXCwleaazrH/W2oH7zzTdf
fHny6PFj+w8e2Ck2raxcu2bx8hVzFy6aMXfuRzNnTJ857aNpkyaNGzP2vSEj
+r7+wQvPj3j66Q+fenLMwz0m9nx4+uOPTHv8oXE97hx0e9dXr231VMfaHh0r
uzcNP35D3eldi1ZOHsBmSloU284eXnvumx0HN87atXrihrnDVk8fMHfkC2Ne
v2/FxNdBuR9aP+nrnR+fO0FSbID56ilvbV/w/o75w8A3v65ZIN8m2TBvyI5V
Y1bMfOeXbz89dGBWcbWmqFbnTEi4iOSmHk18BbKaZq5wSFkUM5fn20uitvyI
NRqxBUNWj4+1283YpElGK7AMfIHBJSdjHtXZYIHbXSxrZcBWz1FlShVZOcps
C28AWEhmymqUKbLgKw0qOytHAm44PB4M9WyZBH4EO8HMaYwWknvSpibCYZQM
HWGyYyhtFTiWxilTm9DpojSRFAX2uV8Uc8QN7QHQ3WCrg0KnJbXJHnaDRuy8
Sa6NyNXIcY4c3IZ/CDwew+bUp8iRZmRnSUChYyOqTg8fPpfqcbH3HD5ZFrwF
AM6yZiAdx7uRnIIymybUsCYQ8wXoZYhL9eBzK2jI/XdiTkk//0RFLmBuNpsB
c4lE8mfDnB74sCuNdfL4n7SDGu2A+ddff338xMkjnx3dt//gjp2712/ctHz1
moVLV8yZv2ja7LlTZ8ycOHnS+PEfTvxw7KTRI0cNGDDw2ef79ej57v09ht5+
73s3/33c3fcMveG6Qdd3GXnvTW/c2P7Rqyqur/K8cFvLrTOGHFgy7peDa388
uPrero2YLEnvXrfv2DR7yfxh82e++1qvWwe/dt+6WUPWzxi0a/m4k9s//vHg
8m/3zAff/OTm6cc/mQI++5effrRw5Iuz3nv6h4NLTmyePqz3vcunvH3uf/bv
3zuzotYYLsnmI5JYY/lNPasSjVVXdc2LF+pKS/jyAmdBWCATXCPOeNQVDtuj
YZeNY9xu3ucTnE7WYtHmKjJZTl9Smh9PhPPiQbfPTrahKbI0BrXeDF93mUqv
0Jk0BlbPWHRqQy547qDuFbpshlWB5GqzpEqJisk2cEojrwH8dQYV+O+puU/K
VImLIhVSE4e/iWXwYPyTR4r5d7idLIwXt6qlNrwko3C0IBZ+i5U54BR7/S44
0/HOOIgS17Fhb2z6zFjc2gyYg1mS3jcKeIJpARTDxcEqvhp+eLo8Dq8/Fw6a
xgwdXOWk8gwso03tlSOZwVStviYd84yszMzsDOqkYCEQCvwXweOxcwfLgbCb
NUtGJEOaDWcwDMAag7MkQwLgX7RCvh5u0guOerRe6rJzGYrTLyzpz00/rjTf
ySMdcyxlx/jbqVOnjh3/4vCRz/fuO7B9x651n25etmrtgiXLZ89bOG32vKkz
Zk+d9tGkSROmTBg/aezYkQMH9nvm2VfuvO+V62/t0+WGPu06D+56/VsdOrzW
tmX/Gzr26XbVi92a/b1xZNzL95zd/PHJddNOrpv14/5Vu5ZP2bxysk4h4SyS
tWsnnzt3+O83NHn6oWt2LBs/aeAzhz+ZdmrXwu/2LTm1Yw4Y7V+CAb9h8pGV
Y/YsfP+rLdN2Lhi2YNSL04c8AxeEHw6vOvPZigljn4sX5xY3UltCkr6jbn1l
+I21Hbl4rSqvQFVUxJYVOovyXImQI5HnyY+6oxFHJOjwOC2hkMPhMIEBSMSk
DoXdbo9AguSpMVCkEkavzMiRAOag3LVGgjy46oC5Ui9T6HKAbmAcuFbqpTK1
RG2QGnn4UQU+u5ZJkosaDUPNqUKRbGxqI7/Vwpnk3OXKTBBwBEAtglOAvKcy
3TicQYaYi63oORjzx9IXwJAOrqEb2NMxp/ThGHl8vJj2ktFdUTnEd5DBtQVT
hzixCh+f3k1fD3P8JKQLVew3p/91eGXTG0jpIHb2UczFcrgk4JRxjDTCUwBz
WgqIVzaZSk5iKAp5Jjw3R6rW68w8p2P0ksyMvzD/PUc64z///DONv3311VdH
j504dPiz3Xv2bd22Y+2GTUtXrpm/eNmsuQs+mjV3yvRZH02fNnnyRMR8zODB
7/R6rtdNf3+sTacnmrV5vLrJS81aPte48dONql9o2/i1a1sPe+SGaX17Hlo6
5ty+5V+un75nHvjgH+5fM+PYnmVrl08MBTQsKxn3YZ/3BjzRqUV8zcyhn8we
9s2exWcPLEfMT22bfXrnx6e3zji+bsKJ9RN3Lx62YXr/bfPf+2Tmu+umD/xi
29wfjq8ZP+ZZX0TSsA0Xq8155LXW7e8MVbc3CzFJMCZPJIwlYLTHPDi+FTCP
5TkB84DXCpizrMZkUoNadzjZYMgF1ntmlgQ8dLJ1VEw36806iTSJOSh0NaME
h11rImeAXa7JBMxNVq3GKFfoMnVmOWIO7jlY9aidU9Ngkt3WouTg4iTQ+PBI
ELVOBo9HATVKlXuqfft8li1VV5YNqMLHQ5ZRU1MGEXO6jg2bZPViLA5L+DAk
jnsYkXEkFJe9miwM1v5RoWsg8LJAR96dHzSNl6a0AdT4UVPzMRTpHWqAOVXf
SDdtZ0NXBa4McA9ofHgA0enq3Fy1KkelQMxVOi1gzhgNwPhfmP+eI32OBKpy
sNhPnz795Zdffn70+MFDR3bt3rtl6/bV6z9dsmL1vEVLAfOpMz+ePG0mYD5x
4vgJY8dMGD36w6FD333x5eduuePhlu17NKh7oKjyqaraJ6uqHqsqfaJp+evX
tZn39lNfr5t+7tCKbzfO/mbj7G83L9i/fNK2xRMWTht8cPfSDeunP/JIV56T
tGoSjDikz9/f+dy3u8+d2PDLsfVgtJ/Zu+D7fYt+Orjkh91zv9o4de+iYdvn
D9m/bPRn6ybuXDxqz7KxJ7fPO7bz41nTXo8VyWOVOe1uCjbpyidayNveHLy/
11W+iDQa1RcnBFLvGhdHNMc8iZg7L+T0e3iPhzOZlB6PtaKiwOe3gzcKHjoI
GsyIhpEzqBkVYK7QykEI73oZKHS9RQ1nmToDMLcIoGCAeinDKkxWNWAOqhzI
xZ41BBO/5Jg1Fr/M4gpUjrHwevDuDWa10aIxsVoQo0XHmDRYlpOavJQKsKcy
6fDZBAfvdAtoe2NRLlKGmOP+VqQY2WTEmfOkFx7c8FRJKjwS69bgReBXJpLB
JxUC6QukMD6PVwN8NTr7jtrtaHskx10mVXwyOyCW98hw5A6WvAKbtEe1nuCV
AYRiTv69KjmgLdeo0G5HzA0mI77Unwrzeg/7f7J+fwg=
        "], {{0, 500}, {333, 
        0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{333, 500},
      PlotRange->{{0, 333}, {0, 500}}],
     TraditionalForm], {0, 0}, {0, 0}, {333, 500}], 
   RectangleBox[{25., 10.}, {276., 498.}]},
  DefaultBaseStyle->{"Graphics", 
    RGBColor[1, 0, 0], 
    FaceForm[
     Opacity[0.2]], 
    Thickness[0.006], 
    PointSize[0.018], 
    EdgeForm[{
      Thickness[0.004], 
      RGBColor[1, 0, 0]}]},
  ImageSizeRaw->{333, 500},
  Method->{Automatic, "GridLinesInFront" -> True},
  PlotRange->{{0, 333}, {0, 500}},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.728657181562954*^9, 3.728657221108534*^9, 3.728657335245468*^9, {
   3.728658507847843*^9, 3.7286585248200407`*^9}, 3.728659158773924*^9, 
   3.728661069634408*^9, 3.7286611107583427`*^9, 3.728661157023767*^9, 
   3.728661237291836*^9, 
   3.7286674229734898`*^9},ExpressionUUID->"5e787523-3337-4121-aa94-\
2fdb3e5f4ffc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"FileExistsQ", "[", "\"\<dog-bboxes.wl\>\"", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allTrainingTuples", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ParallelMap", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"category", ",", 
            RowBox[{
             RowBox[{"Print", "[", "category", "]"}], ";", 
             RowBox[{"makeTrainingTuples", "[", "category", "]"}]}]}], "]"}], 
          ",", "categories"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<dog-bboxes.wl\>\"", ",", "allTrainingTuples"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"allTrainingTuples", "=", 
    RowBox[{"Import", "[", "\"\<dog-bboxes.wl\>\"", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728657401832909*^9, 3.728657445623558*^9}, {
  3.728659165542914*^9, 3.728659171851232*^9}, {3.728659379454234*^9, 
  3.728659426777853*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"587aeae8-fd2d-47eb-91b3-c9bda3e60e72"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02085620-Chihuahua/n02085620_10074.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.07507507507507508`", ",", "0.8288288288288288`", ",", "0.02`",
               ",", "0.996`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02085620-Chihuahua/n02085620_10131.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.12405063291139241`", ",", "0.9949367088607595`", ",", 
              "0.01818181818181818`", ",", "0.9959595959595959`"}], "}"}]}], 
           ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02085620-Chihuahua/n02085620_10621.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.28400000000000003`", ",", "0.67`", ",", "0.1442953020134228`",
               ",", "0.8389261744966443`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             TemplateBox[{"\"Images/n02085620-Chihuahua/n02085620_1073.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.`", ",", "0.9043478260869565`", ",", "0.054`", ",", 
              "0.996`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02085620-Chihuahua/n02085620_10976.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.2795031055900621`", ",", "0.7515527950310559`", ",", 
              "0.21487603305785125`", ",", "0.9338842975206612`"}], "}"}]}], 
           ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02085620-Chihuahua/n02085620_11140.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.034`", ",", "0.902`", ",", "0.10133333333333333`", ",", 
              "0.6746666666666666`"}], "}"}]}], ",", 
           TemplateBox[{"20569"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02116738-African_hunting_dog/n02116738_9798.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.016`", ",", "0.998`", ",", "0.03733333333333333`", ",", 
              "0.9306666666666666`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02116738-African_hunting_dog/n02116738_9818.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.096`", ",", "0.998`", ",", "0.`", ",", "0.996996996996997`"}],
              "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02116738-African_hunting_dog/n02116738_9829.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.`", ",", "0.8415841584158416`", ",", "0.13`", ",", 
              "0.9966666666666667`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02116738-African_hunting_dog/n02116738_9844.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.33166666666666667`", ",", "0.7883333333333333`", ",", "0.34`",
               ",", "0.87`"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"File", "[", 
             
             TemplateBox[{
              "\"Images/n02116738-African_hunting_dog/n02116738_9924.jpg\""},
              "FileArgument"], "]"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "0.08868501529051988`", ",", "0.7186544342507646`", ",", 
              "0.13333333333333333`", ",", "0.9958333333333333`"}], "}"}]}]}],
           "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{68., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 30090217217383455732, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 30090217217383455732, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 12, 30090217217383455732, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{92., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30090217217383455732 === $SessionID, 
   Out[12], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.728657529470743*^9, 3.728658915121264*^9, 
  3.7286592367884407`*^9, 3.7286594335070267`*^9, 3.7286610703774*^9, 
  3.72866111147388*^9, 3.728661160826385*^9, 
  3.7286612410463667`*^9},ExpressionUUID->"09d543e2-d30d-4a4b-91f7-\
51837be889ba"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomSplit", "[", 
   RowBox[{"dataset_", ",", "percentages_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ps", "=", 
       RowBox[{"FoldList", "[", 
        RowBox[{"Plus", ",", "1", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "dataset", "]"}], "-", "1"}], ")"}], 
             "*", "#"}], "]"}], "&"}], "/@", 
          RowBox[{"Normalize", "[", 
           RowBox[{"percentages", ",", "Total"}], "]"}]}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"rs", "=", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "dataset", "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "ranges"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ranges", "=", 
      RowBox[{
       RowBox[{"Partition", "[", 
        RowBox[{"ps", ",", "2", ",", "1"}], "]"}], "/.", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"a_", ",", "b_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"a", ";;", "b"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"dataset", "[", 
        RowBox[{"[", 
         RowBox[{"rs", "[", 
          RowBox[{"[", "#", "]"}], "]"}], "]"}], "]"}], "&"}], "/@", 
      "ranges"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728657580415741*^9, 3.728657744326137*^9}, {
  3.7286577776538277`*^9, 3.728657782005314*^9}, {3.728657816549898*^9, 
  3.728657959844556*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"ea0ee7d0-a401-4ed2-8a76-4d00c870012b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ds", "=", 
  RowBox[{"randomSplit", "[", 
   RowBox[{"allTrainingTuples", ",", 
    RowBox[{"{", 
     RowBox[{"0.6", ",", "0.05", ",", "0.05"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.728657668575152*^9, 3.728657681710299*^9}, {
  3.728658006332699*^9, 3.728658027731473*^9}, {3.728659441338374*^9, 
  3.728659463937274*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"5c163192-e8e1-48e7-997a-2e8c653caa86"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          TemplateBox[{"1"},
           "OutputSizeLimit`Skeleton"], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{68., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{61., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 30090217217383455732, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{68., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 30090217217383455732, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 30090217217383455732, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{92., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30090217217383455732 === $SessionID, 
   Out[14], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.728658023929117*^9, 3.728658030618373*^9}, 
   3.728658921286787*^9, {3.7286594429194307`*^9, 3.728659464518839*^9}, {
   3.728661070771277*^9, 3.728661071170826*^9}, 3.728661111885498*^9, 
   3.728661161306951*^9, 
   3.7286612415927467`*^9},ExpressionUUID->"dce9eed3-bbf2-45b1-935a-\
de776a4852af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"ds", "[", 
   RowBox[{"[", "3", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.728659444914153*^9, 
  3.728659457232767*^9}},ExpressionUUID->"bb7e8795-d784-4273-9f03-\
fda21317959f"],

Cell[BoxData[
 RowBox[{"{", "1471", "}"}]], "Output",
 CellChangeTimes->{{3.72865944650517*^9, 3.728659465363989*^9}, 
   3.72866107487503*^9},ExpressionUUID->"65a0c667-2f18-464e-9d2e-\
603a5dc7e9c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bboxNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"vgg", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "\"\<pool2\>\""}], "}"}]}], "]"}], ",", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"64", ",", "3"}], "]"}], ",", "Ramp", ",", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"16", ",", "3"}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     RowBox[{"FlattenLayer", "[", "]"}], ",", "4096", ",", "Ramp", ",", 
     RowBox[{"DropoutLayer", "[", "]"}], ",", "4096", ",", "Ramp", ",", 
     RowBox[{"DropoutLayer", "[", "]"}], ",", "4"}], "}"}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.728656888500347*^9, 3.7286569066430187`*^9}, {
   3.7286572809845963`*^9, 3.7286572819846363`*^9}, {3.7286608681116333`*^9, 
   3.728660904023006*^9}, {3.7286609397999773`*^9, 3.728660980142507*^9}, 
   3.728661165397464*^9},ExpressionUUID->"6b28fdf4-32b9-4f55-af8e-\
11988bd74fac"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv1_1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 64, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                   "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 128, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                   "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "conv1_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "relu1_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv1_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu1_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu1_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu1_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv2_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu2_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv2_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv2_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu2_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu2_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv2_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu2_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "pool2", "Outputs", "Output"]},
              "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 56, 56}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{64, 128, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {54, 54}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 54, 54}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 54, 54}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 54, 54}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 54, 54}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{16, 64, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {54, 54}, 
               "$OutputSize" -> {52, 52}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 54, 54}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 16, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{16, 52, 52}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {43264}, 
               "$InputSize" -> {16, 52, 52}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{16, 52, 52}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{43264}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{4096, 43264}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 43264, "$InputDimensions" -> {43264}], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{43264}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{4096, 4096}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{4, 4096}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
              "ColorChannels" -> 3, 
              "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
               0.4076039215686274}], 
             NeuralNetworks`TensorT[{3, 224, 224}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"54\"", "\"54\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"54\"", "\"54\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"52\"", "\"52\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"52\"", "\"52\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"43264\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{334., {123., 127.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.728657282442704*^9, 3.728659467384224*^9, 3.7286609075366096`*^9, {
   3.7286609597853117`*^9, 3.7286609818894053`*^9}, 3.728661076261071*^9, 
   3.728661115189332*^9, 3.728661167202986*^9, 
   3.728661247709043*^9},ExpressionUUID->"f92c2c8f-05af-47c2-b0c7-\
d3f92b45a572"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bboxTrained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"bboxNet", ",", 
    RowBox[{"ds", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"ds", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", "400"}], "]"}]}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}], ",", 
    RowBox[{"LearningRateMultipliers", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", ";;", "13"}], "\[Rule]", "1"}], ",", 
       RowBox[{"_", "\[Rule]", "None"}]}], "}"}]}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "2"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.728657229185896*^9, 3.728657303120675*^9}, 
   3.7286573585937147`*^9, {3.728657540999489*^9, 3.728657542959482*^9}, {
   3.7286580555888*^9, 3.728658068835391*^9}, {3.7286590673889513`*^9, 
   3.728659083692068*^9}, {3.728660915551833*^9, 3.728660920534634*^9}, {
   3.728661102054584*^9, 3.728661102405849*^9}, {3.728661232205131*^9, 
   3.728661235084695*^9}},ExpressionUUID->"ecb92e4f-5452-49a3-9cf2-\
f8489272261a"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv1_1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 64, 
                   "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                   "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 128, 
                   "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                   "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "conv1_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "relu1_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv1_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu1_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu1_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu1_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv2_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu2_1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv2_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv2_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu2_1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "relu2_2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv2_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "relu2_2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "pool2", "Outputs", "Output"]},
              "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{128, 56, 56}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{64, 128, 3, 3}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               128, "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
               "$OutputSize" -> {54, 54}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 54, 54}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 54, 54}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 54, 54}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 54, 54}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{16, 64, 3, 3}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{16}]], "Parameters" -> 
             Association[
              "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               64, "$GroupNumber" -> 1, "$InputSize" -> {54, 54}, 
               "$OutputSize" -> {52, 52}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 54, 54}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`Private`DummyRawArray[{16}], "Beta" -> 
               NeuralNetworks`Private`DummyRawArray[{16}], "MovingMean" -> 
               NeuralNetworks`Private`DummyRawArray[{16}], "MovingVariance" -> 
               NeuralNetworks`Private`DummyRawArray[{16}]], "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 16, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{16, 52, 52}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{16, 52, 52}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {43264}, 
               "$InputSize" -> {16, 52, 52}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{16, 52, 52}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{43264}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{4096, 43264}], "Biases" -> 
               NeuralNetworks`Private`DummyRawArray[{4096}]], "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 43264, "$InputDimensions" -> {43264}], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{43264}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{4096, 4096}],
                "Biases" -> NeuralNetworks`Private`DummyRawArray[{4096}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
               "$InputSize" -> 4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "12" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], "13" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{4, 4096}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{4}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               4096, "$InputDimensions" -> {4096}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4096}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
              "ColorChannels" -> 3, 
              "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
               0.4076039215686274}], 
             NeuralNetworks`TensorT[{3, 224, 224}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"224\"", 
                    "\"224\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"128\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"54\"", "\"54\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"54\"", "\"54\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"52\"", "\"52\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"16\"", "\"52\"", "\"52\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"43264\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{334., {116., 120.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.728659084579773*^9, 3.728660817388973*^9, {3.7286609170169563`*^9, 
   3.728660921952922*^9}, 3.728661112164988*^9, 3.7286612418517113`*^9, 
   3.728667160342375*^9},ExpressionUUID->"32b5ea38-28b5-48fb-9e2a-\
7c37304668d5"]
}, Open  ]]
},
WindowSize->{1916, 1050},
WindowMargins->{{Automatic, -1918}, {-1059, Automatic}},
FrontEndVersion->"11.2 for Linux x86 (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 332, 8, 47, "Input",ExpressionUUID->"3bdbf0b9-c1a2-4443-9249-55590bf7b60d",
 InitializationCell->True],
Cell[915, 32, 148108, 2890, 679, "Output",ExpressionUUID->"77413d88-cea0-4dd0-a35a-7519daf60f40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149060, 2927, 297, 6, 47, "Input",ExpressionUUID->"8fce87c7-45db-49ce-891d-71cf8b012401",
 InitializationCell->True],
Cell[149360, 2935, 296, 4, 35, "Output",ExpressionUUID->"a0d69ec3-0cc7-4a42-90fc-2dff34ced404"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149693, 2944, 336, 7, 47, "Input",ExpressionUUID->"88d9d711-d070-4017-99c3-ea56517b71e1",
 InitializationCell->True],
Cell[150032, 2953, 5520, 104, 381, "Output",ExpressionUUID->"5de0e068-744c-4c47-bd09-b22918747e12"]
}, Open  ]],
Cell[155567, 3060, 1797, 49, 232, "Input",ExpressionUUID->"bcfcc40b-94a6-4893-a2b8-db7e39607a91",
 InitializationCell->True],
Cell[157367, 3111, 3391, 87, 439, "Input",ExpressionUUID->"dce6b4f4-f565-4375-9a2b-9efc0f645b49",
 InitializationCell->True],
Cell[160761, 3200, 317, 8, 31, "Input",ExpressionUUID->"006ae7a1-002f-4484-9fe9-388015b88c00"],
Cell[CellGroupData[{
Cell[161103, 3212, 348, 9, 31, "Input",ExpressionUUID->"8367b445-3db3-4fa6-959c-6a2fa19b38e1"],
Cell[161454, 3223, 209, 4, 35, "Output",ExpressionUUID->"66241dc4-6ed5-4feb-96c9-cfe133902e01"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161700, 3232, 204, 4, 31, "Input",ExpressionUUID->"7e97ce07-7b8c-4c12-bb1c-4eb69cb42255"],
Cell[161907, 3238, 541, 13, 38, "Output",ExpressionUUID->"b5011990-70bc-401e-9514-173041f16119"]
}, Open  ]],
Cell[162463, 3254, 316, 8, 31, "Input",ExpressionUUID->"de49001f-3d6e-49b9-be29-69ad071ebefc"],
Cell[CellGroupData[{
Cell[162804, 3266, 252, 6, 31, "Input",ExpressionUUID->"95930887-eb1e-4455-ae79-4dd5f0af82e1"],
Cell[163059, 3274, 542, 13, 38, "Output",ExpressionUUID->"7017d2db-7a6c-4031-95cc-a9c3389684f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163638, 3292, 1952, 51, 255, "Input",ExpressionUUID->"52fbaa0c-89d4-46c6-8dd2-708b3d3bd5ef",
 InitializationCell->True],
Cell[165593, 3345, 444181, 7296, 550, "Output",ExpressionUUID->"5e787523-3337-4121-aa94-2fdb3e5f4ffc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[609811, 10646, 1339, 31, 209, "Input",ExpressionUUID->"587aeae8-fd2d-47eb-91b3-c9bda3e60e72",
 InitializationCell->True],
Cell[611153, 10679, 12004, 314, 223, "Output",ExpressionUUID->"09d543e2-d30d-4a4b-91f7-51837be889ba"]
}, Open  ]],
Cell[623172, 10996, 1835, 49, 209, "Input",ExpressionUUID->"ea0ee7d0-a401-4ed2-8a76-4d00c870012b",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[625032, 11049, 484, 11, 47, "Input",ExpressionUUID->"5c163192-e8e1-48e7-997a-2e8c653caa86",
 InitializationCell->True],
Cell[625519, 11062, 7658, 203, 95, "Output",ExpressionUUID->"dce9eed3-bbf2-45b1-935a-de776a4852af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633214, 11270, 242, 6, 31, "Input",ExpressionUUID->"bb7e8795-d784-4273-9f03-fda21317959f"],
Cell[633459, 11278, 200, 4, 35, "Output",ExpressionUUID->"65a0c667-2f18-464e-9d2e-603a5dc7e9c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633696, 11287, 1037, 23, 47, "Input",ExpressionUUID->"6b28fdf4-32b9-4f55-af8e-11988bd74fac",
 InitializationCell->True],
Cell[634736, 11312, 43587, 903, 289, "Output",ExpressionUUID->"f92c2c8f-05af-47c2-b0c7-d3f92b45a572"]
}, Open  ]],
Cell[CellGroupData[{
Cell[678360, 12220, 1199, 26, 31, "Input",ExpressionUUID->"ecb92e4f-5452-49a3-9cf2-f8489272261a"],
Cell[679562, 12248, 42784, 885, 275, "Output",ExpressionUUID->"32b5ea38-28b5-48fb-9e2a-7c37304668d5"]
}, Open  ]]
}
]
*)

